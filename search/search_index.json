{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tools to map accounting data to long term plans The accounting system is Moneydance. The long term planning is via Excel, including some VBA. These are tied together with some Python code. Spreadsheet Getting Started Visual Basic Appendix","title":"Tools to map accounting data to long term plans"},{"location":"#tools-to-map-accounting-data-to-long-term-plans","text":"The accounting system is Moneydance. The long term planning is via Excel, including some VBA. These are tied together with some Python code. Spreadsheet Getting Started Visual Basic Appendix","title":"Tools to map accounting data to long term plans"},{"location":"appendix/","text":"Appendix tax rates Worksheets removed that were previously on long-term-plan. Sweep Plan (goes to iande and taxes) Variance Tax Tables (-> tables) 401K RetireMedic States (-> tables) RMD (-> tables) Pension (-> tables) Actual (->iande-map) M-Actual (->iande_actl) HSA-V (->hsa) HSA-G (->hsa) Act-401K (->401K) SettleAccts Real Estate Act College Clg-Actual Criteria Inflation (->tables) Loan Calc (other) Inflation AcctNameChg InvestAct (->invest_actl) InvestXfersAct (->invest_actl) OtherAct (->other-x)","title":"Appendix"},{"location":"appendix/#appendix","text":"","title":"Appendix"},{"location":"appendix/#tax-rates","text":"","title":"tax rates"},{"location":"appendix/#worksheets-removed-that-were-previously-on-long-term-plan","text":"Sweep Plan (goes to iande and taxes) Variance Tax Tables (-> tables) 401K RetireMedic States (-> tables) RMD (-> tables) Pension (-> tables) Actual (->iande-map) M-Actual (->iande_actl) HSA-V (->hsa) HSA-G (->hsa) Act-401K (->401K) SettleAccts Real Estate Act College Clg-Actual Criteria Inflation (->tables) Loan Calc (other) Inflation AcctNameChg InvestAct (->invest_actl) InvestXfersAct (->invest_actl) OtherAct (->other-x)","title":"Worksheets removed that were previously on long-term-plan."},{"location":"data_from_moneydance/","text":"Data from Moneydance Python Environment In the terminal change the current directory to the root of the repository. Use the following command to active the virtual environment: source .venv/bin/activate Copy Income and Expense from Moneydance In Moneydance run Income & Expense by Year Save as data/iande.tsv Close spreadsheet and run the program iande-actl-load.py Ensure that the formulas on the year are set to getval... Check that income, tax and expense totals match to report: start at level 3 and drill down to find problems. IRA distributions are problematic (see note IRA-Txbl-Distr - line) If there are new categories - you will need to insert a line First pass on the taxes The first pass does not rely on the tax forms, those come later - basically the bits that are not accounted for are entered into the manual_actl tab. Check W2 exclusions on aux Change the column for the year to use the actuals Carefully check the progression of the logic Copy transfers data from Moneydance Run report in Moneydance (currently called Transfers-to-fcast. Press Save button and choose Tab delimited and save as data/transfers.tsv (If a year has been completed run the Bank balance export procedure) If fcast.xlsm is open, save your work and close the file. Open a terminal window at the project root. Run python transfers_actl_load.py Re-open the spreadsheet and save it to force balances to recalc and be stored. Bank balance export procedure The method used is the difference of progressive balances. This is done for each year. In Moneydance run the Account Balances report selecting only banks and credit cards. Save the file as tab-separated under budget/data as bank-bal-YYYY . These files are consumed by the transfers_actl_load.py routine. Investment actuals The Tranfers to Investment Accounts by Year report is saved as invest_x.tsv . The Investment Performance report for each year is saved under invest-p-yyyy.tsv for each year. These are processed by invest_actl_load.py . At each year end: Run Tranfers to Investment Accounts by Year and save as invest_x.tsv Run Investment Performance report for the year and save under invest-p-yyyy.tsv If fcast.xlsm is open, save your work and close the file. Open a terminal window at the project root. Run invest_actl_load.py Re-open the spreadsheet and save it to force balances to recalc and be stored. Validate balances for a year The routine balance_check.py is available to see how the values from the Account Balances report in Moneydance match to those in fcast.xlsm . In Moneydance run the Account Balances report selecting all accounts. Save the report under the names: data/yyyy Account Balances.tsv . If the year has rolled over in the spreadsheet change first_forecast_year in on the tables worksheet. In a terminal window set current directory to the project root and run balance_check.py yyyy where yyyy is the year to check. You should get a listing that shows the exact matches and the accounts that don't match (and how much they are off). Add an account On the accounts tab insert a row in the table Fill in all fields (notes is optional). Usually, the account name is used for the actl_source Create the rows on the balances table Steps 1 Unhide all columns and sort by account name 2 Insert 6 new rows. Put the account name in the first row of the AcctName field. 3 Copy down columns A, D, E, F from another account. 4 Copy the 6 value types into column B 5 Insert 6 copies of the new account name for each account in column c 6 Copy formulas into 1st active year 7 Set the opening balance 8 When satisfied with actuals, copy formulas into 1st forecast period Rename an account It turns out to be useful to have an account naming convention. The convention is type - owner - firm where type is 401K, 529, BKG, ESP, HSA, IRA, IRA Roth, MUT, BND and owner is JNT or the owner's initials. Notes BND is for - gov't bonds where TRY is for treasury - direct Here's what has to be done to rename an account. The account name can be changed in Moneydance using the Tools -> Accounts menu. It must be changed in fcst.xlsm at the following locations tbl_accounts - it occurs in the A column and may occur in the G column tbl_balances Depending on the account it may occur in the following location tbl_retir, tbl_retir_parms The following should be refreshed: tbl_transfers_actl by running the procedure Accounting The computation of balances depends on the ability to determine the changes to the accounts. The \"Other Asset\" account has several sub-accounts, including receivables from a few parties. The method of determining the transfers depends is to use the transfers-to-fcast memorized report. Some of the sub-accounts in Other Asset have transactions using expense categories. To support this the memorized report includes all expenses in the criteria. This correctly gathers the amounts such as depreciation for cars and payments made against some expense category (on our behalf). The set of a target accounts configured in this report includes all investment, loan, asset and liability accounts. Whenever there is a transfer between these accounts, this method essentially cancels out that values, which can lead to wrong balances. Such transactions should be routed throught the Passthru bank account to avoid this problem.","title":"Data from Moneydance"},{"location":"data_from_moneydance/#data-from-moneydance","text":"","title":"Data from Moneydance"},{"location":"data_from_moneydance/#python-environment","text":"In the terminal change the current directory to the root of the repository. Use the following command to active the virtual environment: source .venv/bin/activate","title":"Python Environment"},{"location":"data_from_moneydance/#copy-income-and-expense-from-moneydance","text":"In Moneydance run Income & Expense by Year Save as data/iande.tsv Close spreadsheet and run the program iande-actl-load.py Ensure that the formulas on the year are set to getval... Check that income, tax and expense totals match to report: start at level 3 and drill down to find problems. IRA distributions are problematic (see note IRA-Txbl-Distr - line) If there are new categories - you will need to insert a line","title":"Copy Income and Expense from Moneydance"},{"location":"data_from_moneydance/#first-pass-on-the-taxes","text":"The first pass does not rely on the tax forms, those come later - basically the bits that are not accounted for are entered into the manual_actl tab. Check W2 exclusions on aux Change the column for the year to use the actuals Carefully check the progression of the logic","title":"First pass on the taxes"},{"location":"data_from_moneydance/#copy-transfers-data-from-moneydance","text":"Run report in Moneydance (currently called Transfers-to-fcast. Press Save button and choose Tab delimited and save as data/transfers.tsv (If a year has been completed run the Bank balance export procedure) If fcast.xlsm is open, save your work and close the file. Open a terminal window at the project root. Run python transfers_actl_load.py Re-open the spreadsheet and save it to force balances to recalc and be stored.","title":"Copy transfers data from Moneydance"},{"location":"data_from_moneydance/#bank-balance-export-procedure","text":"The method used is the difference of progressive balances. This is done for each year. In Moneydance run the Account Balances report selecting only banks and credit cards. Save the file as tab-separated under budget/data as bank-bal-YYYY . These files are consumed by the transfers_actl_load.py routine.","title":"Bank balance export procedure"},{"location":"data_from_moneydance/#investment-actuals","text":"The Tranfers to Investment Accounts by Year report is saved as invest_x.tsv . The Investment Performance report for each year is saved under invest-p-yyyy.tsv for each year. These are processed by invest_actl_load.py . At each year end: Run Tranfers to Investment Accounts by Year and save as invest_x.tsv Run Investment Performance report for the year and save under invest-p-yyyy.tsv If fcast.xlsm is open, save your work and close the file. Open a terminal window at the project root. Run invest_actl_load.py Re-open the spreadsheet and save it to force balances to recalc and be stored.","title":"Investment actuals"},{"location":"data_from_moneydance/#validate-balances-for-a-year","text":"The routine balance_check.py is available to see how the values from the Account Balances report in Moneydance match to those in fcast.xlsm . In Moneydance run the Account Balances report selecting all accounts. Save the report under the names: data/yyyy Account Balances.tsv . If the year has rolled over in the spreadsheet change first_forecast_year in on the tables worksheet. In a terminal window set current directory to the project root and run balance_check.py yyyy where yyyy is the year to check. You should get a listing that shows the exact matches and the accounts that don't match (and how much they are off).","title":"Validate balances for a year"},{"location":"data_from_moneydance/#add-an-account","text":"On the accounts tab insert a row in the table Fill in all fields (notes is optional). Usually, the account name is used for the actl_source Create the rows on the balances table Steps 1 Unhide all columns and sort by account name 2 Insert 6 new rows. Put the account name in the first row of the AcctName field. 3 Copy down columns A, D, E, F from another account. 4 Copy the 6 value types into column B 5 Insert 6 copies of the new account name for each account in column c 6 Copy formulas into 1st active year 7 Set the opening balance 8 When satisfied with actuals, copy formulas into 1st forecast period","title":"Add an account"},{"location":"data_from_moneydance/#rename-an-account","text":"It turns out to be useful to have an account naming convention. The convention is type - owner - firm where type is 401K, 529, BKG, ESP, HSA, IRA, IRA Roth, MUT, BND and owner is JNT or the owner's initials. Notes BND is for - gov't bonds where TRY is for treasury - direct Here's what has to be done to rename an account. The account name can be changed in Moneydance using the Tools -> Accounts menu. It must be changed in fcst.xlsm at the following locations tbl_accounts - it occurs in the A column and may occur in the G column tbl_balances Depending on the account it may occur in the following location tbl_retir, tbl_retir_parms The following should be refreshed: tbl_transfers_actl by running the procedure","title":"Rename an account"},{"location":"data_from_moneydance/#accounting","text":"The computation of balances depends on the ability to determine the changes to the accounts. The \"Other Asset\" account has several sub-accounts, including receivables from a few parties. The method of determining the transfers depends is to use the transfers-to-fcast memorized report. Some of the sub-accounts in Other Asset have transactions using expense categories. To support this the memorized report includes all expenses in the criteria. This correctly gathers the amounts such as depreciation for cars and payments made against some expense category (on our behalf). The set of a target accounts configured in this report includes all investment, loan, asset and liability accounts. Whenever there is a transfer between these accounts, this method essentially cancels out that values, which can lead to wrong balances. Such transactions should be routed throught the Passthru bank account to avoid this problem.","title":"Accounting"},{"location":"fcast/","text":"Design and use of fcast.xlsm Purpose This system extends the family's historical financials into the future. It allows for planning for income/expenses as well as financial moves between accounts. It has a tax calculator (which is far from general, but works for us). General set up The system uses a set of Excel tables, which are distributed over a set of worksheets. Many of the tables represent time series where the time is based on years. The data elements are typically financial values assoicated with a year. For instance, the balances table tracks how balances change year by year. The time sequence columns are labeled with 'Y' + year. Other columns are labeled with appropriate short column labels. The meaning of the column data depends on the state of the system. To the left of some point, data is considered actual, while to the right it is forecast. Use of Visual Basic (macros) allows for calculations to be done in a more readable manner. However there is a downside. This is that Excel cannot use its dependency trees to know what need to occur when the macros reference or update done with this method. So far I have not turned on the use of the application volitile method, as there is significant overhead, possibly causing slow performance. There is a macro, currently called calc_retir(), to perform the re-calcuations in the correct order. External access to the spreadsheet is used. Mostly these are programs to transfer Moneydance actual data into the Workbook. This is done via Python using the openxlpy library. These files are in the dance subfolder. One of these Python files, util/index_tables.py enumerates and indexs the tables (something oddly missing in Excel due to the fact that it is worksheet oriented). The index is stored on the utility worksheet. Worksheets accounts This worksheet lists the tracked accounts and their attributes. Some of these accounts are real accounts at financial institutions. Others summarize sets of assets or liabilities. One account is designated as the sweep account. The attributes are: Name Description Type A=Asset, B=Bank, C=Credit Cards, I=Investment, L=Liability, N=Loans Income Txbl 0 if sheltered, 1 if normal taxes, 2 for muni bonds Active 0 if inactive, 1 if active Rlz share between 0 and 1 - factor to apply to income to categorize as realized in forecasts Unrlz share same as above, but for unrealized. These should add to 1. actl_source The line name where to find the actual add/wdraw amount actl_source_tab The table name where to find the actual add/wdraw amount fcst_source The line name where to find the forecast add/wdraw amount fcst_source_tab The table name where to find the forecast add/wdraw amount notes Place to indicate special things about the account balances The following fields are looked up from the account page: Type, Income Txbl, and Active. This table has six rows for each account. ValType Formula Rate Used to forecast gains, which are split by the indicators on the account rows. Computed for historical rows. Start Bal Previous year's end balance Add/Wdraw Either manual, or some rows will have formulas Rlz Int/Gn start * rate * split Unrlz Gn/Ls start * rate * split End Bal Adds the start balance to each of the other change categories. The calculations are designed to work even if the rows are filtered or sorted. To restore to the natural sort order sort by AcctName then ValType (using a custom sort order that is defined) At the bottom there is a summary of account balances by type. invest-actl The Python program invest-actl-load.py gets the master list of investment accounts from fcast.xlsm . It then reads the data/invst_*.tsv files and computes the net flows for each account by year. The MoneyDance Investment Performance report is named invest-p-YYYY.tsv . There is one for each actual year. The program reads these as well. It ends up with 3 rows of actuals for each investment like: ValType AcctName Y1 Y2 Y... Yn Add/Wdraw 401K 0 0 0 0 Rlz Int/Gn 401K 0 0 0 0 Unrlz Gn/Ls 401K 0 0 0 0 This can be used to look up the actuals on the balances tab. The visual basic function gain references the realized and unrealized gain lines for actuals. the visual basic function add_wdraw likewise references the first line. transfers-actl Gathers the transfers to and from all accounts coming from or going to banks or credit cards. This also shows the transfers to and from bank and credit card accounts. The bank and credit card transfers are derived another way and are also included on this tab. If there are transfers between these accounts, then they should pass through a bank account in order to be captured here. That is the purpose of the pseudo bank account 'Passthru' and its sub-accounts in Moneydance. This tab is loaded by transfers-actl-load.py from these sources: A copy of the output of moneydance transfer report stored under budget/data . The method used is the difference of progressive balances. The balances are generated by the Account Balances report selecting only banks and credit cards. This is done for each year. The tab-separated files are stored under budget/data as bank-bal-YYYY . A third method is planned which will ensure that all accounts have rows - even those with zero transfers. iande-actl This is Income and Expense actuals as it comes from Moneydance Income & Expense by Year report. A key is constructed which includes the hierarchy. That occurs in the A column. The summary rows are replaced by formulas as part of the import process. These can be copied into future years. The column headings are of the Y+year style to facilitate lookups. This data is loaded from data/iande.tsv with the program iande-actl-load.py iande-map (Planned) assists with mapping actuals to rows in iande. See item 3 under iande. iande This is for income and expenses. This is both actuals and forecast. This tab is seeded with the original iande-actl data. But it is expected that over time the rows will change. For instance, if we later drop the first few years, we will find that some of the rows no longer come over from Moneydance. On the other hand, we may add rows in Moneydance. It is also possible that we may want to re-organize or rename the rows. Take deleted rows first. Deleted Rows - The python script that loads the latest from Moneydance performs a check before executing the load. It requires that any row that contains data or a fomula in the forecast era exist in the fresh import from Moneydance, when seeding the iande data. New rows - The new rows will be added into the tbl_iande-actl table but the tbl_iande won't know about them, possibly yielding totals that don't match. At this point its up to the operator to make any needed adjustments to tbl_iande so that it's consistent with the actuals feed. Note - if new subcategories are created: then its best to insert them on tbl_iande so that what used to be a leaf node now has no data (its just a heading), copy the fixed values to the new rows and ensure the subtotals are proper for non-fixed (forecast values). Note: the report filters out categories that do not have any actuals. In order to create forecasts for these, go ahead and create the desired rows in Moneydance and manually construct the rows in tbl_iande . Re-arrangement and renaming - At this point its up to the operator to make any needed adjustments to tbl_iande so that it's consistent with the actuals feed. The net of this is that except during periods of change, the rows of the iande tab and the rows of the iande-actl tab form the same set. We don't require these to be in the same order. aux This is a set of rows needed to establish forecasts in some cases. The rows may be input or calculated. The need arises for aux data and calcs, for instance, in handling 401K accounts, where the EE contribution is tax deductable but is only part of the amount for add/wdraw at the balance level. That value plus the pre-tax deductions amounts from the paychecks need to be summed to produce the W2 exclusions. This is the place where those calcs happen. capgn This is for the purposes of estimating taxes for the current and prior year until tax statements arrive. taxes This computes Federal and State income taxes. It requires the data from the tables tab. For actuals it pulls data mostly from iande-actl. A few income fields need to come from tax documents. tax-est This helps figure if estimated taxes are needed or if W4 filings need to be made. tables A table of state tax information, tax tables, Medicare Part B premiums, inflation, required minimum distribution tables, and a general state mangement table. Federal tax tables These use the subtraction method in IRS pub detailed here: https://www.irs.gov/pub/irs-pdf/i1040gi.pdf. This takes 6 rows and 4 columns per year. These are organized in a single table. A VBA macro is used to select the right values for use on the taxes tab. The prgram bracket_fix.py computes the numbers for the subtraction table based on a csv file which is shows the values using the additive method. Not sure where I found that file, most recently, I recreated the format. Kind of painful. May be best to wait for the 1040 Instructions to be published each year. (Or find a reliable source) state taxes This compiles facts about various states for the purpose of considering relocation. Can be referenced in the tax calcs. Source: https://www.kiplinger.com/tool/retirement/T055-S001-state-by-state-guide-to-taxes-on-retirees/index.php Part B Premium Values to select the premium given modified AGI and year. inflation 3 columns about 75 rows RMD Table III is for normal plans. Table I is for beneficiaries (inherited IRA). State management Currently this has only one value, the first forecast year. retirement Plans out income streams and post-retirement medical expenses. This affects both the balances and the iande tabs. Retirement medical is modeled here. Deductibles and copays are in 'other'. These values are posted as totals in the premium lines of IANDE and are meant to represent all net medical expenses. retireparms parameters to drive the retirement tab To make the calculations more understandable some are done on this table. For instance, the months column is input data, which is used to offset the birthday of the account owner to yield a start date. pension options Facts about pensions used by retirement sheet. hsa A page with a section for each HSA account. manual_actl A number of entries are needed to determine taxes. When easiest, these are input on this table: tbl_manual_actl . A Moneydance report W2-exclusions extracts the amounts that can be excluded from the W2s. This relies on the Pre-tax and pre-tax tags. These should be input manually. Computes the actual 401K contributions to post to the iande tab. IRA-Txbl-Distr - line This is needed to handle the accounting difficulty that arises with IRA distributions when the source account is in Moneydance (see note). The gross amount is taxable and thus needs to be included in the tax calculation. However, the tax amounts go to the state and federal expense lines and the net goes to the receiving bank. There is no place to declare income. The solution is to use a Moneydance tag, IRA-Txbl-Distr on those transactions. This involves editing the transactions that are downloaded from the financial institution to add in the tag. This needs to be done in the Bank Register view not the Register view. The tags field is only shown in the Bank Register view. This data is exported from Moneydance via the IRA-Distr report, saved in the data/IRA-Distr file and imported via the ira-distr.py routine, which places it on the IRA-Txbl-Distr line on the aux table. From there it flows to the iande tab and then to the taxes tab. The value in iande_actl cannot be used since Moneydance itself does not have this total. functions There are Visual Basic for Applications functions in this worksheet. There are some complex dependencies. Currently, in some cases it is necessary to run calc_retir in order to complete the calculations. tables The get_val routine requires the use of worksheet tables. This allows the tables to have their own column names and for the values to be located. Tables are located on worksheets. So that we don't have to care about that an index of tables is created in the 'utility' worksheet. This itself is a table and it is created by a Python program index-tables.py . conventions All table names begin with tbl_ . Always use lowercase except for acronyms Use underscores between words Use std abbreviations: actual=actl; balances=bals; investments=invest; retirement=retir; annuity=anny;duration=dur;pension=pens; value or valuation = val;parameters=parms ranges The use of named ranges is minimized due to the use of structured tables. The following are the ones remaining of the initial plan. These will changes as needed. HSA_g_actl HSA_g_years infl_data xfer_to_invest xfer_to_non_invest xfer_to_other","title":"Design and use of fcast.xlsm"},{"location":"fcast/#design-and-use-of-fcastxlsm","text":"","title":"Design and use of fcast.xlsm"},{"location":"fcast/#purpose","text":"This system extends the family's historical financials into the future. It allows for planning for income/expenses as well as financial moves between accounts. It has a tax calculator (which is far from general, but works for us).","title":"Purpose"},{"location":"fcast/#general-set-up","text":"The system uses a set of Excel tables, which are distributed over a set of worksheets. Many of the tables represent time series where the time is based on years. The data elements are typically financial values assoicated with a year. For instance, the balances table tracks how balances change year by year. The time sequence columns are labeled with 'Y' + year. Other columns are labeled with appropriate short column labels. The meaning of the column data depends on the state of the system. To the left of some point, data is considered actual, while to the right it is forecast. Use of Visual Basic (macros) allows for calculations to be done in a more readable manner. However there is a downside. This is that Excel cannot use its dependency trees to know what need to occur when the macros reference or update done with this method. So far I have not turned on the use of the application volitile method, as there is significant overhead, possibly causing slow performance. There is a macro, currently called calc_retir(), to perform the re-calcuations in the correct order. External access to the spreadsheet is used. Mostly these are programs to transfer Moneydance actual data into the Workbook. This is done via Python using the openxlpy library. These files are in the dance subfolder. One of these Python files, util/index_tables.py enumerates and indexs the tables (something oddly missing in Excel due to the fact that it is worksheet oriented). The index is stored on the utility worksheet.","title":"General set up"},{"location":"fcast/#worksheets","text":"","title":"Worksheets"},{"location":"fcast/#accounts","text":"This worksheet lists the tracked accounts and their attributes. Some of these accounts are real accounts at financial institutions. Others summarize sets of assets or liabilities. One account is designated as the sweep account. The attributes are: Name Description Type A=Asset, B=Bank, C=Credit Cards, I=Investment, L=Liability, N=Loans Income Txbl 0 if sheltered, 1 if normal taxes, 2 for muni bonds Active 0 if inactive, 1 if active Rlz share between 0 and 1 - factor to apply to income to categorize as realized in forecasts Unrlz share same as above, but for unrealized. These should add to 1. actl_source The line name where to find the actual add/wdraw amount actl_source_tab The table name where to find the actual add/wdraw amount fcst_source The line name where to find the forecast add/wdraw amount fcst_source_tab The table name where to find the forecast add/wdraw amount notes Place to indicate special things about the account","title":"accounts"},{"location":"fcast/#balances","text":"The following fields are looked up from the account page: Type, Income Txbl, and Active. This table has six rows for each account. ValType Formula Rate Used to forecast gains, which are split by the indicators on the account rows. Computed for historical rows. Start Bal Previous year's end balance Add/Wdraw Either manual, or some rows will have formulas Rlz Int/Gn start * rate * split Unrlz Gn/Ls start * rate * split End Bal Adds the start balance to each of the other change categories. The calculations are designed to work even if the rows are filtered or sorted. To restore to the natural sort order sort by AcctName then ValType (using a custom sort order that is defined) At the bottom there is a summary of account balances by type.","title":"balances"},{"location":"fcast/#invest-actl","text":"The Python program invest-actl-load.py gets the master list of investment accounts from fcast.xlsm . It then reads the data/invst_*.tsv files and computes the net flows for each account by year. The MoneyDance Investment Performance report is named invest-p-YYYY.tsv . There is one for each actual year. The program reads these as well. It ends up with 3 rows of actuals for each investment like: ValType AcctName Y1 Y2 Y... Yn Add/Wdraw 401K 0 0 0 0 Rlz Int/Gn 401K 0 0 0 0 Unrlz Gn/Ls 401K 0 0 0 0 This can be used to look up the actuals on the balances tab. The visual basic function gain references the realized and unrealized gain lines for actuals. the visual basic function add_wdraw likewise references the first line.","title":"invest-actl"},{"location":"fcast/#transfers-actl","text":"Gathers the transfers to and from all accounts coming from or going to banks or credit cards. This also shows the transfers to and from bank and credit card accounts. The bank and credit card transfers are derived another way and are also included on this tab. If there are transfers between these accounts, then they should pass through a bank account in order to be captured here. That is the purpose of the pseudo bank account 'Passthru' and its sub-accounts in Moneydance. This tab is loaded by transfers-actl-load.py from these sources: A copy of the output of moneydance transfer report stored under budget/data . The method used is the difference of progressive balances. The balances are generated by the Account Balances report selecting only banks and credit cards. This is done for each year. The tab-separated files are stored under budget/data as bank-bal-YYYY . A third method is planned which will ensure that all accounts have rows - even those with zero transfers.","title":"transfers-actl"},{"location":"fcast/#iande-actl","text":"This is Income and Expense actuals as it comes from Moneydance Income & Expense by Year report. A key is constructed which includes the hierarchy. That occurs in the A column. The summary rows are replaced by formulas as part of the import process. These can be copied into future years. The column headings are of the Y+year style to facilitate lookups. This data is loaded from data/iande.tsv with the program iande-actl-load.py","title":"iande-actl"},{"location":"fcast/#iande-map","text":"(Planned) assists with mapping actuals to rows in iande. See item 3 under iande.","title":"iande-map"},{"location":"fcast/#iande","text":"This is for income and expenses. This is both actuals and forecast. This tab is seeded with the original iande-actl data. But it is expected that over time the rows will change. For instance, if we later drop the first few years, we will find that some of the rows no longer come over from Moneydance. On the other hand, we may add rows in Moneydance. It is also possible that we may want to re-organize or rename the rows. Take deleted rows first. Deleted Rows - The python script that loads the latest from Moneydance performs a check before executing the load. It requires that any row that contains data or a fomula in the forecast era exist in the fresh import from Moneydance, when seeding the iande data. New rows - The new rows will be added into the tbl_iande-actl table but the tbl_iande won't know about them, possibly yielding totals that don't match. At this point its up to the operator to make any needed adjustments to tbl_iande so that it's consistent with the actuals feed. Note - if new subcategories are created: then its best to insert them on tbl_iande so that what used to be a leaf node now has no data (its just a heading), copy the fixed values to the new rows and ensure the subtotals are proper for non-fixed (forecast values). Note: the report filters out categories that do not have any actuals. In order to create forecasts for these, go ahead and create the desired rows in Moneydance and manually construct the rows in tbl_iande . Re-arrangement and renaming - At this point its up to the operator to make any needed adjustments to tbl_iande so that it's consistent with the actuals feed. The net of this is that except during periods of change, the rows of the iande tab and the rows of the iande-actl tab form the same set. We don't require these to be in the same order.","title":"iande"},{"location":"fcast/#aux","text":"This is a set of rows needed to establish forecasts in some cases. The rows may be input or calculated. The need arises for aux data and calcs, for instance, in handling 401K accounts, where the EE contribution is tax deductable but is only part of the amount for add/wdraw at the balance level. That value plus the pre-tax deductions amounts from the paychecks need to be summed to produce the W2 exclusions. This is the place where those calcs happen.","title":"aux"},{"location":"fcast/#capgn","text":"This is for the purposes of estimating taxes for the current and prior year until tax statements arrive.","title":"capgn"},{"location":"fcast/#taxes","text":"This computes Federal and State income taxes. It requires the data from the tables tab. For actuals it pulls data mostly from iande-actl. A few income fields need to come from tax documents.","title":"taxes"},{"location":"fcast/#tax-est","text":"This helps figure if estimated taxes are needed or if W4 filings need to be made.","title":"tax-est"},{"location":"fcast/#tables","text":"A table of state tax information, tax tables, Medicare Part B premiums, inflation, required minimum distribution tables, and a general state mangement table.","title":"tables"},{"location":"fcast/#federal-tax-tables","text":"These use the subtraction method in IRS pub detailed here: https://www.irs.gov/pub/irs-pdf/i1040gi.pdf. This takes 6 rows and 4 columns per year. These are organized in a single table. A VBA macro is used to select the right values for use on the taxes tab. The prgram bracket_fix.py computes the numbers for the subtraction table based on a csv file which is shows the values using the additive method. Not sure where I found that file, most recently, I recreated the format. Kind of painful. May be best to wait for the 1040 Instructions to be published each year. (Or find a reliable source)","title":"Federal tax tables"},{"location":"fcast/#state-taxes","text":"This compiles facts about various states for the purpose of considering relocation. Can be referenced in the tax calcs. Source: https://www.kiplinger.com/tool/retirement/T055-S001-state-by-state-guide-to-taxes-on-retirees/index.php","title":"state taxes"},{"location":"fcast/#part-b-premium","text":"Values to select the premium given modified AGI and year.","title":"Part B Premium"},{"location":"fcast/#inflation","text":"3 columns about 75 rows","title":"inflation"},{"location":"fcast/#rmd","text":"Table III is for normal plans. Table I is for beneficiaries (inherited IRA).","title":"RMD"},{"location":"fcast/#state-management","text":"Currently this has only one value, the first forecast year.","title":"State management"},{"location":"fcast/#retirement","text":"Plans out income streams and post-retirement medical expenses. This affects both the balances and the iande tabs. Retirement medical is modeled here. Deductibles and copays are in 'other'. These values are posted as totals in the premium lines of IANDE and are meant to represent all net medical expenses.","title":"retirement"},{"location":"fcast/#retireparms","text":"","title":"retireparms"},{"location":"fcast/#parameters-to-drive-the-retirement-tab","text":"To make the calculations more understandable some are done on this table. For instance, the months column is input data, which is used to offset the birthday of the account owner to yield a start date.","title":"parameters to drive the retirement tab"},{"location":"fcast/#pension-options","text":"Facts about pensions used by retirement sheet.","title":"pension options"},{"location":"fcast/#hsa","text":"A page with a section for each HSA account.","title":"hsa"},{"location":"fcast/#manual_actl","text":"A number of entries are needed to determine taxes. When easiest, these are input on this table: tbl_manual_actl . A Moneydance report W2-exclusions extracts the amounts that can be excluded from the W2s. This relies on the Pre-tax and pre-tax tags. These should be input manually. Computes the actual 401K contributions to post to the iande tab.","title":"manual_actl"},{"location":"fcast/#ira-txbl-distr-line","text":"This is needed to handle the accounting difficulty that arises with IRA distributions when the source account is in Moneydance (see note). The gross amount is taxable and thus needs to be included in the tax calculation. However, the tax amounts go to the state and federal expense lines and the net goes to the receiving bank. There is no place to declare income. The solution is to use a Moneydance tag, IRA-Txbl-Distr on those transactions. This involves editing the transactions that are downloaded from the financial institution to add in the tag. This needs to be done in the Bank Register view not the Register view. The tags field is only shown in the Bank Register view. This data is exported from Moneydance via the IRA-Distr report, saved in the data/IRA-Distr file and imported via the ira-distr.py routine, which places it on the IRA-Txbl-Distr line on the aux table. From there it flows to the iande tab and then to the taxes tab. The value in iande_actl cannot be used since Moneydance itself does not have this total.","title":"IRA-Txbl-Distr - line"},{"location":"fcast/#functions","text":"There are Visual Basic for Applications functions in this worksheet. There are some complex dependencies. Currently, in some cases it is necessary to run calc_retir in order to complete the calculations.","title":"functions"},{"location":"fcast/#tables_1","text":"The get_val routine requires the use of worksheet tables. This allows the tables to have their own column names and for the values to be located. Tables are located on worksheets. So that we don't have to care about that an index of tables is created in the 'utility' worksheet. This itself is a table and it is created by a Python program index-tables.py .","title":"tables"},{"location":"fcast/#conventions","text":"All table names begin with tbl_ . Always use lowercase except for acronyms Use underscores between words Use std abbreviations: actual=actl; balances=bals; investments=invest; retirement=retir; annuity=anny;duration=dur;pension=pens; value or valuation = val;parameters=parms","title":"conventions"},{"location":"fcast/#ranges","text":"The use of named ranges is minimized due to the use of structured tables. The following are the ones remaining of the initial plan. These will changes as needed. HSA_g_actl HSA_g_years infl_data xfer_to_invest xfer_to_non_invest xfer_to_other","title":"ranges"},{"location":"setup/","text":"Setting up the spreadsheet Summary of steps Save certain reports from Moneydance to the data folder. Acquire a registration key for the bureau of labor statistics (for inflation data) Edit the control file: dance/setup/setup.yaml Run dance/setup/create_wb.py Reports The most current Account Balances should be saved as a tab-separated values file. This is used to create the Accounts worksheet. Its name will be referenced in the setup.yaml . The balances are not used, except that when they are zero, the account will be ignored unless it is specifically mentiond in the include_zeros section of the YAML. Another instance of the Account Balances is used to establish the opening balances on the Balances sheet. This may or may not be the same as the other Account Balances file. If an earlier file is used, history can be included in the Balances sheet. API key The system copies the inflation data to faciliatate planning. To do this an API key is needed. This is free they only want an email address. Register here: https://data.bls.gov/registrationEngine/ . The API key should be stored in ./private/api_keys.yml. The rows of this file are expected to be simply a site code and the key value, such as below: bls: 7b50d7a727104578b1ac86bc27caff3f The setup control file The control file is dance/setup/setup.yaml . Global Settings The following values are global in nature: Item Purpose Example start_year Integer of 1st year to use for time series 2018 end_year Last Year of the time series 2030 year_column_width Column size for years 12 first_forecast_year First year that is considered a forecast. Prior years are considered actual 2022 zoom_scale Scaling factor for all sheets 135 # how to scale the worksheets bank_interest Moneydance category used to convey bank interest to the account balances Income:I:Invest income:Int:Bank Sheet groups Sheets are grouped together in sheet groups using the sheet_group definitions. Each sheet is assigned to a group and thus shares the color and table style. Sheets This section defines the layout and sometimes the data to be loaded into the sheet. It is a list of definition of each sheet. So at that level it looks like: sheets: accounts: balances: iande: ... Table Definitions Within each sheet are the list of tables. Most sheets only have one. Here's an example with two: retireparms: sheet_group: retirement tables: - name: tbl_retire_parms - name: tbl_pens_facts By convention all the table names start with tbl_ . The table definition consists of various fields, some of which are optional and/or defaulted. Item Purpose Required? Default title The title that is place above the table in Excel Y include_years True if there is a time series for the years N False columns A list of the column definitions (name and width) that are included before the time seriex Y hidden A list of columns to hide N Show every column data definitions where to get the data for the initial load N Don't load data title_row When there is more than one table, locate this table on the sheet N 2 start_col The first column of the table on the sheet (A=1,B=2...) N 1 Data definitions The data definitions are purpose built to support the target table, but there are some elements that are common. Some data definitions are closely related, so, to prevent duplication, the yaml reference/override notation is used (& and *). Item Purpose Used for source local to reference local files; remote to pull data over internet. remote to pull data over internet. internal is used to create the table/sheet cross reference. type These codes are used by the program select the processing logic to use. md_acct - for accounts, md_bal for balances, md_iande_actl for income and expense sheets local path path relative to project folder for local sources group Specific Moneydance groupings to include Accounts, Balances no_details_for For these groupings create rows only at the grouping level, no details. Investments here means to summarize to the investment level and don't carry over the securities. Accounts include_zeros Accounts listed here will be carried over even if the balance is zero Accounts tax_free_keys Mark the accounts that are not subject to current income tax Accounts site_code BLS, or FEDREG. Used to determine which site to reference remote api_key If needed. A reference to the api_key which is stored in ./private/api_keys.yml remote table Defines how to locate a table in HTML remote table.find_method caption - only supported method remote table.method_parameters parameters for the method, specifically the text to search for in the caption. remote Specific Sheets & Tables Inflation You may want to consider a different series. The default is all items in U.S. city average, all urban consumers, not seasonally adjusted. Required minimum distributions At the time of writing the best source seems to be the Federal Register. This does not need to edited unless the source changes. Accounts The data section in the setup.yaml needs the following sub-sections: Item Description path Path from the project root where to find the saved report`. This should be one with all the accounts you wish to use. group this is a list of the summary levels you wish to use in your plan. The items can either be the categories that Moneydance uses such as Bank Accounts, or it can be summary accounts that you have created (accounts that have sub-accounts) no_details_for If you have summary accounts that cover all the items in a category, then you can use those instead of the leaf accounts. By listing the category hear the detail accounts will be ignored. include_zeros Usually zero balance accounts will be ignored. If the account is entered here, it will be carried forward. This can be useful if its a brand new account with no balance or if its an old account that had a balance in the historical period. tax_free_keys A list of keywords that will be used to determine how the tax status of the account will be initialized. Example: path: ./data/2022 Account Balances.tsv group: - Bank Accounts - Credit Cards - Real Estate - Other Asset - Liabilities - Mortgage Loans - Non Mort Loans no_details_for: - Assets - Loans include_zeros: - My old HSA - My old 401K tax_free_keys: - 401K - \"529\" - IRA","title":"Setting up the spreadsheet"},{"location":"setup/#setting-up-the-spreadsheet","text":"","title":"Setting up the spreadsheet"},{"location":"setup/#summary-of-steps","text":"Save certain reports from Moneydance to the data folder. Acquire a registration key for the bureau of labor statistics (for inflation data) Edit the control file: dance/setup/setup.yaml Run dance/setup/create_wb.py","title":"Summary of steps"},{"location":"setup/#reports","text":"The most current Account Balances should be saved as a tab-separated values file. This is used to create the Accounts worksheet. Its name will be referenced in the setup.yaml . The balances are not used, except that when they are zero, the account will be ignored unless it is specifically mentiond in the include_zeros section of the YAML. Another instance of the Account Balances is used to establish the opening balances on the Balances sheet. This may or may not be the same as the other Account Balances file. If an earlier file is used, history can be included in the Balances sheet.","title":"Reports"},{"location":"setup/#api-key","text":"The system copies the inflation data to faciliatate planning. To do this an API key is needed. This is free they only want an email address. Register here: https://data.bls.gov/registrationEngine/ . The API key should be stored in ./private/api_keys.yml. The rows of this file are expected to be simply a site code and the key value, such as below: bls: 7b50d7a727104578b1ac86bc27caff3f","title":"API key"},{"location":"setup/#the-setup-control-file","text":"The control file is dance/setup/setup.yaml .","title":"The setup control file"},{"location":"setup/#global-settings","text":"The following values are global in nature: Item Purpose Example start_year Integer of 1st year to use for time series 2018 end_year Last Year of the time series 2030 year_column_width Column size for years 12 first_forecast_year First year that is considered a forecast. Prior years are considered actual 2022 zoom_scale Scaling factor for all sheets 135 # how to scale the worksheets bank_interest Moneydance category used to convey bank interest to the account balances Income:I:Invest income:Int:Bank","title":"Global Settings"},{"location":"setup/#sheet-groups","text":"Sheets are grouped together in sheet groups using the sheet_group definitions. Each sheet is assigned to a group and thus shares the color and table style.","title":"Sheet groups"},{"location":"setup/#sheets","text":"This section defines the layout and sometimes the data to be loaded into the sheet. It is a list of definition of each sheet. So at that level it looks like: sheets: accounts: balances: iande: ...","title":"Sheets"},{"location":"setup/#table-definitions","text":"Within each sheet are the list of tables. Most sheets only have one. Here's an example with two: retireparms: sheet_group: retirement tables: - name: tbl_retire_parms - name: tbl_pens_facts By convention all the table names start with tbl_ . The table definition consists of various fields, some of which are optional and/or defaulted. Item Purpose Required? Default title The title that is place above the table in Excel Y include_years True if there is a time series for the years N False columns A list of the column definitions (name and width) that are included before the time seriex Y hidden A list of columns to hide N Show every column data definitions where to get the data for the initial load N Don't load data title_row When there is more than one table, locate this table on the sheet N 2 start_col The first column of the table on the sheet (A=1,B=2...) N 1","title":"Table Definitions"},{"location":"setup/#data-definitions","text":"The data definitions are purpose built to support the target table, but there are some elements that are common. Some data definitions are closely related, so, to prevent duplication, the yaml reference/override notation is used (& and *). Item Purpose Used for source local to reference local files; remote to pull data over internet. remote to pull data over internet. internal is used to create the table/sheet cross reference. type These codes are used by the program select the processing logic to use. md_acct - for accounts, md_bal for balances, md_iande_actl for income and expense sheets local path path relative to project folder for local sources group Specific Moneydance groupings to include Accounts, Balances no_details_for For these groupings create rows only at the grouping level, no details. Investments here means to summarize to the investment level and don't carry over the securities. Accounts include_zeros Accounts listed here will be carried over even if the balance is zero Accounts tax_free_keys Mark the accounts that are not subject to current income tax Accounts site_code BLS, or FEDREG. Used to determine which site to reference remote api_key If needed. A reference to the api_key which is stored in ./private/api_keys.yml remote table Defines how to locate a table in HTML remote table.find_method caption - only supported method remote table.method_parameters parameters for the method, specifically the text to search for in the caption. remote","title":"Data definitions"},{"location":"setup/#specific-sheets-tables","text":"","title":"Specific Sheets &amp; Tables"},{"location":"setup/#inflation","text":"You may want to consider a different series. The default is all items in U.S. city average, all urban consumers, not seasonally adjusted.","title":"Inflation"},{"location":"setup/#required-minimum-distributions","text":"At the time of writing the best source seems to be the Federal Register. This does not need to edited unless the source changes.","title":"Required minimum distributions"},{"location":"setup/#accounts","text":"The data section in the setup.yaml needs the following sub-sections: Item Description path Path from the project root where to find the saved report`. This should be one with all the accounts you wish to use. group this is a list of the summary levels you wish to use in your plan. The items can either be the categories that Moneydance uses such as Bank Accounts, or it can be summary accounts that you have created (accounts that have sub-accounts) no_details_for If you have summary accounts that cover all the items in a category, then you can use those instead of the leaf accounts. By listing the category hear the detail accounts will be ignored. include_zeros Usually zero balance accounts will be ignored. If the account is entered here, it will be carried forward. This can be useful if its a brand new account with no balance or if its an old account that had a balance in the historical period. tax_free_keys A list of keywords that will be used to determine how the tax status of the account will be initialized. Example: path: ./data/2022 Account Balances.tsv group: - Bank Accounts - Credit Cards - Real Estate - Other Asset - Liabilities - Mortgage Loans - Non Mort Loans no_details_for: - Assets - Loans include_zeros: - My old HSA - My old 401K tax_free_keys: - 401K - \"529\" - IRA","title":"Accounts"},{"location":"vba_index/","text":"VBA Code Summary Function or Sub Signature and info acct_who1 Function acct_who1(acct As String, Optional num_chars As Integer = 1) As String Return the first initial of the owner of an account in format type - who - firm add_wdraw Function add_wdraw(acct As String, y_year As String, Optional is_fcst As Boolean = False) As Variant Grab the actual transfers in (positive) our out(negative). Ignoring the optional is_fcst argument - instead: compute it age_as_of_date Function age_as_of_date(inits As String, dt As Date) As Double Return the age attained by an account owner in a given year age_of Function age_of(inits As String, y_year As String) As Integer Return the age attained by an account owner in a given year ANN Function ANN(account As String, account_owner As String, y_year As String) As Double Deprecated - use annuity instead. Return a year's value for an annuity stream based on the prior year's end balance. Does not properly handle partial years annuity Function annuity(account As String, y_year As String) As Double Return a year's value for an annuity stream based on the prior year's end balance. Fetches the start date, duration and annual annuity rate from tbl_retir_vals. Rounds to whole number calc_retir Sub calc_retir() Iterate through the years to calc retirement streams based on balances from prior year. Prior balance from balances feeds current retirement, which feeds aux, which feeds current balances. Iande depends on retirement as well and taxes depend on iande calc_table Sub calc_table() Testing forced calc of table d2s Function d2s(dt As Date) As String endbal Function endbal(acct As String, y_year As String) As Variant Compute the end balance for an account for a year Fed_Tax_CapGn Function Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double Computes the resulting federal tax with capital gains portion at 15%. The input should include qualified dividends Federal_Tax Function Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double Calculate the federal income tax for a given year and taxable income amount. Gets a result of zero if year not in the table. gain Function gain(acct As String, y_year As String, realized As Boolean) As Variant For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast. Other types of accounts return zero.. For investments actuals, use the values from invest_actl. For bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table get_val Function get_val(line_key As Variant, tbl_name As String, col_name As String) As Variant Fetches a value from a given table (it must be an actual worksheet table. If the line is not found in the table, a zero is returned. IntYear Function IntYear(yval) As Integer Strips off the y on the argument (eg y2019) and returns an integer is_forecast Function is_forecast(y_year As String) As Boolean Determine if this year is a forecast year log Sub log(txt As String) LUMP Function LUMP(account As String, y_year As String) As Double Return the expected lump sum payment for an account based on the prior year's end balance + any items in the aux table. For the current year (items that begin with the account name) MedicarePrem Function MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year), return annual part b premium or part d surcharge (irmaa). Normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead.. B_or_d isa 1 for part b premium or 2 for part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly mo_apply Function mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date. The end date is a string since there is a bug in the mac excel.. The end date represents the month of the last period to include. the day is ignored and the last day of the month is used. PartBPrem Function PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part b premium. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly PartDSurcharge Function PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly prior_value Function prior_value(line As String) As Variant Get the prior years' value for this line. suitable only for year columns. retir_med Function retir_med(who1 As String, y_year As String) As Double Return the forecast medical expenses including premium and deductible for person with initial who1 given a year retir_parm Function retir_parm(code As String, who As String) As Variant Get a retirement paramenter given code and code (g or v) RMD_1 Function RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double Return the req minimum distribution table 1 result for a year for a given account, owner (gbd or vec) and year.. If death year is not given then this function treat this as spousal inheritance. If death year is given the treat this as a beneficiary inheritance rolling_avg Function rolling_avg(table As String, key As String, this_y_year As String, lookback As Integer) As Double Look back at previous columns and average the numeric values found there, ignoring non-numerics. Return the average simple_return Function simple_return(account As String, y_year As String) As Double Return the rlzd gain divided by the average of the start and end balances (or zero) sort_tax_table Function sort_tax_table() Make sure the federal tax tables are sorted properly test_fed_tax Sub test_fed_tax() test_get_val Sub test_get_val() test_LUMP Sub test_LUMP() test_medicarePrem Sub test_medicarePrem() test_mo_apply Sub test_mo_apply() test_retir_med Sub test_retir_med() test_sort Sub test_sort() this_col_name Function this_col_name() As String Return the caller's column name, assuming the cell is in a table.. Otherwise generates a #value error. Use to make formulas more portable unrlz Function unrlz(acct As String, y_year As String) As Variant Compute the unrealized gain or loss for an account for a year, assuming end bal is fixed ws_for_table_name Function ws_for_table_name(tbl_name As String) As String Find out what worksheet the named table occurs on y_offset Function y_offset(y_year As String, offset As Integer) As String Given a y_year offset it by the amount given, producing a new y_year","title":"VBA Code Summary"},{"location":"vba_index/#vba-code-summary","text":"Function or Sub Signature and info acct_who1 Function acct_who1(acct As String, Optional num_chars As Integer = 1) As String Return the first initial of the owner of an account in format type - who - firm add_wdraw Function add_wdraw(acct As String, y_year As String, Optional is_fcst As Boolean = False) As Variant Grab the actual transfers in (positive) our out(negative). Ignoring the optional is_fcst argument - instead: compute it age_as_of_date Function age_as_of_date(inits As String, dt As Date) As Double Return the age attained by an account owner in a given year age_of Function age_of(inits As String, y_year As String) As Integer Return the age attained by an account owner in a given year ANN Function ANN(account As String, account_owner As String, y_year As String) As Double Deprecated - use annuity instead. Return a year's value for an annuity stream based on the prior year's end balance. Does not properly handle partial years annuity Function annuity(account As String, y_year As String) As Double Return a year's value for an annuity stream based on the prior year's end balance. Fetches the start date, duration and annual annuity rate from tbl_retir_vals. Rounds to whole number calc_retir Sub calc_retir() Iterate through the years to calc retirement streams based on balances from prior year. Prior balance from balances feeds current retirement, which feeds aux, which feeds current balances. Iande depends on retirement as well and taxes depend on iande calc_table Sub calc_table() Testing forced calc of table d2s Function d2s(dt As Date) As String endbal Function endbal(acct As String, y_year As String) As Variant Compute the end balance for an account for a year Fed_Tax_CapGn Function Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double Computes the resulting federal tax with capital gains portion at 15%. The input should include qualified dividends Federal_Tax Function Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double Calculate the federal income tax for a given year and taxable income amount. Gets a result of zero if year not in the table. gain Function gain(acct As String, y_year As String, realized As Boolean) As Variant For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast. Other types of accounts return zero.. For investments actuals, use the values from invest_actl. For bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table get_val Function get_val(line_key As Variant, tbl_name As String, col_name As String) As Variant Fetches a value from a given table (it must be an actual worksheet table. If the line is not found in the table, a zero is returned. IntYear Function IntYear(yval) As Integer Strips off the y on the argument (eg y2019) and returns an integer is_forecast Function is_forecast(y_year As String) As Boolean Determine if this year is a forecast year log Sub log(txt As String) LUMP Function LUMP(account As String, y_year As String) As Double Return the expected lump sum payment for an account based on the prior year's end balance + any items in the aux table. For the current year (items that begin with the account name) MedicarePrem Function MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year), return annual part b premium or part d surcharge (irmaa). Normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead.. B_or_d isa 1 for part b premium or 2 for part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly mo_apply Function mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date. The end date is a string since there is a bug in the mac excel.. The end date represents the month of the last period to include. the day is ignored and the last day of the month is used. PartBPrem Function PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part b premium. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly PartDSurcharge Function PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly prior_value Function prior_value(line As String) As Variant Get the prior years' value for this line. suitable only for year columns. retir_med Function retir_med(who1 As String, y_year As String) As Double Return the forecast medical expenses including premium and deductible for person with initial who1 given a year retir_parm Function retir_parm(code As String, who As String) As Variant Get a retirement paramenter given code and code (g or v) RMD_1 Function RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double Return the req minimum distribution table 1 result for a year for a given account, owner (gbd or vec) and year.. If death year is not given then this function treat this as spousal inheritance. If death year is given the treat this as a beneficiary inheritance rolling_avg Function rolling_avg(table As String, key As String, this_y_year As String, lookback As Integer) As Double Look back at previous columns and average the numeric values found there, ignoring non-numerics. Return the average simple_return Function simple_return(account As String, y_year As String) As Double Return the rlzd gain divided by the average of the start and end balances (or zero) sort_tax_table Function sort_tax_table() Make sure the federal tax tables are sorted properly test_fed_tax Sub test_fed_tax() test_get_val Sub test_get_val() test_LUMP Sub test_LUMP() test_medicarePrem Sub test_medicarePrem() test_mo_apply Sub test_mo_apply() test_retir_med Sub test_retir_med() test_sort Sub test_sort() this_col_name Function this_col_name() As String Return the caller's column name, assuming the cell is in a table.. Otherwise generates a #value error. Use to make formulas more portable unrlz Function unrlz(acct As String, y_year As String) As Variant Compute the unrealized gain or loss for an account for a year, assuming end bal is fixed ws_for_table_name Function ws_for_table_name(tbl_name As String) As String Find out what worksheet the named table occurs on y_offset Function y_offset(y_year As String, offset As Integer) As String Given a y_year offset it by the amount given, producing a new y_year","title":"VBA Code Summary"},{"location":"vba_sorted/","text":"VBA Code Attribute VB_Name = \"Module1\" Public Const dbg As Boolean = True Option Base 0 Function acct_who1(acct As String, Optional num_chars As Integer = 1) As String 'return the first initial of the owner of an account in format type - who - firm Dim parts() As String parts = Split(acct, \" - \") who = parts(1) acct_who1 = Left(who, num_chars) End Function Function add_wdraw(acct As String, y_year As String, Optional is_fcst As Boolean = False) As Variant 'grab the actual transfers in (positive) our out(negative) 'ignoring the optional is_fcst argument - instead: compute it Dim line As String, tbl As String, prefix As String is_fcst = is_forecast(y_year) prefix = \"Actl\" If is_fcst Then prefix = \"Fcst\" add_wdraw = 0 acct_type = get_val(acct, \"tbl_accounts\", \"Type\") tbl = get_val(acct, \"tbl_accounts\", prefix & \"_source_tab\") line = get_val(acct, \"tbl_accounts\", prefix & \"_source\") If (\"I\" = acct_type) And Not is_fcst Then line = \"add/wdraw\" & line ' complete key for investment actuals If line <> \"zero\" Then ' keyword to enable forecasting of zeros value = get_val(line, tbl, y_year) add_wdraw = value End If End Function Function age_as_of_date(inits As String, dt As Date) As Double 'return the age attained by an account owner in a given year Dim dob As Date, eoy As Date Dim diff As Double, age As Double dob = get_val(inits, \"tbl_people\", \"DOB\") diff = (dt - dob) / 365.25 age = Application.WorksheetFunction.Round(diff, 3) age_as_of_date = age End Function Function age_of(inits As String, y_year As String) As Integer 'return the age attained by an account owner in a given year Dim dob As Date, eoy As Date Dim diff As Double, age As Integer dob = get_val(inits, \"tbl_people\", \"DOB\") eoy = DateSerial(IntYear(y_year), 12, 31) diff = (eoy - dob) / 365.25 age = Int(Application.WorksheetFunction.RoundDown(diff, 0)) age_of = age End Function Function ANN(account As String, account_owner As String, y_year As String) As Double 'DEPRECATED - USE annuity instead 'return a year's value for an annuity stream based on the prior year's end balance 'does not properly handle partial years Dim this_year As Integer, age As Integer Dim prior_end_bal As Double, term As Double, result As Double, anny_rate As Double, anny_dur As Double Dim anny_start As Date, o1 As String, n As Integer Dim dur_parm As String this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) age = age_of(account_owner, y_year) - 1 o1 = Left(account_owner, 1) anny_rate = get_val(\"anny_rate\", \"tbl_retir_parms\", o1) dur_parm = \"anny_dur\" ' hack picks different duration for roth If InStr(account, \"Roth\") > 0 Then dur_parm = \"roth_dur\" anny_dur = get_val(dur_parm, \"tbl_retir_parms\", o1) anny_start = get_val(\"anny_start\", \"tbl_retir_parms\", o1) n = anny_dur - (this_year - year(anny_start)) result = 0 If n > 0 Then result = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal) End If ANN = result End Function Function annuity(account As String, y_year As String) As Double 'return a year's value for an annuity stream based on the prior year's end balance 'fetches the start date, duration and annual annuity rate from tbl_retir_vals 'rounds to whole number Dim anny_start As Date Dim duration As Integer, this_year As Integer Dim annual_rate As Double, anny_rate As Double this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) anny_start = get_val(account, \"tbl_retir_vals\", \"Start Date\") duration = get_val(account, \"tbl_retir_vals\", \"Anny Dur Yrs\") anny_rate = get_val(account, \"tbl_retir_vals\", \"Anny Rate\") n = duration - (this_year - year(anny_start)) result = 0 If n > 0 Then result = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal) factor = mo_apply(anny_start, y_year) ' TODO put end date on this call result = factor * result result = Application.WorksheetFunction.Round(result, 0) End If annuity = result End Function Sub calc_retir() 'iterate through the years to calc retirement streams based on balances from prior year 'prior balance from balances feeds current retirement, which feeds aux, which feeds current balances 'iande depends on retirement as well and taxes depend on iande Dim rcols As range, rcell As range Dim tbls(4) As ListObject Dim tbl_names(4) As String Dim ws_names(4) As String Dim msg As String log (\"-----------------------------\") log (\"Entering manual calculation mode.\") Application.Calculation = xlCalculationManual tbl_names(0) = \"tbl_retir_vals\" tbl_names(1) = \"tbl_aux\" tbl_names(2) = \"tbl_balances\" tbl_names(3) = \"tbl_iande\" tbl_names(4) = \"tbl_taxes\" msg = \"\" For i = LBound(tbl_names) To UBound(tbl_names) ws_names(i) = ws_for_table_name(tbl_names(i)) Set tbls(i) = ThisWorkbook.Worksheets(ws_names(i)).ListObjects(tbl_names(i)) If Len(msg) > 0 Then msg = msg & \",\" If i = UBound(tbl_names) Then msg = msg & \" and \" msg = msg & ws_names(i) Next i Set rcols = tbls(0).HeaderRowRange Set col = tbls(0).ListColumns(\"Start_Date\") col.range.Dirty col.range.Calculate Set col = tbls(0).ListColumns(\"yearly\") col.range.Dirty col.range.Calculate log (\"Retirement Start_date and yearly columns refreshed.\") For Each rcell In rcols If InStr(rcell.value, \"Y20\") = 1 Then For i = LBound(tbls) To UBound(tbls) Set col = tbls(i).ListColumns(rcell.value) col.range.Dirty col.range.Calculate Next i log (\"Calculated \" & msg & \" for \" & rcell.value) End If Next rcell log (\"Entering automatic calculation mode.\") log (\"-----------------------------\") Application.Calculation = xlCalculationAutomatic End Sub Sub calc_table() 'Testing forced calc of table Dim rcols As range, rcell As range Dim tbl As ListObject Dim tbl_name As String Dim ws_name As String Dim msg As String log (\"-----------------------------\") log (\"Entering manual calculation mode.\") Application.Calculation = xlCalculationManual tbl_name = \"tbl_balances\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) tbl.range.Dirty tbl.range.Calculate log (tbl_name & \" refreshed.\") log (\"Entering automatic calculation mode.\") log (\"-----------------------------\") Application.Calculation = xlCalculationAutomatic End Sub Function d2s(dt As Date) As String d2s = Format(dt, \"mm/dd/yyyy\") End Function Function endbal(acct As String, y_year As String) As Variant 'compute the end balance for an account for a year Dim rate As Variant Dim val As Variant open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) adds = get_val(\"Add/Wdraw\" & acct, \"tbl_balances\", y_year) rlzd = get_val(\"Rlz Int/Gn\" & acct, \"tbl_balances\", y_year) unrlzd = get_val(\"Unrlz Gn/Ls\" & acct, \"tbl_balances\", y_year) val = open_bal + adds + rlzd + unrlzd endbal = val End Function Function Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double 'computes the resulting federal tax with capital gains portion at 15% 'the input should include qualified dividends Dim base As Double, result As Double, cgt As Double base = Federal_Tax(tax_Year, taxable_Income - totCapGn) cgt = 0.15 * totCapGn result = base + cgt Fed_Tax_CapGn = result End Function Function Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double 'Calculate the federal income tax for a given year and taxable income amount 'gets a result of zero if year not in the table. Dim result As Double Dim tbl_name As String Dim tbl As ListObject Dim lr As ListRow Dim rng As range Dim yr As Integer Dim ti As Double Dim rt As Double Dim sb As Double tbl_name = \"tbl_fed_tax\" ws = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) result = 0 For Each lr In tbl.ListRows() Set rng = lr.range yr = rng.Cells(1, 1).value ti = rng.Cells(1, 2).value rt = rng.Cells(1, 3).value sb = rng.Cells(1, 4).value If tax_Year = yr Then If taxable_Income > ti Then result = (rt * taxable_Income) - sb result = Round(result, 0) End If End If Next lr Federal_Tax = result End Function Function gain(acct As String, y_year As String, realized As Boolean) As Variant 'For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast 'Other types of accounts return zero. ' for investments actuals, use the values from invest_actl ' for bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table Dim rate As Variant Dim val As Variant Dim col_name As String Dim interest_row As String gain = 0 ' return zero if not investment or bank account account_type = get_val(acct, \"tbl_accounts\", \"Type\") If Not ((account_type = \"I\") Or (account_type = \"B\")) Then Exit Function End If If realized Then col_name = \"Rlz share\" prefix = \"Rlz Int/Gn\" Else col_name = \"Unrlz share\" prefix = \"Unrlz Gn/Ls\" End If is_fcst = is_forecast(y_year) If is_fcst Then open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) rate = get_val(\"Rate\" & acct, \"tbl_balances\", y_year) alloc = get_val(acct, \"tbl_accounts\", col_name) val = open_bal * rate * alloc Else ' actuals If account_type = \"I\" Then val = get_val(prefix & acct, \"tbl_invest_actl\", y_year) Else 'banks If realized Then interest_row = get_val(\"bank_interest\", \"tbl_gen_state\", \"value\") val = get_val(interest_row, \"tbl_iande\", y_year) Else ' banks never have unrealized val = 0 End If End If End If gain = val End Function Function get_val(line_key As Variant, tbl_name As String, col_name As String) As Variant 'Fetches a value from a given table (it must be an actual worksheet table 'If the line is not found in the table, a zero is returned. Dim value As Variant, rng As Variant Dim caller As range Dim address As String Set caller = Application.caller() address = caller.Worksheet.Name & \"!\" & caller(1, 1).address ws = ws_for_table_name(tbl_name) 'now get the data With ThisWorkbook.Worksheets(ws) Set rng = .ListObjects(tbl_name).HeaderRowRange Dim cr As range On Error GoTo ErrHandler1 col = Application.WorksheetFunction.Match(col_name, rng, False) Set rng = .ListObjects(tbl_name).DataBodyRange On Error GoTo ErrHandler value = Application.WorksheetFunction.VLookup(line_key, rng, col, False) If IsEmpty(value) Then value = 0 End If End With get_val = value Exit Function ErrHandler: log (\"[\" & address & \" ] get_val: \" & line_key & \" not found in \" & tbl_name & \", using zero as value for \" & col_name) Dim lkrange As range If False Then 'use this to debug missing lines. e.g. tbl_name = \"tbl_taxes\" Then Set lkrange = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name).ListColumns(1).DataBodyRange Debug.Print (lkrange.Count) For Each c In lkrange.Cells log (c.value) Next End If get_val = 0 Exit Function ErrHandler1: log (\"[ \" & address & \" ] get_val: \" & Err.Number & \" \" & Err.Description) log (\"Trying to locate column: \" & col_name & \" in table \" & tbl_name) log (\"line is \" & line_key) End Function Function IntYear(yval) As Integer 'strips off the Y on the argument (eg Y2019) and returns an integer y = 0 + Right(yval, 4) IntYear = y End Function Function is_forecast(y_year As String) As Boolean 'determine if this year is a forecast year ffys = get_val(\"first_forecast\", \"tbl_gen_state\", \"Value\") ffy = IntYear(ffys) ty = IntYear(y_year) r = ty >= ffy is_forecast = r End Function Sub log(txt As String) If dbg Then Debug.Print (Format(Now, \"mm/dd/yyyy HH:mm:ss: \") & txt) End If End Sub Function LUMP(account As String, y_year As String) As Double 'return the expected lump sum payment for an account based on the prior year's end balance + any items in the aux table 'for the current year (items that begin with the account name) Dim this_year As Integer, tbl_name As String Dim prior_end_bal As Double, adj As Double, result As Double Dim tbl As ListObject, crit_col As ListColumn, val_col As ListColumn this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) criteria = account tbl_name = \"tbl_aux\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set crit_col = tbl.ListColumns(\"Accum_by\") Set val_col = tbl.ListColumns(y_year) adj = Application.WorksheetFunction.SumIf(crit_col.range, criteria, val_col.range) result = adj + prior_end_bal LUMP = result End Function Function MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year), return annual part b premium or part D surcharge (IRMAA) 'normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead. 'b_or_d isa 1 for part B premium or 2 for Part D surcharge 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly Dim yr As Integer Dim tbl_name As String, ws_name As String, magi_yr As String Dim tbl As ListObject Dim lr As ListRow, rng As range Dim infl As Variant yr = IntYear(year) If magi = -1 Then magi_yr = y_offset(year, -2) magi = get_val(\"Adjusted Gross\", \"tbl_taxes\", magi_yr) End If magi = Application.WorksheetFunction.Max(1, magi) tbl_name = \"tbl_part_b\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set yr_col = tbl.ListColumns(\"year\") y = Application.WorksheetFunction.VLookup(yr, yr_col.range, 1, True) ' latest year for which we have data MedicarePrem = 0 'in case the if never succeeds For Each lr In tbl.ListRows() Set rng = lr.range ry = rng.Cells(1, 1).value rl = rng.Cells(1, 2).value rh = rng.Cells(1, 3).value valu = rng.Cells(1, 3 + b_or_d).value pw = (yr - y) If (ry = y And rl < magi And rh >= magi) Then p = valu * 12 infl = CDbl(Application.WorksheetFunction.Power(inflation, pw)) MedicarePrem = p * infl Exit For End If Next End Function Function mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double 'Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date 'The end date is a string since there is a bug in the Mac Excel. 'The end date represents the month of the last period to include. The day is ignored and the last day of the month is used. Dim result As Double, distance As Double, sign As Integer, months As Integer Dim ed As Date, sd As Date If end_mdy = \"\" Then ed = DateSerial(3000, 12, 31) 'the default since the literal is not working on MacExcel Else mdy = Split(end_mdy, \"/\") ed = DateSerial(mdy(2), mdy(0) + 1, 1) - 1 End If ed = Application.WorksheetFunction.Min(ed, DateSerial(IntYear(y_year), 12, 31)) sd = Application.WorksheetFunction.Max(start_date, DateSerial(IntYear(y_year), 1, 1)) distance = (ed - sd) / (365.25 / 12) months = Round(distance, 0) months = Application.WorksheetFunction.Min(12, months) months = Application.WorksheetFunction.Max(0, months) result = months / 12 mo_apply = result End Function Function PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part b premium 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly PartBPrem = MedicarePrem(1, year, inflation, magi) End Function Function PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part D surcharge 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly PartDSurcharge = MedicarePrem(2, year, inflation, magi) End Function Function prior_value(line As String) As Variant ' Get the prior years' value for this line. Suitable only for year columns. Dim prior_col As String Dim value As Variant Dim table As String Dim range As range Set range = Application.caller table = range.ListObject.Name prior_col = y_offset(this_col_name(), -1) value = get_val(line, table, prior_col) prior_value = value End Function Function retir_med(who1 As String, y_year As String) As Double 'return the forecast medical expenses including premium and deductible for person with initial who1 given a year Dim this_year As Integer, tbl_name As String Dim med_exp As Double, result As Double Dim tbl As ListObject, crit_col1 As ListColumn, crit_col2 As ListColumn, val_col As ListColumn Dim criteria1 As String, criteria2 As String criteria1 = \"MEDIC*\" criteria2 = who1 tbl_name = \"tbl_retir_vals\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set crit_col1 = tbl.ListColumns(\"Item\") Set crit_col2 = tbl.ListColumns(\"Who1\") Set val_col = tbl.ListColumns(y_year) med_exp = Application.WorksheetFunction.SumIfs(val_col.range, crit_col1.range, criteria1, crit_col2.range, criteria2) retir_med = med_exp End Function Function retir_parm(code As String, who As String) As Variant 'Get a retirement paramenter given code and code (G or V) Dim rng As range On Error GoTo ErrHandler sht = \"retireparms\" cl = InStr(1, \"abGV\", who, vbTextCompare) With ThisWorkbook.Worksheets(sht) Set rng = .range(\"Table3[code]\") rw = Application.WorksheetFunction.Match(code, rng, False) rw = rw + rng.row - 1 s = sht & \"!\" & .Cells(rw, cl).address v = .range(s) retir_parm = v End With Exit Function ErrHandler: log (\"retir_parm: \" & Err.Description & \" (\" & Err.Number & \")\") log (\"Looking for: \" & code & \" who:\" & who) End Function Function RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double 'return the req minimum distribution table 1 result for a year for a given account, owner (GBD or VEC) and year. 'if death year is not given then this function treat this as spousal inheritance 'if death year is given the treat this as a beneficiary inheritance Dim this_year As Integer, age As Integer Dim prior_end_bal As Double, life_expectancy As Double, result As Double this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) If death_year = 0 Then ' for spousal use actual age this year age = age_of(account_owner, y_year) life_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\") Else ' work with the age at year after death for beneficiary type age = age_of(account_owner, \"Y\" & (death_year + 1)) life_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\") life_expectancy = life_expectancy - (this_year - (death_year + 1)) 'factor is reduced by one for each succeeding distribution year. End If result = prior_end_bal / life_expectancy RMD_1 = result End Function Function rolling_avg(table As String, key As String, this_y_year As String, lookback As Integer) As Double 'Look back at previous columns and average the numeric values found there, ignoring non-numerics 'Return the average Dim y_year As String this_year = IntYear(this_y_year) tot = 0 cnt = 0 For y = this_year - lookback To this_year - 1 y_year = \"Y\" & y value = get_val(key, table, y_year) If Not value = 0 Then tot = tot + value cnt = cnt + 1 End If Next y If cnt <> 0 Then rolling_avg = tot / cnt Else rolling_avg = 0 End If End Function Function simple_return(account As String, y_year As String) As Double 'return the rlzd gain divided by the average of the start and end balances (or zero) sb = get_val(\"Start Bal\" & account, \"tbl_balances\", y_year) eb = get_val(\"End Bal\" & account, \"tbl_balances\", y_year) rg = get_val(\"Rlz Int/Gn\" & account, \"tbl_balances\", y_year) urg = get_val(\"Unrlz Gn/Ls\" & account, \"tbl_balances\", y_year) av = (sb + eb) / 2 If av = 0 Then result = 0 Else result = (rg + urg) / av End If simple_return = result End Function Function sort_tax_table() 'make sure the federal tax tables are sorted properly Dim tbl_name As String tbl_name = \"tbl_fed_tax\" ws = ws_for_table_name(tbl_name) Dim tbl As ListObject Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) Dim year_column As range, range_column As range Set year_column = range(tbl_name & \"[Year]\") Set range_column = range(tbl_name & \"[Range]\") With tbl.sort .SortFields.Clear .SortFields.Add key:=year_column, SortOn:=xlSortOnValues, Order:=xlAscending .SortFields.Add key:=range_column, SortOn:=xlSortOnValues, Order:=xlAscending .Header = xlYes .Apply End With End Function Sub test_fed_tax() Dim r As Double, c As Double zt = \"not passed\" r = Federal_Tax(2150, 9999) If 0 = r Then zt = \"passed\" n = 74031 pt = \"not passed\" r = Federal_Tax(2020, 350000) If r = n Then pt = \"passed\" n = 72331 ct = \"not passed\" c = Fed_Tax_CapGn(2020, 350000, 10000) If c = n Then ct = \"passed\" Debug.Print (\"Zero test: \" & zt) Debug.Print (\"Positive test:\" & pt) Debug.Print (\"Capital gains test:\" & ct) End Sub Sub test_get_val() Dim tbl_name As String Dim line_name As String Dim y_year As String Debug.Print (get_val(\"Expenses:T:Soc Sec - TOTAL\", \"tbl_iande_actl\", \"Y2018\")) Debug.Print (get_val(\"End BalMortgage - Nationstar\", \"tbl_balances\", \"Y2019\")) End Sub Sub test_LUMP() Dim val As Double val = LUMP(\"401K - GBD - TRV\", \"Y2022\") Debug.Print (val) End Sub Sub test_medicarePrem() Dim test_cases() As Variant Dim yr As String Dim infl As Variant Dim magi As Variant test_cases() = Array(Array(2021, 1#, 10000), Array(2022, 1#, 182001), Array(2022, 1#, 400000), Array(2023, 1.02, 75000)) log (\"Part B tests\") For i = LBound(test_cases) To UBound(test_cases) yr = \"Y\" & test_cases(i)(0) magi = test_cases(i)(2) infl = test_cases(i)(1) partB = PartBPrem(yr, infl, magi) partD = PartDSurcharge(yr, infl, magi) msg = \"Input: year=\" & test_cases(i)(0) & \" magi=\" & magi & \" inflation=\" & infl & \" Output: \" & partB & \" Part D: \" & partD log (msg) Next End Sub Sub test_mo_apply() Dim test_cases() As Variant Dim test_case As Variant Dim yr As String Dim start_date As Date, end_date As String, result As Double test_cases() = Array( _ Array(3, 2022, 2022), _ Array(12, 2025, 2025), _ Array(3, 2022, 2022, 11, 2022), _ Array(3, 2022, 2025, 9, 2025), _ Array(3, 2022, 2022, 8, 2022) _ ) log (\"mo_apply tests\") For i = LBound(test_cases) To UBound(test_cases) test_case = test_cases(i) start_date = DateSerial(test_case(1), test_case(0), 1) yr = \"Y\" & test_case(2) end_date = \"-none-\" If UBound(test_case) > 2 Then end_date = test_case(3) & \"/1/\" & test_case(4) result = mo_apply(start_date, yr, end_date) Else result = mo_apply(start_date, yr) End If msg = \"Input: year=\" & yr & \" start/end dates = \" & start_date & \" \" & end_date & \" Output: \" & result log (msg) Next i End Sub Sub test_retir_med() Dim test_cases() As Variant Dim yr As String, who As String, result As Double test_cases() = Array(Array(\"G\", \"Y2022\"), Array(\"V\", \"Y2026\")) log (\"retir_med tests\") For i = LBound(test_cases) To UBound(test_cases) who = test_cases(i)(0) yr = test_cases(i)(1) result = retir_med(who, yr) msg = \"Input: year=\" & yr & \" who=\" & who & \" Output: \" & result log (msg) Next End Sub Sub test_sort() sort_tax_table End Sub Function this_col_name() As String 'return the caller's column name, assuming the cell is in a table. 'Otherwise generates a #VALUE error 'Use to make formulas more portable Dim point As range Dim list_ojb As ListObject Dim cols As ListColumns Dim offset As Integer, col_ix As Integer Set point = Application.caller Set list_obj = point.ListObject Set cols = list_obj.ListColumns offset = list_obj.range(1, 1).Column - 1 col_ix = offset + point.Column this_col_name = cols(col_ix) End Function Function unrlz(acct As String, y_year As String) As Variant 'compute the unrealized gain or loss for an account for a year, assuming end bal is fixed Dim open_bal As Variant, adds As Variant, rlzd As Variant, end_bal As Variant Dim val As Variant open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) adds = get_val(\"Add/Wdraw\" & acct, \"tbl_balances\", y_year) rlzd = get_val(\"Rlz Int/Gn\" & acct, \"tbl_balances\", y_year) end_bal = get_val(\"End bal\" & acct, \"tbl_balances\", y_year) val = end_bal - (open_bal + adds + rlzd) unrlz = val End Function Function ws_for_table_name(tbl_name As String) As String ' find out what worksheet the named table occurs on With ThisWorkbook.Worksheets(\"utility\") Set rng = .ListObjects(\"tbl_table_map\").DataBodyRange ws = Application.WorksheetFunction.VLookup(tbl_name, rng, 2, False) End With ws_for_table_name = ws End Function Function y_offset(y_year As String, offset As Integer) As String 'given a y_year offset it by the amount given, producing a new y_year y = IntYear(y_year) r = \"Y\" & y + offset y_offset = r End Function","title":"VBA Code"},{"location":"vba_sorted/#vba-code","text":"Attribute VB_Name = \"Module1\" Public Const dbg As Boolean = True Option Base 0 Function acct_who1(acct As String, Optional num_chars As Integer = 1) As String 'return the first initial of the owner of an account in format type - who - firm Dim parts() As String parts = Split(acct, \" - \") who = parts(1) acct_who1 = Left(who, num_chars) End Function Function add_wdraw(acct As String, y_year As String, Optional is_fcst As Boolean = False) As Variant 'grab the actual transfers in (positive) our out(negative) 'ignoring the optional is_fcst argument - instead: compute it Dim line As String, tbl As String, prefix As String is_fcst = is_forecast(y_year) prefix = \"Actl\" If is_fcst Then prefix = \"Fcst\" add_wdraw = 0 acct_type = get_val(acct, \"tbl_accounts\", \"Type\") tbl = get_val(acct, \"tbl_accounts\", prefix & \"_source_tab\") line = get_val(acct, \"tbl_accounts\", prefix & \"_source\") If (\"I\" = acct_type) And Not is_fcst Then line = \"add/wdraw\" & line ' complete key for investment actuals If line <> \"zero\" Then ' keyword to enable forecasting of zeros value = get_val(line, tbl, y_year) add_wdraw = value End If End Function Function age_as_of_date(inits As String, dt As Date) As Double 'return the age attained by an account owner in a given year Dim dob As Date, eoy As Date Dim diff As Double, age As Double dob = get_val(inits, \"tbl_people\", \"DOB\") diff = (dt - dob) / 365.25 age = Application.WorksheetFunction.Round(diff, 3) age_as_of_date = age End Function Function age_of(inits As String, y_year As String) As Integer 'return the age attained by an account owner in a given year Dim dob As Date, eoy As Date Dim diff As Double, age As Integer dob = get_val(inits, \"tbl_people\", \"DOB\") eoy = DateSerial(IntYear(y_year), 12, 31) diff = (eoy - dob) / 365.25 age = Int(Application.WorksheetFunction.RoundDown(diff, 0)) age_of = age End Function Function ANN(account As String, account_owner As String, y_year As String) As Double 'DEPRECATED - USE annuity instead 'return a year's value for an annuity stream based on the prior year's end balance 'does not properly handle partial years Dim this_year As Integer, age As Integer Dim prior_end_bal As Double, term As Double, result As Double, anny_rate As Double, anny_dur As Double Dim anny_start As Date, o1 As String, n As Integer Dim dur_parm As String this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) age = age_of(account_owner, y_year) - 1 o1 = Left(account_owner, 1) anny_rate = get_val(\"anny_rate\", \"tbl_retir_parms\", o1) dur_parm = \"anny_dur\" ' hack picks different duration for roth If InStr(account, \"Roth\") > 0 Then dur_parm = \"roth_dur\" anny_dur = get_val(dur_parm, \"tbl_retir_parms\", o1) anny_start = get_val(\"anny_start\", \"tbl_retir_parms\", o1) n = anny_dur - (this_year - year(anny_start)) result = 0 If n > 0 Then result = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal) End If ANN = result End Function Function annuity(account As String, y_year As String) As Double 'return a year's value for an annuity stream based on the prior year's end balance 'fetches the start date, duration and annual annuity rate from tbl_retir_vals 'rounds to whole number Dim anny_start As Date Dim duration As Integer, this_year As Integer Dim annual_rate As Double, anny_rate As Double this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) anny_start = get_val(account, \"tbl_retir_vals\", \"Start Date\") duration = get_val(account, \"tbl_retir_vals\", \"Anny Dur Yrs\") anny_rate = get_val(account, \"tbl_retir_vals\", \"Anny Rate\") n = duration - (this_year - year(anny_start)) result = 0 If n > 0 Then result = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal) factor = mo_apply(anny_start, y_year) ' TODO put end date on this call result = factor * result result = Application.WorksheetFunction.Round(result, 0) End If annuity = result End Function Sub calc_retir() 'iterate through the years to calc retirement streams based on balances from prior year 'prior balance from balances feeds current retirement, which feeds aux, which feeds current balances 'iande depends on retirement as well and taxes depend on iande Dim rcols As range, rcell As range Dim tbls(4) As ListObject Dim tbl_names(4) As String Dim ws_names(4) As String Dim msg As String log (\"-----------------------------\") log (\"Entering manual calculation mode.\") Application.Calculation = xlCalculationManual tbl_names(0) = \"tbl_retir_vals\" tbl_names(1) = \"tbl_aux\" tbl_names(2) = \"tbl_balances\" tbl_names(3) = \"tbl_iande\" tbl_names(4) = \"tbl_taxes\" msg = \"\" For i = LBound(tbl_names) To UBound(tbl_names) ws_names(i) = ws_for_table_name(tbl_names(i)) Set tbls(i) = ThisWorkbook.Worksheets(ws_names(i)).ListObjects(tbl_names(i)) If Len(msg) > 0 Then msg = msg & \",\" If i = UBound(tbl_names) Then msg = msg & \" and \" msg = msg & ws_names(i) Next i Set rcols = tbls(0).HeaderRowRange Set col = tbls(0).ListColumns(\"Start_Date\") col.range.Dirty col.range.Calculate Set col = tbls(0).ListColumns(\"yearly\") col.range.Dirty col.range.Calculate log (\"Retirement Start_date and yearly columns refreshed.\") For Each rcell In rcols If InStr(rcell.value, \"Y20\") = 1 Then For i = LBound(tbls) To UBound(tbls) Set col = tbls(i).ListColumns(rcell.value) col.range.Dirty col.range.Calculate Next i log (\"Calculated \" & msg & \" for \" & rcell.value) End If Next rcell log (\"Entering automatic calculation mode.\") log (\"-----------------------------\") Application.Calculation = xlCalculationAutomatic End Sub Sub calc_table() 'Testing forced calc of table Dim rcols As range, rcell As range Dim tbl As ListObject Dim tbl_name As String Dim ws_name As String Dim msg As String log (\"-----------------------------\") log (\"Entering manual calculation mode.\") Application.Calculation = xlCalculationManual tbl_name = \"tbl_balances\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) tbl.range.Dirty tbl.range.Calculate log (tbl_name & \" refreshed.\") log (\"Entering automatic calculation mode.\") log (\"-----------------------------\") Application.Calculation = xlCalculationAutomatic End Sub Function d2s(dt As Date) As String d2s = Format(dt, \"mm/dd/yyyy\") End Function Function endbal(acct As String, y_year As String) As Variant 'compute the end balance for an account for a year Dim rate As Variant Dim val As Variant open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) adds = get_val(\"Add/Wdraw\" & acct, \"tbl_balances\", y_year) rlzd = get_val(\"Rlz Int/Gn\" & acct, \"tbl_balances\", y_year) unrlzd = get_val(\"Unrlz Gn/Ls\" & acct, \"tbl_balances\", y_year) val = open_bal + adds + rlzd + unrlzd endbal = val End Function Function Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double 'computes the resulting federal tax with capital gains portion at 15% 'the input should include qualified dividends Dim base As Double, result As Double, cgt As Double base = Federal_Tax(tax_Year, taxable_Income - totCapGn) cgt = 0.15 * totCapGn result = base + cgt Fed_Tax_CapGn = result End Function Function Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double 'Calculate the federal income tax for a given year and taxable income amount 'gets a result of zero if year not in the table. Dim result As Double Dim tbl_name As String Dim tbl As ListObject Dim lr As ListRow Dim rng As range Dim yr As Integer Dim ti As Double Dim rt As Double Dim sb As Double tbl_name = \"tbl_fed_tax\" ws = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) result = 0 For Each lr In tbl.ListRows() Set rng = lr.range yr = rng.Cells(1, 1).value ti = rng.Cells(1, 2).value rt = rng.Cells(1, 3).value sb = rng.Cells(1, 4).value If tax_Year = yr Then If taxable_Income > ti Then result = (rt * taxable_Income) - sb result = Round(result, 0) End If End If Next lr Federal_Tax = result End Function Function gain(acct As String, y_year As String, realized As Boolean) As Variant 'For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast 'Other types of accounts return zero. ' for investments actuals, use the values from invest_actl ' for bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table Dim rate As Variant Dim val As Variant Dim col_name As String Dim interest_row As String gain = 0 ' return zero if not investment or bank account account_type = get_val(acct, \"tbl_accounts\", \"Type\") If Not ((account_type = \"I\") Or (account_type = \"B\")) Then Exit Function End If If realized Then col_name = \"Rlz share\" prefix = \"Rlz Int/Gn\" Else col_name = \"Unrlz share\" prefix = \"Unrlz Gn/Ls\" End If is_fcst = is_forecast(y_year) If is_fcst Then open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) rate = get_val(\"Rate\" & acct, \"tbl_balances\", y_year) alloc = get_val(acct, \"tbl_accounts\", col_name) val = open_bal * rate * alloc Else ' actuals If account_type = \"I\" Then val = get_val(prefix & acct, \"tbl_invest_actl\", y_year) Else 'banks If realized Then interest_row = get_val(\"bank_interest\", \"tbl_gen_state\", \"value\") val = get_val(interest_row, \"tbl_iande\", y_year) Else ' banks never have unrealized val = 0 End If End If End If gain = val End Function Function get_val(line_key As Variant, tbl_name As String, col_name As String) As Variant 'Fetches a value from a given table (it must be an actual worksheet table 'If the line is not found in the table, a zero is returned. Dim value As Variant, rng As Variant Dim caller As range Dim address As String Set caller = Application.caller() address = caller.Worksheet.Name & \"!\" & caller(1, 1).address ws = ws_for_table_name(tbl_name) 'now get the data With ThisWorkbook.Worksheets(ws) Set rng = .ListObjects(tbl_name).HeaderRowRange Dim cr As range On Error GoTo ErrHandler1 col = Application.WorksheetFunction.Match(col_name, rng, False) Set rng = .ListObjects(tbl_name).DataBodyRange On Error GoTo ErrHandler value = Application.WorksheetFunction.VLookup(line_key, rng, col, False) If IsEmpty(value) Then value = 0 End If End With get_val = value Exit Function ErrHandler: log (\"[\" & address & \" ] get_val: \" & line_key & \" not found in \" & tbl_name & \", using zero as value for \" & col_name) Dim lkrange As range If False Then 'use this to debug missing lines. e.g. tbl_name = \"tbl_taxes\" Then Set lkrange = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name).ListColumns(1).DataBodyRange Debug.Print (lkrange.Count) For Each c In lkrange.Cells log (c.value) Next End If get_val = 0 Exit Function ErrHandler1: log (\"[ \" & address & \" ] get_val: \" & Err.Number & \" \" & Err.Description) log (\"Trying to locate column: \" & col_name & \" in table \" & tbl_name) log (\"line is \" & line_key) End Function Function IntYear(yval) As Integer 'strips off the Y on the argument (eg Y2019) and returns an integer y = 0 + Right(yval, 4) IntYear = y End Function Function is_forecast(y_year As String) As Boolean 'determine if this year is a forecast year ffys = get_val(\"first_forecast\", \"tbl_gen_state\", \"Value\") ffy = IntYear(ffys) ty = IntYear(y_year) r = ty >= ffy is_forecast = r End Function Sub log(txt As String) If dbg Then Debug.Print (Format(Now, \"mm/dd/yyyy HH:mm:ss: \") & txt) End If End Sub Function LUMP(account As String, y_year As String) As Double 'return the expected lump sum payment for an account based on the prior year's end balance + any items in the aux table 'for the current year (items that begin with the account name) Dim this_year As Integer, tbl_name As String Dim prior_end_bal As Double, adj As Double, result As Double Dim tbl As ListObject, crit_col As ListColumn, val_col As ListColumn this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) criteria = account tbl_name = \"tbl_aux\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set crit_col = tbl.ListColumns(\"Accum_by\") Set val_col = tbl.ListColumns(y_year) adj = Application.WorksheetFunction.SumIf(crit_col.range, criteria, val_col.range) result = adj + prior_end_bal LUMP = result End Function Function MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year), return annual part b premium or part D surcharge (IRMAA) 'normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead. 'b_or_d isa 1 for part B premium or 2 for Part D surcharge 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly Dim yr As Integer Dim tbl_name As String, ws_name As String, magi_yr As String Dim tbl As ListObject Dim lr As ListRow, rng As range Dim infl As Variant yr = IntYear(year) If magi = -1 Then magi_yr = y_offset(year, -2) magi = get_val(\"Adjusted Gross\", \"tbl_taxes\", magi_yr) End If magi = Application.WorksheetFunction.Max(1, magi) tbl_name = \"tbl_part_b\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set yr_col = tbl.ListColumns(\"year\") y = Application.WorksheetFunction.VLookup(yr, yr_col.range, 1, True) ' latest year for which we have data MedicarePrem = 0 'in case the if never succeeds For Each lr In tbl.ListRows() Set rng = lr.range ry = rng.Cells(1, 1).value rl = rng.Cells(1, 2).value rh = rng.Cells(1, 3).value valu = rng.Cells(1, 3 + b_or_d).value pw = (yr - y) If (ry = y And rl < magi And rh >= magi) Then p = valu * 12 infl = CDbl(Application.WorksheetFunction.Power(inflation, pw)) MedicarePrem = p * infl Exit For End If Next End Function Function mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double 'Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date 'The end date is a string since there is a bug in the Mac Excel. 'The end date represents the month of the last period to include. The day is ignored and the last day of the month is used. Dim result As Double, distance As Double, sign As Integer, months As Integer Dim ed As Date, sd As Date If end_mdy = \"\" Then ed = DateSerial(3000, 12, 31) 'the default since the literal is not working on MacExcel Else mdy = Split(end_mdy, \"/\") ed = DateSerial(mdy(2), mdy(0) + 1, 1) - 1 End If ed = Application.WorksheetFunction.Min(ed, DateSerial(IntYear(y_year), 12, 31)) sd = Application.WorksheetFunction.Max(start_date, DateSerial(IntYear(y_year), 1, 1)) distance = (ed - sd) / (365.25 / 12) months = Round(distance, 0) months = Application.WorksheetFunction.Min(12, months) months = Application.WorksheetFunction.Max(0, months) result = months / 12 mo_apply = result End Function Function PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part b premium 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly PartBPrem = MedicarePrem(1, year, inflation, magi) End Function Function PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part D surcharge 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly PartDSurcharge = MedicarePrem(2, year, inflation, magi) End Function Function prior_value(line As String) As Variant ' Get the prior years' value for this line. Suitable only for year columns. Dim prior_col As String Dim value As Variant Dim table As String Dim range As range Set range = Application.caller table = range.ListObject.Name prior_col = y_offset(this_col_name(), -1) value = get_val(line, table, prior_col) prior_value = value End Function Function retir_med(who1 As String, y_year As String) As Double 'return the forecast medical expenses including premium and deductible for person with initial who1 given a year Dim this_year As Integer, tbl_name As String Dim med_exp As Double, result As Double Dim tbl As ListObject, crit_col1 As ListColumn, crit_col2 As ListColumn, val_col As ListColumn Dim criteria1 As String, criteria2 As String criteria1 = \"MEDIC*\" criteria2 = who1 tbl_name = \"tbl_retir_vals\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set crit_col1 = tbl.ListColumns(\"Item\") Set crit_col2 = tbl.ListColumns(\"Who1\") Set val_col = tbl.ListColumns(y_year) med_exp = Application.WorksheetFunction.SumIfs(val_col.range, crit_col1.range, criteria1, crit_col2.range, criteria2) retir_med = med_exp End Function Function retir_parm(code As String, who As String) As Variant 'Get a retirement paramenter given code and code (G or V) Dim rng As range On Error GoTo ErrHandler sht = \"retireparms\" cl = InStr(1, \"abGV\", who, vbTextCompare) With ThisWorkbook.Worksheets(sht) Set rng = .range(\"Table3[code]\") rw = Application.WorksheetFunction.Match(code, rng, False) rw = rw + rng.row - 1 s = sht & \"!\" & .Cells(rw, cl).address v = .range(s) retir_parm = v End With Exit Function ErrHandler: log (\"retir_parm: \" & Err.Description & \" (\" & Err.Number & \")\") log (\"Looking for: \" & code & \" who:\" & who) End Function Function RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double 'return the req minimum distribution table 1 result for a year for a given account, owner (GBD or VEC) and year. 'if death year is not given then this function treat this as spousal inheritance 'if death year is given the treat this as a beneficiary inheritance Dim this_year As Integer, age As Integer Dim prior_end_bal As Double, life_expectancy As Double, result As Double this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) If death_year = 0 Then ' for spousal use actual age this year age = age_of(account_owner, y_year) life_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\") Else ' work with the age at year after death for beneficiary type age = age_of(account_owner, \"Y\" & (death_year + 1)) life_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\") life_expectancy = life_expectancy - (this_year - (death_year + 1)) 'factor is reduced by one for each succeeding distribution year. End If result = prior_end_bal / life_expectancy RMD_1 = result End Function Function rolling_avg(table As String, key As String, this_y_year As String, lookback As Integer) As Double 'Look back at previous columns and average the numeric values found there, ignoring non-numerics 'Return the average Dim y_year As String this_year = IntYear(this_y_year) tot = 0 cnt = 0 For y = this_year - lookback To this_year - 1 y_year = \"Y\" & y value = get_val(key, table, y_year) If Not value = 0 Then tot = tot + value cnt = cnt + 1 End If Next y If cnt <> 0 Then rolling_avg = tot / cnt Else rolling_avg = 0 End If End Function Function simple_return(account As String, y_year As String) As Double 'return the rlzd gain divided by the average of the start and end balances (or zero) sb = get_val(\"Start Bal\" & account, \"tbl_balances\", y_year) eb = get_val(\"End Bal\" & account, \"tbl_balances\", y_year) rg = get_val(\"Rlz Int/Gn\" & account, \"tbl_balances\", y_year) urg = get_val(\"Unrlz Gn/Ls\" & account, \"tbl_balances\", y_year) av = (sb + eb) / 2 If av = 0 Then result = 0 Else result = (rg + urg) / av End If simple_return = result End Function Function sort_tax_table() 'make sure the federal tax tables are sorted properly Dim tbl_name As String tbl_name = \"tbl_fed_tax\" ws = ws_for_table_name(tbl_name) Dim tbl As ListObject Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) Dim year_column As range, range_column As range Set year_column = range(tbl_name & \"[Year]\") Set range_column = range(tbl_name & \"[Range]\") With tbl.sort .SortFields.Clear .SortFields.Add key:=year_column, SortOn:=xlSortOnValues, Order:=xlAscending .SortFields.Add key:=range_column, SortOn:=xlSortOnValues, Order:=xlAscending .Header = xlYes .Apply End With End Function Sub test_fed_tax() Dim r As Double, c As Double zt = \"not passed\" r = Federal_Tax(2150, 9999) If 0 = r Then zt = \"passed\" n = 74031 pt = \"not passed\" r = Federal_Tax(2020, 350000) If r = n Then pt = \"passed\" n = 72331 ct = \"not passed\" c = Fed_Tax_CapGn(2020, 350000, 10000) If c = n Then ct = \"passed\" Debug.Print (\"Zero test: \" & zt) Debug.Print (\"Positive test:\" & pt) Debug.Print (\"Capital gains test:\" & ct) End Sub Sub test_get_val() Dim tbl_name As String Dim line_name As String Dim y_year As String Debug.Print (get_val(\"Expenses:T:Soc Sec - TOTAL\", \"tbl_iande_actl\", \"Y2018\")) Debug.Print (get_val(\"End BalMortgage - Nationstar\", \"tbl_balances\", \"Y2019\")) End Sub Sub test_LUMP() Dim val As Double val = LUMP(\"401K - GBD - TRV\", \"Y2022\") Debug.Print (val) End Sub Sub test_medicarePrem() Dim test_cases() As Variant Dim yr As String Dim infl As Variant Dim magi As Variant test_cases() = Array(Array(2021, 1#, 10000), Array(2022, 1#, 182001), Array(2022, 1#, 400000), Array(2023, 1.02, 75000)) log (\"Part B tests\") For i = LBound(test_cases) To UBound(test_cases) yr = \"Y\" & test_cases(i)(0) magi = test_cases(i)(2) infl = test_cases(i)(1) partB = PartBPrem(yr, infl, magi) partD = PartDSurcharge(yr, infl, magi) msg = \"Input: year=\" & test_cases(i)(0) & \" magi=\" & magi & \" inflation=\" & infl & \" Output: \" & partB & \" Part D: \" & partD log (msg) Next End Sub Sub test_mo_apply() Dim test_cases() As Variant Dim test_case As Variant Dim yr As String Dim start_date As Date, end_date As String, result As Double test_cases() = Array( _ Array(3, 2022, 2022), _ Array(12, 2025, 2025), _ Array(3, 2022, 2022, 11, 2022), _ Array(3, 2022, 2025, 9, 2025), _ Array(3, 2022, 2022, 8, 2022) _ ) log (\"mo_apply tests\") For i = LBound(test_cases) To UBound(test_cases) test_case = test_cases(i) start_date = DateSerial(test_case(1), test_case(0), 1) yr = \"Y\" & test_case(2) end_date = \"-none-\" If UBound(test_case) > 2 Then end_date = test_case(3) & \"/1/\" & test_case(4) result = mo_apply(start_date, yr, end_date) Else result = mo_apply(start_date, yr) End If msg = \"Input: year=\" & yr & \" start/end dates = \" & start_date & \" \" & end_date & \" Output: \" & result log (msg) Next i End Sub Sub test_retir_med() Dim test_cases() As Variant Dim yr As String, who As String, result As Double test_cases() = Array(Array(\"G\", \"Y2022\"), Array(\"V\", \"Y2026\")) log (\"retir_med tests\") For i = LBound(test_cases) To UBound(test_cases) who = test_cases(i)(0) yr = test_cases(i)(1) result = retir_med(who, yr) msg = \"Input: year=\" & yr & \" who=\" & who & \" Output: \" & result log (msg) Next End Sub Sub test_sort() sort_tax_table End Sub Function this_col_name() As String 'return the caller's column name, assuming the cell is in a table. 'Otherwise generates a #VALUE error 'Use to make formulas more portable Dim point As range Dim list_ojb As ListObject Dim cols As ListColumns Dim offset As Integer, col_ix As Integer Set point = Application.caller Set list_obj = point.ListObject Set cols = list_obj.ListColumns offset = list_obj.range(1, 1).Column - 1 col_ix = offset + point.Column this_col_name = cols(col_ix) End Function Function unrlz(acct As String, y_year As String) As Variant 'compute the unrealized gain or loss for an account for a year, assuming end bal is fixed Dim open_bal As Variant, adds As Variant, rlzd As Variant, end_bal As Variant Dim val As Variant open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) adds = get_val(\"Add/Wdraw\" & acct, \"tbl_balances\", y_year) rlzd = get_val(\"Rlz Int/Gn\" & acct, \"tbl_balances\", y_year) end_bal = get_val(\"End bal\" & acct, \"tbl_balances\", y_year) val = end_bal - (open_bal + adds + rlzd) unrlz = val End Function Function ws_for_table_name(tbl_name As String) As String ' find out what worksheet the named table occurs on With ThisWorkbook.Worksheets(\"utility\") Set rng = .ListObjects(\"tbl_table_map\").DataBodyRange ws = Application.WorksheetFunction.VLookup(tbl_name, rng, 2, False) End With ws_for_table_name = ws End Function Function y_offset(y_year As String, offset As Integer) As String 'given a y_year offset it by the amount given, producing a new y_year y = IntYear(y_year) r = \"Y\" & y + offset y_offset = r End Function","title":"VBA Code"}]}