{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tools to map accounting data to long term plans The accounting system is Moneydance. The long term planning is via Excel. This spreadsheet extends the family's historical financials into the future. It allows for modeling and planning for Income and expenses (combined with cash flow) Accounts balances and transfers (including investments) Working life and retirement phases Federal and state income taxes. The tax calculator is far from general. The spreadsheet is built by Python programs. Actual data is based on data exported from Moneydance. The spreadsheet Python is the glue Visual Basic Getting Started Appendix","title":"Tools to map accounting data to long term plans"},{"location":"#tools-to-map-accounting-data-to-long-term-plans","text":"The accounting system is Moneydance. The long term planning is via Excel. This spreadsheet extends the family's historical financials into the future. It allows for modeling and planning for Income and expenses (combined with cash flow) Accounts balances and transfers (including investments) Working life and retirement phases Federal and state income taxes. The tax calculator is far from general. The spreadsheet is built by Python programs. Actual data is based on data exported from Moneydance. The spreadsheet Python is the glue Visual Basic Getting Started Appendix","title":"Tools to map accounting data to long term plans"},{"location":"appendix/","text":"Appendix tax rates Worksheets removed that were previously on long-term-plan. Sweep Plan (goes to iande and taxes) Variance Tax Tables (-> tables) 401K RetireMedic States (-> tables) RMD (-> tables) Pension (-> tables) Actual (->iande-map) M-Actual (->iande_actl) HSA-V (->hsa) HSA-G (->hsa) Act-401K (->401K) SettleAccts Real Estate Act College Clg-Actual Criteria Inflation (->tables) Loan Calc (other) Inflation AcctNameChg InvestAct (->invest_actl) InvestXfersAct (->invest_actl) OtherAct (->other-x) Changes to existing categories The following changes were made to enable the invest iande enhancements. \u2713 Create X:Investing:Fees \u2713 Find and replace the records under X:Misc:Commisions & Fees to X:Investing:Fees 3 types under Invest Income: CapGn, Div, Int \u2713 Create CapGn \u2713 Create CapGn:Sale \u2713 Rename/Move CapGn - LT as CapGn:Mut LT \u2713 Rename/Move CapGn - ST as CapGn:Mut ST \u2713 Rneame/Move SCapGn - LT' as CapGn:Shelt \u2713 Find and replace: change 'SCapGn - ST' to '...CapGn:Shelt' \u2713 Rename Div as Reg \u2713 Create new Div under Invest Income \u2713 Move Reg under Div \u2713 Rename/Move Div Tax-exempt to Div:Tax-exempt \u2713 Rename/Move 'Sdiv' to Div:Shelt Find and replace InvestInc:SDiv -> Div:Shelt \u2713 Create Int:Reg \u2713 Find/replace Int:Bkg and Int:Other to Int:reg \u2713 Rename/Move Int Tax-exempt to Int:Tax-exempt Rename/Move 'SInterest Income' to Int:Shelt \u2713 Creaate Int:Shelt \u2713 Find and replace Sint:bank and sint:bkg -> Int:Shelt Make the taxes support the last two parts method Club state and federal together. Create: T:Income Tax Create T:Income Tax:Current Yr and T:Income Tax:Prior Yr \u2713 Rename / Move T:Fed income tx pd to T:Income Tax:Current Yr:Fed \u2713 Drop all the Fed tax pd - legends \u2713 Add WH to payroll for consistency \u2713 Change prior year to Fed Prior Year under T:Income Tax \u2713 Rename/Move State income tax pd to Income Tax:State \u2713 Rename CT and MA to include 'tax' \u2713 Add WH and remove CT Tax - from the state lines \u2713 Move the prior year items to T:Income Tax:Prior Year \u2713 Find and replace Sheltered:Employer Health Acct contributions to I:Sheltered income:ER health acct contrib:ER HSA contribution - V \u2713 remove 'SCapGn - ST', S invest income, InvestInc:SInterest Income, InvestInc:SDiv, Sheltered:InvestInc and what's left under Sheltered X:Misc:Commissions & Fees \u2713 Clean up a few transactions \u2713 Optum Bank - HSA move interest to :Bank \u2713 Passthru:Pass-IRA-VEC-ML 3 rounding adjustments to misc:asset adj","title":"Appendix"},{"location":"appendix/#appendix","text":"","title":"Appendix"},{"location":"appendix/#tax-rates","text":"","title":"tax rates"},{"location":"appendix/#worksheets-removed-that-were-previously-on-long-term-plan","text":"Sweep Plan (goes to iande and taxes) Variance Tax Tables (-> tables) 401K RetireMedic States (-> tables) RMD (-> tables) Pension (-> tables) Actual (->iande-map) M-Actual (->iande_actl) HSA-V (->hsa) HSA-G (->hsa) Act-401K (->401K) SettleAccts Real Estate Act College Clg-Actual Criteria Inflation (->tables) Loan Calc (other) Inflation AcctNameChg InvestAct (->invest_actl) InvestXfersAct (->invest_actl) OtherAct (->other-x)","title":"Worksheets removed that were previously on long-term-plan."},{"location":"appendix/#changes-to-existing-categories","text":"The following changes were made to enable the invest iande enhancements. \u2713 Create X:Investing:Fees \u2713 Find and replace the records under X:Misc:Commisions & Fees to X:Investing:Fees 3 types under Invest Income: CapGn, Div, Int \u2713 Create CapGn \u2713 Create CapGn:Sale \u2713 Rename/Move CapGn - LT as CapGn:Mut LT \u2713 Rename/Move CapGn - ST as CapGn:Mut ST \u2713 Rneame/Move SCapGn - LT' as CapGn:Shelt \u2713 Find and replace: change 'SCapGn - ST' to '...CapGn:Shelt' \u2713 Rename Div as Reg \u2713 Create new Div under Invest Income \u2713 Move Reg under Div \u2713 Rename/Move Div Tax-exempt to Div:Tax-exempt \u2713 Rename/Move 'Sdiv' to Div:Shelt Find and replace InvestInc:SDiv -> Div:Shelt \u2713 Create Int:Reg \u2713 Find/replace Int:Bkg and Int:Other to Int:reg \u2713 Rename/Move Int Tax-exempt to Int:Tax-exempt Rename/Move 'SInterest Income' to Int:Shelt \u2713 Creaate Int:Shelt \u2713 Find and replace Sint:bank and sint:bkg -> Int:Shelt Make the taxes support the last two parts method Club state and federal together. Create: T:Income Tax Create T:Income Tax:Current Yr and T:Income Tax:Prior Yr \u2713 Rename / Move T:Fed income tx pd to T:Income Tax:Current Yr:Fed \u2713 Drop all the Fed tax pd - legends \u2713 Add WH to payroll for consistency \u2713 Change prior year to Fed Prior Year under T:Income Tax \u2713 Rename/Move State income tax pd to Income Tax:State \u2713 Rename CT and MA to include 'tax' \u2713 Add WH and remove CT Tax - from the state lines \u2713 Move the prior year items to T:Income Tax:Prior Year \u2713 Find and replace Sheltered:Employer Health Acct contributions to I:Sheltered income:ER health acct contrib:ER HSA contribution - V \u2713 remove 'SCapGn - ST', S invest income, InvestInc:SInterest Income, InvestInc:SDiv, Sheltered:InvestInc and what's left under Sheltered X:Misc:Commissions & Fees \u2713 Clean up a few transactions \u2713 Optum Bank - HSA move interest to :Bank \u2713 Passthru:Pass-IRA-VEC-ML 3 rounding adjustments to misc:asset adj","title":"Changes to existing categories"},{"location":"data_from_moneydance/","text":"Data from Moneydance Python Environment In the terminal change the current directory to the root of the repository. Use the following command to active the virtual environment: source .venv/bin/activate Copy Income and Expense from Moneydance In Moneydance run Income & Expense by Year Save as data/iande.tsv Close spreadsheet and run the program iande-actl-load.py Ensure that the formulas on the year are set to getval... Check that income, tax and expense totals match to report: start at level 3 and drill down to find problems. IRA distributions are problematic see note IRA-Txbl-Distr If there are new categories - you will need to insert a line First pass on the taxes The first pass does not rely on the tax forms, those come later - basically the bits that are not accounted for are entered into the manual_actl tab. Check W2 exclusions on aux Change the column for the year to use the actuals Carefully check the progression of the logic Copy transfers data from Moneydance Run report in Moneydance currently called Transfers-to-fcast for all actual periods. Press Save button and choose Tab delimited and save as data/transfers.tsv (If a year has been completed run the Bank balance export procedure) If fcast.xlsm is open, save your work and close the file. Open a terminal window at the project root. Run python transfers_actl_load.py Re-open the spreadsheet and save it to force balances to recalc and be stored. > dance/transfers_actl_load.py 2022-08-19 12:49:34,546 - transfers_actl_load - INFO - loaded dataframe from data/transfers.tsv 2022-08-19 12:49:34,839 - tables - INFO - Read table tbl_iande_actl from data/fcast.xlsm 2022-08-19 12:49:34,839 - tables - INFO - 300 rows and 6 columns 2022-08-19 12:49:35,124 - transfers_actl_load - INFO - loaded workbook from data/fcast.xlsm 2022-08-19 12:49:35,162 - transfers_actl_load - INFO - First forecast year is: 2022 2022-08-19 12:49:35,470 - books - INFO - deleted worksheet transfers_actl 2022-08-19 12:49:35,470 - books - INFO - created worksheet transfers_actl 2022-08-19 12:49:35,499 - tables - INFO - table tbl_transfers_actl added to transfers_actl Bank balance export procedure The method used is the difference of progressive balances. This is done for each year. In Moneydance run the Account Balances report selecting only banks and credit cards. Save the file as tab-separated under budget/data as bank-bal-YYYY . These files are consumed by the transfers_actl_load.py routine. Investment actuals The Tranfers to Investment Accounts by Year report is saved as invest-x.tsv . The Investment Performance report for each year is saved under invest-p-yyyy.tsv for each year. These are processed by invest_actl_load.py . At each year end: Run Tranfers to Investment Accounts by Year and save as invest_x.tsv For each year: Run Investment Performance report for the year and save under invest-p-yyyy.tsv If fcast.xlsm is open, save your work and close the file. Open a terminal window at the project root. Run invest_actl_load.py Re-open the spreadsheet and save it to force balances to recalc and be stored. >dance/invest_actl_load.py 2022-08-19 13:49:22,563 - invest_actl_load - INFO - loaded dataframe from data/invest_x.tsv 2022-08-19 13:49:22,563 - invest_actl_load - INFO - Starting investment actual load 2022-08-19 13:49:22,824 - tables - INFO - Read table tbl_accounts from data/fcast.xlsm 2022-08-19 13:49:22,824 - tables - INFO - 27 rows and 10 columns 2022-08-19 13:49:22,834 - invest_actl_load - INFO - Processing 2018 2022-08-19 13:49:22,846 - invest_actl_load - INFO - Processing 2019 2022-08-19 13:49:22,856 - invest_actl_load - INFO - Processing 2020 2022-08-19 13:49:22,867 - invest_actl_load - INFO - Processing 2021 2022-08-19 13:49:23,145 - books - INFO - deleted worksheet invest_actl 2022-08-19 13:49:23,145 - books - INFO - created worksheet invest_actl 2022-08-19 13:49:23,175 - tables - INFO - table tbl_invest_actl added to invest_actl Validate balances for a year The routine balance_check.py is available to see how the values from the Account Balances report in Moneydance match to those in fcast.xlsm . In Moneydance run the Account Balances report selecting all accounts. Save the report under the names: data/acct-bals-yyyy.tsv . If the year has rolled over in the spreadsheet change first_forecast_year in on the tables worksheet. In a terminal window set current directory to the project root and run dance/balance_check.py yyyy where yyyy is the year to check. You should get a listing that shows the exact matches and the accounts that don't match (and how much they are off). Add an account On the accounts tab insert a row in the table Fill in all fields (notes is optional). Usually, the account name is used for the actl_source Create the rows on the balances table Steps 1 Unhide all columns and sort by account name 2 Insert 6 new rows. Put the account name in the first row of the AcctName field. 3 Copy down columns A, D, E, F from another account. 4 Copy the 6 value types into column B 5 Insert 6 copies of the new account name for each account in column c 6 Copy formulas into 1st active year 7 Set the opening balance 8 When satisfied with actuals, copy formulas into 1st forecast period Rename an account It turns out to be useful to have an account naming convention. The convention is type - owner - firm where type is 401K, 529, BKG, ESP, HSA, IRA, IRA Roth, MUT, BND and owner is JNT or the owner's initials. Notes BND is for - gov't bonds where TRY is for treasury - direct Here's what has to be done to rename an account. The account name can be changed in Moneydance using the Tools -> Accounts menu. It must be changed in fcst.xlsm at the following locations tbl_accounts - it occurs in the A column and may occur in the G column tbl_balances Depending on the account it may occur in the following location tbl_retir, tbl_retir_parms The following should be refreshed: tbl_transfers_actl by running the procedure Accounting The computation of balances depends on the ability to determine the changes to the accounts. Investments The performance report provides opening and closing balances, income, gains and something called \"Return Amount\". It does not indicate unrealized gains per se. The \"Return Amount\" is essentially a plug to get to the ending balance. Note - income needs to be marked MiscInc (not transfer to the income category) Gains are essentially realized gains. Fees for purchases and/or sales of securities are included as part of the cost basis. Other fees, that occur outside of the purchase or sale transaction are not included - such things as commissions, other account fees, and others. The other fees are rolled into the plug field (Return Amount), along with unrealized gains. It is better to include them in the Gains and therefore the 'Rlz Int/Gn' value in the spreadsheet. Thus when an account is closed, there will be no unrealized gains. To do this the investment fees need two categories. Investing:Action Fees, Investing:Account Fees. Only the account fee is selected in the Investment IandE report. This allows the loading of investment actuals to add the account fees to the gains. It also means that the transaction fees are not used to forecast future fees. This is reasonable since they are by nature not asset based and the forecast method uses percentage of assets. Other Assets The \"Other Asset\" account has several sub-accounts, including receivables from a few parties. The method of determining the transfers depends is to use the transfers-to-fcast memorized report. Some of the sub-accounts in Other Asset have transactions using expense categories. To support this the memorized report includes all expenses in the criteria. This correctly gathers the amounts such as depreciation for cars and payments made against some expense category (on our behalf). The set of a target accounts configured in this report includes all investment, loan, asset and liability accounts. Whenever there is a transfer between these accounts, this method essentially cancels out that values, which can lead to wrong balances. Such transactions should be routed throught the Passthru bank account to avoid this problem.","title":"Data from Moneydance"},{"location":"data_from_moneydance/#data-from-moneydance","text":"","title":"Data from Moneydance"},{"location":"data_from_moneydance/#python-environment","text":"In the terminal change the current directory to the root of the repository. Use the following command to active the virtual environment: source .venv/bin/activate","title":"Python Environment"},{"location":"data_from_moneydance/#copy-income-and-expense-from-moneydance","text":"In Moneydance run Income & Expense by Year Save as data/iande.tsv Close spreadsheet and run the program iande-actl-load.py Ensure that the formulas on the year are set to getval... Check that income, tax and expense totals match to report: start at level 3 and drill down to find problems. IRA distributions are problematic see note IRA-Txbl-Distr If there are new categories - you will need to insert a line","title":"Copy Income and Expense from Moneydance"},{"location":"data_from_moneydance/#first-pass-on-the-taxes","text":"The first pass does not rely on the tax forms, those come later - basically the bits that are not accounted for are entered into the manual_actl tab. Check W2 exclusions on aux Change the column for the year to use the actuals Carefully check the progression of the logic","title":"First pass on the taxes"},{"location":"data_from_moneydance/#copy-transfers-data-from-moneydance","text":"Run report in Moneydance currently called Transfers-to-fcast for all actual periods. Press Save button and choose Tab delimited and save as data/transfers.tsv (If a year has been completed run the Bank balance export procedure) If fcast.xlsm is open, save your work and close the file. Open a terminal window at the project root. Run python transfers_actl_load.py Re-open the spreadsheet and save it to force balances to recalc and be stored. > dance/transfers_actl_load.py 2022-08-19 12:49:34,546 - transfers_actl_load - INFO - loaded dataframe from data/transfers.tsv 2022-08-19 12:49:34,839 - tables - INFO - Read table tbl_iande_actl from data/fcast.xlsm 2022-08-19 12:49:34,839 - tables - INFO - 300 rows and 6 columns 2022-08-19 12:49:35,124 - transfers_actl_load - INFO - loaded workbook from data/fcast.xlsm 2022-08-19 12:49:35,162 - transfers_actl_load - INFO - First forecast year is: 2022 2022-08-19 12:49:35,470 - books - INFO - deleted worksheet transfers_actl 2022-08-19 12:49:35,470 - books - INFO - created worksheet transfers_actl 2022-08-19 12:49:35,499 - tables - INFO - table tbl_transfers_actl added to transfers_actl","title":"Copy transfers data from Moneydance"},{"location":"data_from_moneydance/#bank-balance-export-procedure","text":"The method used is the difference of progressive balances. This is done for each year. In Moneydance run the Account Balances report selecting only banks and credit cards. Save the file as tab-separated under budget/data as bank-bal-YYYY . These files are consumed by the transfers_actl_load.py routine.","title":"Bank balance export procedure"},{"location":"data_from_moneydance/#investment-actuals","text":"The Tranfers to Investment Accounts by Year report is saved as invest-x.tsv . The Investment Performance report for each year is saved under invest-p-yyyy.tsv for each year. These are processed by invest_actl_load.py . At each year end: Run Tranfers to Investment Accounts by Year and save as invest_x.tsv For each year: Run Investment Performance report for the year and save under invest-p-yyyy.tsv If fcast.xlsm is open, save your work and close the file. Open a terminal window at the project root. Run invest_actl_load.py Re-open the spreadsheet and save it to force balances to recalc and be stored. >dance/invest_actl_load.py 2022-08-19 13:49:22,563 - invest_actl_load - INFO - loaded dataframe from data/invest_x.tsv 2022-08-19 13:49:22,563 - invest_actl_load - INFO - Starting investment actual load 2022-08-19 13:49:22,824 - tables - INFO - Read table tbl_accounts from data/fcast.xlsm 2022-08-19 13:49:22,824 - tables - INFO - 27 rows and 10 columns 2022-08-19 13:49:22,834 - invest_actl_load - INFO - Processing 2018 2022-08-19 13:49:22,846 - invest_actl_load - INFO - Processing 2019 2022-08-19 13:49:22,856 - invest_actl_load - INFO - Processing 2020 2022-08-19 13:49:22,867 - invest_actl_load - INFO - Processing 2021 2022-08-19 13:49:23,145 - books - INFO - deleted worksheet invest_actl 2022-08-19 13:49:23,145 - books - INFO - created worksheet invest_actl 2022-08-19 13:49:23,175 - tables - INFO - table tbl_invest_actl added to invest_actl","title":"Investment actuals"},{"location":"data_from_moneydance/#validate-balances-for-a-year","text":"The routine balance_check.py is available to see how the values from the Account Balances report in Moneydance match to those in fcast.xlsm . In Moneydance run the Account Balances report selecting all accounts. Save the report under the names: data/acct-bals-yyyy.tsv . If the year has rolled over in the spreadsheet change first_forecast_year in on the tables worksheet. In a terminal window set current directory to the project root and run dance/balance_check.py yyyy where yyyy is the year to check. You should get a listing that shows the exact matches and the accounts that don't match (and how much they are off).","title":"Validate balances for a year"},{"location":"data_from_moneydance/#add-an-account","text":"On the accounts tab insert a row in the table Fill in all fields (notes is optional). Usually, the account name is used for the actl_source Create the rows on the balances table Steps 1 Unhide all columns and sort by account name 2 Insert 6 new rows. Put the account name in the first row of the AcctName field. 3 Copy down columns A, D, E, F from another account. 4 Copy the 6 value types into column B 5 Insert 6 copies of the new account name for each account in column c 6 Copy formulas into 1st active year 7 Set the opening balance 8 When satisfied with actuals, copy formulas into 1st forecast period","title":"Add an account"},{"location":"data_from_moneydance/#rename-an-account","text":"It turns out to be useful to have an account naming convention. The convention is type - owner - firm where type is 401K, 529, BKG, ESP, HSA, IRA, IRA Roth, MUT, BND and owner is JNT or the owner's initials. Notes BND is for - gov't bonds where TRY is for treasury - direct Here's what has to be done to rename an account. The account name can be changed in Moneydance using the Tools -> Accounts menu. It must be changed in fcst.xlsm at the following locations tbl_accounts - it occurs in the A column and may occur in the G column tbl_balances Depending on the account it may occur in the following location tbl_retir, tbl_retir_parms The following should be refreshed: tbl_transfers_actl by running the procedure","title":"Rename an account"},{"location":"data_from_moneydance/#accounting","text":"The computation of balances depends on the ability to determine the changes to the accounts.","title":"Accounting"},{"location":"data_from_moneydance/#investments","text":"The performance report provides opening and closing balances, income, gains and something called \"Return Amount\". It does not indicate unrealized gains per se. The \"Return Amount\" is essentially a plug to get to the ending balance. Note - income needs to be marked MiscInc (not transfer to the income category) Gains are essentially realized gains. Fees for purchases and/or sales of securities are included as part of the cost basis. Other fees, that occur outside of the purchase or sale transaction are not included - such things as commissions, other account fees, and others. The other fees are rolled into the plug field (Return Amount), along with unrealized gains. It is better to include them in the Gains and therefore the 'Rlz Int/Gn' value in the spreadsheet. Thus when an account is closed, there will be no unrealized gains. To do this the investment fees need two categories. Investing:Action Fees, Investing:Account Fees. Only the account fee is selected in the Investment IandE report. This allows the loading of investment actuals to add the account fees to the gains. It also means that the transaction fees are not used to forecast future fees. This is reasonable since they are by nature not asset based and the forecast method uses percentage of assets.","title":"Investments"},{"location":"data_from_moneydance/#other-assets","text":"The \"Other Asset\" account has several sub-accounts, including receivables from a few parties. The method of determining the transfers depends is to use the transfers-to-fcast memorized report. Some of the sub-accounts in Other Asset have transactions using expense categories. To support this the memorized report includes all expenses in the criteria. This correctly gathers the amounts such as depreciation for cars and payments made against some expense category (on our behalf). The set of a target accounts configured in this report includes all investment, loan, asset and liability accounts. Whenever there is a transfer between these accounts, this method essentially cancels out that values, which can lead to wrong balances. Such transactions should be routed throught the Passthru bank account to avoid this problem.","title":"Other Assets"},{"location":"fcast/","text":"Design of fcast.xlsm Tables The spreadsheet is based entirely on a set of Excel tables. Many of the tables represent time series where the time is based on years. The data elements are typically financial values associated with a year. For instance, the balances table tracks how balances change year by year. The time sequence columns are labeled with 'Y' + year. The meaning of the column data depends on the state of the system. To the left of the first forecast year, data is considered actual, while to the right it is forecast. In the following example, the red line marks the transition from actual to forecast. Other columns are labeled with appropriate short column labels. An index of tables is maintained on the 'utility' worksheet, which allows the worksheet to be located by the VBA function. This itself is a table and it is created by a Python program index-tables.py . Worksheets Tables are distributed over a set of worksheets. Sometimes a worksheet holds more than one table. Worksheets Excel Calculations Use of Visual Basic (macros) allows for calculations to be done in a more readable manner. However there is a downside. This is that Excel cannot use its dependency trees to know what needs to occur when the macros reference or update a value with this method. So far, I have not turned on the use of the application volitile method, as there is significant overhead, possibly causing slow performance. There is a macro, currently called calc_retir(), to perform the re-calcuations in the correct order. Functions There are Visual Basic for Applications functions in this worksheet. These are listed in the VBA index . The full source is also imported here as part of the build process. One commonly used function is get_val . The get_val routine requires the use of worksheet tables, and references the values by the row names and the column names. Calculations There are some complex dependencies between sheets. Generally the flow is between sheets for a year, then certain values are carried forward into the next year. Currently, in some cases it is necessary to run calc_retir in order to complete the calculations. Conventions Excel conventions All table names begin with tbl_ . Except where visible, such as column names and row labels, use lowercase except for acronyms. Use underscores between words. Use std abbreviations as follows: long short actual actl annuity anny balances bals duration dur investments invest parameters parms pension pens retirement retir value or valuation val Moneydance conventions Actual account names are generally of the form type-who-firm where type is one of 401K, 529, BKG, BND, ESP, HSA, IRA, IRA Roth, LON, MUT.","title":"Design of fcast.xlsm"},{"location":"fcast/#design-of-fcastxlsm","text":"","title":"Design of fcast.xlsm"},{"location":"fcast/#tables","text":"The spreadsheet is based entirely on a set of Excel tables. Many of the tables represent time series where the time is based on years. The data elements are typically financial values associated with a year. For instance, the balances table tracks how balances change year by year. The time sequence columns are labeled with 'Y' + year. The meaning of the column data depends on the state of the system. To the left of the first forecast year, data is considered actual, while to the right it is forecast. In the following example, the red line marks the transition from actual to forecast. Other columns are labeled with appropriate short column labels. An index of tables is maintained on the 'utility' worksheet, which allows the worksheet to be located by the VBA function. This itself is a table and it is created by a Python program index-tables.py .","title":"Tables"},{"location":"fcast/#worksheets","text":"Tables are distributed over a set of worksheets. Sometimes a worksheet holds more than one table. Worksheets","title":"Worksheets"},{"location":"fcast/#excel-calculations","text":"Use of Visual Basic (macros) allows for calculations to be done in a more readable manner. However there is a downside. This is that Excel cannot use its dependency trees to know what needs to occur when the macros reference or update a value with this method. So far, I have not turned on the use of the application volitile method, as there is significant overhead, possibly causing slow performance. There is a macro, currently called calc_retir(), to perform the re-calcuations in the correct order.","title":"Excel Calculations"},{"location":"fcast/#functions","text":"There are Visual Basic for Applications functions in this worksheet. These are listed in the VBA index . The full source is also imported here as part of the build process. One commonly used function is get_val . The get_val routine requires the use of worksheet tables, and references the values by the row names and the column names.","title":"Functions"},{"location":"fcast/#calculations","text":"There are some complex dependencies between sheets. Generally the flow is between sheets for a year, then certain values are carried forward into the next year. Currently, in some cases it is necessary to run calc_retir in order to complete the calculations.","title":"Calculations"},{"location":"fcast/#conventions","text":"","title":"Conventions"},{"location":"fcast/#excel-conventions","text":"All table names begin with tbl_ . Except where visible, such as column names and row labels, use lowercase except for acronyms. Use underscores between words. Use std abbreviations as follows: long short actual actl annuity anny balances bals duration dur investments invest parameters parms pension pens retirement retir value or valuation val","title":"Excel conventions"},{"location":"fcast/#moneydance-conventions","text":"Actual account names are generally of the form type-who-firm where type is one of 401K, 529, BKG, BND, ESP, HSA, IRA, IRA Roth, LON, MUT.","title":"Moneydance conventions"},{"location":"python/","text":"Use of Python External access to the spreadsheet is provided via Python programs. Mostly these are programs to transfer Moneydance actual data into the Workbook. This is done via Python using the openxlpy library. These files are in the dance subfolder. One of these Python files, util/index_tables.py enumerates and indexs the tables (something oddly missing in Excel due to the fact that it is worksheet oriented). The index is stored on the utility worksheet. The initialization of the spreadsheet is also under control of a Python utility: setup/create_wb.py .","title":"Use of Python"},{"location":"python/#use-of-python","text":"External access to the spreadsheet is provided via Python programs. Mostly these are programs to transfer Moneydance actual data into the Workbook. This is done via Python using the openxlpy library. These files are in the dance subfolder. One of these Python files, util/index_tables.py enumerates and indexs the tables (something oddly missing in Excel due to the fact that it is worksheet oriented). The index is stored on the utility worksheet. The initialization of the spreadsheet is also under control of a Python utility: setup/create_wb.py .","title":"Use of Python"},{"location":"report_configs/","text":"Moneydance report definitions This page is intended to document the reports which are used to generate the actual data. Transfers-to-fcast Source accounts: All bank, All Income, All Credit Card, All Expense Target accounts: All Load, All Asset, All Liability Security and Investments are handled via the performance report Tranfers to Investment Accounts by Year This report can be run once for all actual year periods. It provides transfers in/out of the investment accounts. Source accounts: All Bank (except Passthru:Pass-IRA-VEC-ML), All Credit Card + certain categories Target accounts: All Investment The account Passthru:Pass-IRA-VEC-ML is used to support the strange way the broker handles re-investments. It has to be excluded from true transfers. The category I:Untaxed Income:Inherit is used to capture the original income that funded the inherited IRA. Certain categories Two situations have arisen when the use of categories made sense. An inheritance which was transfered directly to an investment account. In this case an income category was used to isolate the (rare) transaction. The financial institution provides a disbursement and withholds for and pays state and federal taxes. These transactions effectively are transfers from the account and should be included. Investment Performance This report is run once per year. It provides information used to determine realized and unrealized gains. Select: All Investment, All Security","title":"Moneydance report definitions"},{"location":"report_configs/#moneydance-report-definitions","text":"This page is intended to document the reports which are used to generate the actual data.","title":"Moneydance report definitions"},{"location":"report_configs/#transfers-to-fcast","text":"Source accounts: All bank, All Income, All Credit Card, All Expense Target accounts: All Load, All Asset, All Liability Security and Investments are handled via the performance report","title":"Transfers-to-fcast"},{"location":"report_configs/#tranfers-to-investment-accounts-by-year","text":"This report can be run once for all actual year periods. It provides transfers in/out of the investment accounts. Source accounts: All Bank (except Passthru:Pass-IRA-VEC-ML), All Credit Card + certain categories Target accounts: All Investment The account Passthru:Pass-IRA-VEC-ML is used to support the strange way the broker handles re-investments. It has to be excluded from true transfers. The category I:Untaxed Income:Inherit is used to capture the original income that funded the inherited IRA.","title":"Tranfers to Investment Accounts by Year"},{"location":"report_configs/#certain-categories","text":"Two situations have arisen when the use of categories made sense. An inheritance which was transfered directly to an investment account. In this case an income category was used to isolate the (rare) transaction. The financial institution provides a disbursement and withholds for and pays state and federal taxes. These transactions effectively are transfers from the account and should be included.","title":"Certain categories"},{"location":"report_configs/#investment-performance","text":"This report is run once per year. It provides information used to determine realized and unrealized gains. Select: All Investment, All Security","title":"Investment Performance"},{"location":"setup/","text":"Setting up the spreadsheet Summary of steps Save certain reports from Moneydance to the data folder. Acquire a registration key for the bureau of labor statistics (for inflation data) Edit the control file: dance/setup/setup.yaml Run dance/setup/create_wb.py Conventions File types Set up files are either tab separated values with extension .tsv JSON with extension .json. These are typically exports from tables defined in Excel. There are two types depending on the 'orientation'. YAML - used for the setup config definitions File locations Files are in the data folder under the project. The data folder is not included in the git repository. To make more manageable, the files that have a version each year are placed in subfolders. The under the sub-folder the files are simply named yyyy .tsv. A listing of the files can be had with tree -PD '*.tsv' --prune data/ File names Preferred format uses hyphen not underscores or spaces to separate words. Abbreviations such as IRA and HSA are forced to lowercase, to aid sorting. Reports and their files (Case sensitive sort to match Moneydance) Report Periods File(s) Used in config by Other file use 401, HSA, ESP payroll data full years payroll_to_savings.tsv tbl_payroll_savings 529-Distr[^4] all years 529-distr.tsv tbl_529_distr Account Balances each year acct-bals- yyyy .tsv tbl_accounts[^1], tbl_balances[^2] bank_actl_load.py[^3] HSA - disbursements - 2 full years hsa-disbursements.tsv tbl_hsa_disb[^5] IRA-Distr[^6] all years ira-distr.tsv tbl_ira_distr Income & Expense by Year full years iande.tsv tbl_iande,tbl_iande_actl Investment IandE[^7] full years invest-iande.tsv tbl_invest_iande_work Investment Performance each year invest-p- yyyy .tsv tbl_invest_actl[^7] Roth-contributions2 all years roth_contributions.tsv tbl_roth_contributions Transfers BKG detailed full years trans_bkg.tsv tbl_bank_sel_invest[^10] Transfers to Investment Accounts by Year full years invest-x.tsv tbl_invest_actl Transfers-to-fcast[^9] full years transfers.tsv tbl_transfers_actl API key The system copies the inflation data to faciliatate planning. To do this an API key is needed. This is free they only want an email address. Register here: https://data.bls.gov/registrationEngine/ . The API key should be stored in ./private/api_keys.yml. The rows of this file are expected to be simply a site code and the key value, such as below: bls: 7b50d7a727104578b1ac86bc27caff3f The setup control file The control file is dance/data/setup.yaml . Global Settings The following values are global in nature: Item Purpose Example start_year Integer of 1st year to use for time series 2018 end_year Last Year of the time series 2030 year_column_width Column size for years 12 first_forecast_year First year that is considered a forecast. Prior years are considered actual 2022 zoom_scale Scaling factor for all sheets 135 # how to scale the worksheets bank_interest Moneydance category used to convey bank interest to the account balances Income:I:Invest income:Int:Bank Sheet groups Sheets are grouped together in sheet groups using the sheet_group definitions. Each sheet is assigned to a group and thus shares the color and table style. Sheets This section defines the layout and sometimes the data to be loaded into the sheet. It is a list of definition of each sheet. So at that level it looks like: sheets: accounts: balances: iande: ... Table Definitions Within each sheet are the list of tables. Most sheets only have one. Here's an example with two: retireparms: sheet_group: retirement tables: - name: tbl_retire_parms - name: tbl_pens_facts By convention all the table names start with tbl_ . The table definition consists of various fields, some of which are optional and/or defaulted. Item Purpose Default title The title that is place above the table in Excel columns A list of the column definitions (name and width) that are included before the time title_row When there is more than one table, locates this table on the sheet. If tables are spread horizontally, then subsequent tables will need an entry. 1 for the first table, then automatically places a space before the next table. start_col The first column of the table on the sheet (A=1,B=2...) 1 include_years True if there is a time series for the years False hidden A list of columns to hide Show every column data definitions where to get the data for the initial load Don't load data actl_formulas Specify formulas for actuals. fcst_formulas Specify formulas for forecast periods. highlights Specify Excel conditional formatting dyno_fields a way to determine values at build time Data definitions The data definitions are purpose built to support the target table, but there are some elements that are common. Some data definitions are closely related, so, to prevent duplication, the yaml reference/override notation is used (& and *). Item Purpose Use context source local to reference local files; remote to pull data over internet. remote to pull data over internet. internal is used to create the table/sheet cross reference. type These codes are used by the program select the processing logic to use. See supported types local path path relative to project folder for local sources, the path and name of the primary input file file_sets for items that require additional files, one or more sets of files are defined. Each file set has a name and a value of the base_path which is a folder name with the trailing slash. Valid names are \"balances\" and \"performance\" group Specific Moneydance groupings to include. Moneydance uses these to categorize accounts. Its things like: Assets, Bank Accounts, Credit Cards... Accounts, Balances no_details_for For these groupings create rows only at the grouping level, no details. Investments here means to summarize to the investment level and don't carry over the securities. Accounts include_zeros Accounts listed here will be carried over even if the balance is zero Accounts tax_free_keys Mark the accounts that are not subject to current income tax Accounts site_code BLS, or FEDREG. Used to determine which site to reference remote api_key If needed. A reference to the api_key which is stored in ./private/api_keys.yml remote table Defines how to locate a table in HTML remote table.find_method caption - only supported method remote table.method_parameters parameters for the method, specifically the text to search for in the caption. remote hier_insert_paths Some line items are do not yet exist or are not yet populated in Moneydance. This is a way to insert them within the hierarchy so they can be used for forecasting. iande Supported Types Type Purpose md_acct Processes the account extract from Moneydance md_bal Processes the balances extract from Moneydance md_iande_actl Processes the income and expense extract from Moneydance to create the iande and iande_actl sheets md_transfers_actl Sets up the non-investment actual transfers md_invest_actl Sets up the investment actual transfers json_index Imports entire table previously exported via dance/util/extract_table.py using the -o index option. Suitable when the table has a unique key. json_records Imports entire table previously exported via dance/util/extract_table.py using the -o index option. Suitable when the table does not have a unique key. tax_template Prepares the taxes worksheet Inserting Rows for Future Use The income and expense report in MoneyDance filters out categories that have no transactions. This leads to a need to insert those rows in the tbl_iande and tbl_iande_actl tables. For example, future social security payouts should subtotal into retirement income. An optional key is used to define these rows. The specification needs to contain the full hiearchy information so that it can be inserted into the right place. At run time these are checked against the existing items and added only if not already there. data: ... hier_insert_paths: - Income: \"Income:I:Retirement income:Social Security:SS-G\" - Income: \"Income:I:Retirement income:Social Security:SS-V\" Include only those lines that are not headings or totals; those will be constructed and inserted as well as the specified data lines. Actual and Forecast Formulas There are two optional keys to allow formulas to be established for the years section: actl_formulas and fcst_formulas . They work the same way but apply to different columns. Each section consists of a list of rules. The rules have the following parts: |Key word|Description| |---|---| |base_field|The name of the column that is used for matching| |matches|A list of values by which to match rows. This could match a single row or many rows.| |formula|The formula to use for the selected year columns (actual or forecast) |first_item|Optional. In some cases the first item or items of the series needs to be different. If supplied it may be a keyword skip . If it starts with = then it is a formula that will be used in the first place. Otherwise, it will be a constant or a list of constants separated by , . In that case it will be applied to the first n positions.| For example, if there is a key fcst_formulas under the table, it is used to set formulas for the forecast columns. Each column receives the same formula, but they can vary by row. The structure is setup like this: fcst_formulas: - base_field: ValType matches: - Rate formula: =.03 - base_field: ValType matches: - Add/Wdraw formula: =add_wdraw( [@AcctName],this_col_name()) - base_field: ... Build-time created fields Some tables need a way to determine values at build time. The dyno_fields section may be directly under the table. dyno_fields: - base_field: Account matches: - 401K - GBD - TRV - CHET - Fidelity actions: - target_field: Fcst_source suffix: \"- wdraw\" - target_field: Fcst_source_tab constant: tbl_aux - base_field: ... the matches list is a list of values to be matched agains the field. There is a special case if just a single *, meaning all. The target field should be previously defined, but it is filled in by this logic. The commands available are: - suffix - something added to the matched item - constant - a value that is always the same - formula - an Excel formula Formula Specifics Always start the formula with a leading equals sign. Constants are fine, but remember to use the leading equals sign Structured table references are supported and recommended. Refer to this column with the VBA function this_col_name() Many VBA functions are designed to be used in formulas Highlights For example the following puts a line between the actual and forecast periods. The anchor, (ampersand) allows other tables to use the same by using *past_future highlights: present: &past_future formula: =A$2=get_val(\"first_forecast\",\"tbl_gen_state\",\"Value\") # ref is to heading row border: edges: - left style: thin color: B50000 Specific Sheets & Tables Inflation You may want to consider a different series. The default is all items in U.S. city average, all urban consumers, not seasonally adjusted. Required minimum distributions At the time of writing the best source seems to be the Federal Register. This does not need to edited unless the source changes. Accounts The data section in the setup.yaml needs the following sub-sections: Item Description path Path from the project root where to find the saved report`. This should be one with all the accounts you wish to use. group this is a list of the summary levels you wish to use in your plan. The items can either be the categories that Moneydance uses such as Bank Accounts, or it can be summary accounts that you have created (accounts that have sub-accounts) no_details_for If you have summary accounts that cover all the items in a category, then you can use those instead of the leaf accounts. By listing the category hear the detail accounts will be ignored. include_zeros Usually zero balance accounts will be ignored. If the account is entered here, it will be carried forward. This can be useful if its a brand new account with no balance or if its an old account that had a balance in the historical period. tax_free_keys A list of keywords that will be used to determine how the tax status of the account will be initialized. Example: path: ./data/2022 Account Balances.tsv group: - Bank Accounts - Credit Cards - Real Estate - Other Asset - Liabilities - Mortgage Loans - Non Mort Loans no_details_for: - Assets - Loans include_zeros: - My old HSA - My old 401K tax_free_keys: - 401K - \"529\" - IRA [^1]: The most recent is best so as to contain all current accounts. This is used to create the Accounts worksheet. The balances are not used, except that when they are zero, the account will be ignored unless it is specifically mentiond in the include_zeros section of the YAML. [^2]: Another instance of the Account Balances is used to establish the opening balances on the Balances sheet. This may be for a different year. If an earlier file is used, history can be included in the Balances sheet. [^3]: All history years must be available in order to compute the flows to/from bank accounts and credit cards. [^4]: 529 Distributions depend on the tag 529-Distr being used to make distributions but not inheritance or transfers. Thus on the iande table it defrays the college expenses. [^5]: These data are used to compute medical payments made from HSA accounts by year. [^6]: This is a transaction filter report using the tag IRA-Txbl-Distr [^7]: This is a transaction filter that selects income and expense categories that are required to only apply to investments. [^8]: Investment actuals requires the transfers file and the performance files. It also depends on the data from the investment expenses to already be in place. [^9]: This requires that if the Passthru account is used, it must only be used to transfer funds to/from banks. In other words there is an assumption that it does not mask any movement to/from income or expense items. Those must be directly in the investment account. [^10]: Source accounts: All bank, credit card, income, expense and all HSA accounts. Target Accounts: All asset, liability & loan. The HSA accounts (a subset of investments) are needed since they sometimes transfer to the medical providers.","title":"Setting up the spreadsheet"},{"location":"setup/#setting-up-the-spreadsheet","text":"","title":"Setting up the spreadsheet"},{"location":"setup/#summary-of-steps","text":"Save certain reports from Moneydance to the data folder. Acquire a registration key for the bureau of labor statistics (for inflation data) Edit the control file: dance/setup/setup.yaml Run dance/setup/create_wb.py","title":"Summary of steps"},{"location":"setup/#conventions","text":"","title":"Conventions"},{"location":"setup/#file-types","text":"Set up files are either tab separated values with extension .tsv JSON with extension .json. These are typically exports from tables defined in Excel. There are two types depending on the 'orientation'. YAML - used for the setup config definitions","title":"File types"},{"location":"setup/#file-locations","text":"Files are in the data folder under the project. The data folder is not included in the git repository. To make more manageable, the files that have a version each year are placed in subfolders. The under the sub-folder the files are simply named yyyy .tsv. A listing of the files can be had with tree -PD '*.tsv' --prune data/","title":"File locations"},{"location":"setup/#file-names","text":"Preferred format uses hyphen not underscores or spaces to separate words. Abbreviations such as IRA and HSA are forced to lowercase, to aid sorting.","title":"File names"},{"location":"setup/#reports-and-their-files","text":"(Case sensitive sort to match Moneydance) Report Periods File(s) Used in config by Other file use 401, HSA, ESP payroll data full years payroll_to_savings.tsv tbl_payroll_savings 529-Distr[^4] all years 529-distr.tsv tbl_529_distr Account Balances each year acct-bals- yyyy .tsv tbl_accounts[^1], tbl_balances[^2] bank_actl_load.py[^3] HSA - disbursements - 2 full years hsa-disbursements.tsv tbl_hsa_disb[^5] IRA-Distr[^6] all years ira-distr.tsv tbl_ira_distr Income & Expense by Year full years iande.tsv tbl_iande,tbl_iande_actl Investment IandE[^7] full years invest-iande.tsv tbl_invest_iande_work Investment Performance each year invest-p- yyyy .tsv tbl_invest_actl[^7] Roth-contributions2 all years roth_contributions.tsv tbl_roth_contributions Transfers BKG detailed full years trans_bkg.tsv tbl_bank_sel_invest[^10] Transfers to Investment Accounts by Year full years invest-x.tsv tbl_invest_actl Transfers-to-fcast[^9] full years transfers.tsv tbl_transfers_actl","title":"Reports and their files"},{"location":"setup/#api-key","text":"The system copies the inflation data to faciliatate planning. To do this an API key is needed. This is free they only want an email address. Register here: https://data.bls.gov/registrationEngine/ . The API key should be stored in ./private/api_keys.yml. The rows of this file are expected to be simply a site code and the key value, such as below: bls: 7b50d7a727104578b1ac86bc27caff3f","title":"API key"},{"location":"setup/#the-setup-control-file","text":"The control file is dance/data/setup.yaml .","title":"The setup control file"},{"location":"setup/#global-settings","text":"The following values are global in nature: Item Purpose Example start_year Integer of 1st year to use for time series 2018 end_year Last Year of the time series 2030 year_column_width Column size for years 12 first_forecast_year First year that is considered a forecast. Prior years are considered actual 2022 zoom_scale Scaling factor for all sheets 135 # how to scale the worksheets bank_interest Moneydance category used to convey bank interest to the account balances Income:I:Invest income:Int:Bank","title":"Global Settings"},{"location":"setup/#sheet-groups","text":"Sheets are grouped together in sheet groups using the sheet_group definitions. Each sheet is assigned to a group and thus shares the color and table style.","title":"Sheet groups"},{"location":"setup/#sheets","text":"This section defines the layout and sometimes the data to be loaded into the sheet. It is a list of definition of each sheet. So at that level it looks like: sheets: accounts: balances: iande: ...","title":"Sheets"},{"location":"setup/#table-definitions","text":"Within each sheet are the list of tables. Most sheets only have one. Here's an example with two: retireparms: sheet_group: retirement tables: - name: tbl_retire_parms - name: tbl_pens_facts By convention all the table names start with tbl_ . The table definition consists of various fields, some of which are optional and/or defaulted. Item Purpose Default title The title that is place above the table in Excel columns A list of the column definitions (name and width) that are included before the time title_row When there is more than one table, locates this table on the sheet. If tables are spread horizontally, then subsequent tables will need an entry. 1 for the first table, then automatically places a space before the next table. start_col The first column of the table on the sheet (A=1,B=2...) 1 include_years True if there is a time series for the years False hidden A list of columns to hide Show every column data definitions where to get the data for the initial load Don't load data actl_formulas Specify formulas for actuals. fcst_formulas Specify formulas for forecast periods. highlights Specify Excel conditional formatting dyno_fields a way to determine values at build time","title":"Table Definitions"},{"location":"setup/#data-definitions","text":"The data definitions are purpose built to support the target table, but there are some elements that are common. Some data definitions are closely related, so, to prevent duplication, the yaml reference/override notation is used (& and *). Item Purpose Use context source local to reference local files; remote to pull data over internet. remote to pull data over internet. internal is used to create the table/sheet cross reference. type These codes are used by the program select the processing logic to use. See supported types local path path relative to project folder for local sources, the path and name of the primary input file file_sets for items that require additional files, one or more sets of files are defined. Each file set has a name and a value of the base_path which is a folder name with the trailing slash. Valid names are \"balances\" and \"performance\" group Specific Moneydance groupings to include. Moneydance uses these to categorize accounts. Its things like: Assets, Bank Accounts, Credit Cards... Accounts, Balances no_details_for For these groupings create rows only at the grouping level, no details. Investments here means to summarize to the investment level and don't carry over the securities. Accounts include_zeros Accounts listed here will be carried over even if the balance is zero Accounts tax_free_keys Mark the accounts that are not subject to current income tax Accounts site_code BLS, or FEDREG. Used to determine which site to reference remote api_key If needed. A reference to the api_key which is stored in ./private/api_keys.yml remote table Defines how to locate a table in HTML remote table.find_method caption - only supported method remote table.method_parameters parameters for the method, specifically the text to search for in the caption. remote hier_insert_paths Some line items are do not yet exist or are not yet populated in Moneydance. This is a way to insert them within the hierarchy so they can be used for forecasting. iande","title":"Data definitions"},{"location":"setup/#supported-types","text":"Type Purpose md_acct Processes the account extract from Moneydance md_bal Processes the balances extract from Moneydance md_iande_actl Processes the income and expense extract from Moneydance to create the iande and iande_actl sheets md_transfers_actl Sets up the non-investment actual transfers md_invest_actl Sets up the investment actual transfers json_index Imports entire table previously exported via dance/util/extract_table.py using the -o index option. Suitable when the table has a unique key. json_records Imports entire table previously exported via dance/util/extract_table.py using the -o index option. Suitable when the table does not have a unique key. tax_template Prepares the taxes worksheet","title":"Supported Types"},{"location":"setup/#inserting-rows-for-future-use","text":"The income and expense report in MoneyDance filters out categories that have no transactions. This leads to a need to insert those rows in the tbl_iande and tbl_iande_actl tables. For example, future social security payouts should subtotal into retirement income. An optional key is used to define these rows. The specification needs to contain the full hiearchy information so that it can be inserted into the right place. At run time these are checked against the existing items and added only if not already there. data: ... hier_insert_paths: - Income: \"Income:I:Retirement income:Social Security:SS-G\" - Income: \"Income:I:Retirement income:Social Security:SS-V\" Include only those lines that are not headings or totals; those will be constructed and inserted as well as the specified data lines.","title":"Inserting Rows for Future Use"},{"location":"setup/#actual-and-forecast-formulas","text":"There are two optional keys to allow formulas to be established for the years section: actl_formulas and fcst_formulas . They work the same way but apply to different columns. Each section consists of a list of rules. The rules have the following parts: |Key word|Description| |---|---| |base_field|The name of the column that is used for matching| |matches|A list of values by which to match rows. This could match a single row or many rows.| |formula|The formula to use for the selected year columns (actual or forecast) |first_item|Optional. In some cases the first item or items of the series needs to be different. If supplied it may be a keyword skip . If it starts with = then it is a formula that will be used in the first place. Otherwise, it will be a constant or a list of constants separated by , . In that case it will be applied to the first n positions.| For example, if there is a key fcst_formulas under the table, it is used to set formulas for the forecast columns. Each column receives the same formula, but they can vary by row. The structure is setup like this: fcst_formulas: - base_field: ValType matches: - Rate formula: =.03 - base_field: ValType matches: - Add/Wdraw formula: =add_wdraw( [@AcctName],this_col_name()) - base_field: ...","title":"Actual and Forecast Formulas"},{"location":"setup/#build-time-created-fields","text":"Some tables need a way to determine values at build time. The dyno_fields section may be directly under the table. dyno_fields: - base_field: Account matches: - 401K - GBD - TRV - CHET - Fidelity actions: - target_field: Fcst_source suffix: \"- wdraw\" - target_field: Fcst_source_tab constant: tbl_aux - base_field: ... the matches list is a list of values to be matched agains the field. There is a special case if just a single *, meaning all. The target field should be previously defined, but it is filled in by this logic. The commands available are: - suffix - something added to the matched item - constant - a value that is always the same - formula - an Excel formula","title":"Build-time created fields"},{"location":"setup/#formula-specifics","text":"Always start the formula with a leading equals sign. Constants are fine, but remember to use the leading equals sign Structured table references are supported and recommended. Refer to this column with the VBA function this_col_name() Many VBA functions are designed to be used in formulas","title":"Formula Specifics"},{"location":"setup/#highlights","text":"For example the following puts a line between the actual and forecast periods. The anchor, (ampersand) allows other tables to use the same by using *past_future highlights: present: &past_future formula: =A$2=get_val(\"first_forecast\",\"tbl_gen_state\",\"Value\") # ref is to heading row border: edges: - left style: thin color: B50000","title":"Highlights"},{"location":"setup/#specific-sheets-tables","text":"","title":"Specific Sheets &amp; Tables"},{"location":"setup/#inflation","text":"You may want to consider a different series. The default is all items in U.S. city average, all urban consumers, not seasonally adjusted.","title":"Inflation"},{"location":"setup/#required-minimum-distributions","text":"At the time of writing the best source seems to be the Federal Register. This does not need to edited unless the source changes.","title":"Required minimum distributions"},{"location":"setup/#accounts","text":"The data section in the setup.yaml needs the following sub-sections: Item Description path Path from the project root where to find the saved report`. This should be one with all the accounts you wish to use. group this is a list of the summary levels you wish to use in your plan. The items can either be the categories that Moneydance uses such as Bank Accounts, or it can be summary accounts that you have created (accounts that have sub-accounts) no_details_for If you have summary accounts that cover all the items in a category, then you can use those instead of the leaf accounts. By listing the category hear the detail accounts will be ignored. include_zeros Usually zero balance accounts will be ignored. If the account is entered here, it will be carried forward. This can be useful if its a brand new account with no balance or if its an old account that had a balance in the historical period. tax_free_keys A list of keywords that will be used to determine how the tax status of the account will be initialized. Example: path: ./data/2022 Account Balances.tsv group: - Bank Accounts - Credit Cards - Real Estate - Other Asset - Liabilities - Mortgage Loans - Non Mort Loans no_details_for: - Assets - Loans include_zeros: - My old HSA - My old 401K tax_free_keys: - 401K - \"529\" - IRA [^1]: The most recent is best so as to contain all current accounts. This is used to create the Accounts worksheet. The balances are not used, except that when they are zero, the account will be ignored unless it is specifically mentiond in the include_zeros section of the YAML. [^2]: Another instance of the Account Balances is used to establish the opening balances on the Balances sheet. This may be for a different year. If an earlier file is used, history can be included in the Balances sheet. [^3]: All history years must be available in order to compute the flows to/from bank accounts and credit cards. [^4]: 529 Distributions depend on the tag 529-Distr being used to make distributions but not inheritance or transfers. Thus on the iande table it defrays the college expenses. [^5]: These data are used to compute medical payments made from HSA accounts by year. [^6]: This is a transaction filter report using the tag IRA-Txbl-Distr [^7]: This is a transaction filter that selects income and expense categories that are required to only apply to investments. [^8]: Investment actuals requires the transfers file and the performance files. It also depends on the data from the investment expenses to already be in place. [^9]: This requires that if the Passthru account is used, it must only be used to transfer funds to/from banks. In other words there is an assumption that it does not mask any movement to/from income or expense items. Those must be directly in the investment account. [^10]: Source accounts: All bank, credit card, income, expense and all HSA accounts. Target Accounts: All asset, liability & loan. The HSA accounts (a subset of investments) are needed since they sometimes transfer to the medical providers.","title":"Accounts"},{"location":"vba_index/","text":"VBA Code Summary Function or Sub Signature and info acct_who1 Function acct_who1(acct As String, Optional num_chars As Integer = 1) As String Return the first initial of the owner of an account in format type - who - firm add_wdraw Function add_wdraw(acct As String, y_year As String) As Variant Get the actual or forecast transfers in (positive) our out(negative). Determines whether the year is actual or forecast, in order to determine the source from the accounts table.. For actuals returns the value from the source table.. For forecast, will add realized gains that are not re-invested. If source table is the retirement table, changes the sign. age_as_of_date Function age_as_of_date(inits As String, dt As Date) As Double Return the age attained by an account owner in a given year age_of Function age_of(inits As String, y_year As String) As Integer Return the age attained by an account owner in a given year agg Function agg(y_year As String, by_tag As Variant, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double Aggregate (default is sum) up the values in the table containing the calling cell for a year where the by_tag is found in the tag column.. Use of this can help avoid the hard coding of addresses into formulas. By default the tag column is \"tag\" but an alternate can be provided. Other agg_methods are \"min\" and \"max\" agg_table Function agg_table(tbl_name As String, y_year As String, by_tag As String, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double Aggregate (default is sum) up the values in the named table for a year where the by_tag is found in the tag column.. Use of this can help avoid the hard coding of addresses into formulas. By default the tag column is \"tag\" but an alternate can be provided. Other agg_methods are \"min\" and \"max\". A second and third criteria may be provided by extending the by_tag and the tag_col_name as follows:. A delimiter is included in the strings to allow two values to be provided.the delimiter is stile ( ANN Function ANN(account As String, account_owner As String, y_year As String) As Double Deprecated - use annuity instead. Return a year's value for an annuity stream based on the prior year's end balance. Does not properly handle partial years annuity Function annuity(account As String, y_year As String) As Double Return a year's value for an annuity stream based on the prior year's end balance. Fetches the start date, duration and annual annuity rate from tbl_retir_vals. Rounds to whole number bal_agg Function bal_agg(y_year As String, val_type As String, Optional acct_type As String = \"*\", Optional txbl As Integer = 1, Optional active As Integer = 1) As Double Get the sum of values from the balances table for a year and type, optionally further qualified by acct type,taxable status,active status. Wild cards are ok as are excel functions like \"<>\" prepended to the values for strings. Note all the criteria fields must have values - suggest using na if there is no value such as for an election. calc_retir Sub calc_retir() Iterate through the years to calc retirement streams based on balances from prior year. Prior balance from balances feeds current retirement, and current invest_iande_work. Retirement feeds aux,. Aux and invest_iande_work feeds current balances. Iande depends on retirement as well and taxes depend on iande calc_table Sub calc_table() Testing forced calc of table CT_Tax Function CT_Tax(tax_Year As Integer, taxable_Income As Double) As Double Calculate the ct income tax for a given year and taxable income amount. The so called initial tax calculation only.. Table is not setup exactly like federal - it uses the traditional method not the subraction method.. Gets a result of zero if year not in the table. d2s Function d2s(dt As Date) As String ei_withhold Function ei_withhold(legend As String, ei_template, y_year As String) As Double Compute annual social security or medicare withholding for earned income. Relies on naming conventions. Ei_template is a template for the line with earned income. % is replaced by the person indicator, which. Is the trailing part of the legend.. The legend has two parts separated by hyphen. the first part is the type of withholding. Which must be either: medicare or soc sec. Y_year is the column heading such as y2022 endbal Function endbal(acct As String, y_year As String) As Variant Compute the end balance for an account for a year extend_iiande Function extend_iiande(account As String, category As String, y_year As String) As Double For investment income and expense, use a ratio to the start balance to compute a forecast value for the income/expense item on this row. To be run in a cell in the invest_iande_work table. Fed_Tax_CapGn Function Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double Computes the resulting federal tax with capital gains portion at 15%. The input should include qualified dividends Federal_Tax Function Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double Calculate the federal income tax for a given year and taxable income amount. Gets a result of zero if year not in the table. gain Function gain(acct As String, y_year As String, realized As Boolean) As Variant For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast. Other types of accounts return zero.. For investments actuals, use the values from invest_actl. For bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table get_val Function get_val(line_key As Variant, tbl_name As String, col_name As String, Optional raise_bad_col = False) As Variant Fetches a value from a given table (it must be an actual worksheet table. If the line is not found in the table, a zero is returned.. Bad columns are usually logged, but if the argument raise_bad_col is true then an error is raised. IntYear Function IntYear(yval) As Integer Strips off the y on the argument (eg y2019) and returns an integer invest_fees Function invest_fees(acct As String, y_year As String) As Variant For investments, return the account fees for an account for a year for actual or forecast. Other types of accounts return zero.. For investments actuals, use the values from invest_iande_work is_forecast Function is_forecast(y_year As String) As Boolean Determine if this year is a forecast year last_two_parts Function last_two_parts(cat As String, Optional delim = \":\") As String Take the last two parts of a delimited string and return them as a new string with the delimiter. Missing parts will be set to zero lenght string linear Function linear(count As Integer, Optional minimum = 0) As Double Use the excel forecast linear function to extrapolate the value based on the prior values on this line.. Will use number of data points if they exist or fewer if that goes before the first year. The minimum is used to prevent values from going below that amount. Suitable only for year columns.. Due to trouble with the listobject function which makes values empty for cells with formulas, a work around is used. To determine the table name from the worksheet name.this should be ok for major tables which correspond by convention. log Sub log(txt As String) LUMP Function LUMP(account As String, y_year As String) As Double Return the expected lump sum payment for an account based on the prior year's end balance MedicarePrem Function MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year), return annual part b premium or part d surcharge (irmaa). Normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead.. B_or_d isa 1 for part b premium or 2 for part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly mo_apply Function mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date. The end date is a string since there is a bug in the mac excel.. The end date represents the month of the last period to include. the day is ignored and the last day of the month is used. nth_word_into Function nth_word_into(n As Integer, source As String, template As String) As String Insert the nth word (first is 0th) from source into the template, replacing % PartBPrem Function PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part b premium. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly PartDSurcharge Function PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly percent_year_worked Function percent_year_worked(initials As String) As Double Using the year of the current column and the data in the people table, return a number between 0 and 1. Indicating the percent of the year worked for the person with initials given prior_value Function prior_value(line As String) As Variant Get the prior years' value for this line. suitable only for year columns. ratio_to_start Function ratio_to_start(account As String, category As String, y_year As String) As Double For investment income and expense, compute the ratio to the start balance, but use the prior end balance since. That should have already been computed. this allows the table to occur before the balances table in the compute order. To be run in a cell in the invest_iande_work table. reinv_amt Function reinv_amt(acct_name As String, y_year As String) As Double Compute the reinvestment amount for an account and year. retir_parm Function retir_parm(code As String, who As String) As Variant Get a retirement paramenter given code and code (g or v) RMD_1 Function RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double Return the req minimum distribution table 1 result for a year for a given account, owner (gbd or vec) and year.. If death year is not given then this function treat this as spousal inheritance. If death year is given the treat this as a beneficiary inheritance rolling_avg Function rolling_avg(Optional max_value As Variant = Null, Optional lookback As Integer = 5, Optional table As String = \"\", Optional key As String = \"\", Optional this_y_year As String = \"\") As Double Look back at previous columns and average the numeric values found there, ignoring items before 2018, but including zeros. Max_value if provided is used instead of any higher values. Lookback is defaulted to 5 years. If not provided, table, key and y_year are taken from the calling cell. Return the average. returns 0 if the count of valid items is 0. simple_return Function simple_return(account As String, y_year As String) As Double Return the rlzd gain divided by the average of the start and end balances (or zero) sort_tax_table Function sort_tax_table() Make sure the federal tax tables are sorted properly test_fed_tax Sub test_fed_tax() test_get_val Sub test_get_val() test_LUMP Sub test_LUMP() test_medicarePrem Sub test_medicarePrem() test_mo_apply Sub test_mo_apply() test_nth Sub test_nth() test_sort Sub test_sort() this_col_name Function this_col_name() As String Return the caller's column name, assuming the cell is in a table.. Otherwise generates a #value error. Use to make formulas more portable unrlz Function unrlz(acct As String, y_year As String) As Variant Compute the unrealized gain or loss for an account for a year, assuming end bal is fixed ws_for_table_name Function ws_for_table_name(tbl_name As String) As String Find out what worksheet the named table occurs on y_offset Function y_offset(y_year As String, offset As Integer) As String Given a y_year offset it by the amount given, producing a new y_year","title":"VBA Code Summary"},{"location":"vba_index/#vba-code-summary","text":"Function or Sub Signature and info acct_who1 Function acct_who1(acct As String, Optional num_chars As Integer = 1) As String Return the first initial of the owner of an account in format type - who - firm add_wdraw Function add_wdraw(acct As String, y_year As String) As Variant Get the actual or forecast transfers in (positive) our out(negative). Determines whether the year is actual or forecast, in order to determine the source from the accounts table.. For actuals returns the value from the source table.. For forecast, will add realized gains that are not re-invested. If source table is the retirement table, changes the sign. age_as_of_date Function age_as_of_date(inits As String, dt As Date) As Double Return the age attained by an account owner in a given year age_of Function age_of(inits As String, y_year As String) As Integer Return the age attained by an account owner in a given year agg Function agg(y_year As String, by_tag As Variant, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double Aggregate (default is sum) up the values in the table containing the calling cell for a year where the by_tag is found in the tag column.. Use of this can help avoid the hard coding of addresses into formulas. By default the tag column is \"tag\" but an alternate can be provided. Other agg_methods are \"min\" and \"max\" agg_table Function agg_table(tbl_name As String, y_year As String, by_tag As String, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double Aggregate (default is sum) up the values in the named table for a year where the by_tag is found in the tag column.. Use of this can help avoid the hard coding of addresses into formulas. By default the tag column is \"tag\" but an alternate can be provided. Other agg_methods are \"min\" and \"max\". A second and third criteria may be provided by extending the by_tag and the tag_col_name as follows:. A delimiter is included in the strings to allow two values to be provided.the delimiter is stile ( ANN Function ANN(account As String, account_owner As String, y_year As String) As Double Deprecated - use annuity instead. Return a year's value for an annuity stream based on the prior year's end balance. Does not properly handle partial years annuity Function annuity(account As String, y_year As String) As Double Return a year's value for an annuity stream based on the prior year's end balance. Fetches the start date, duration and annual annuity rate from tbl_retir_vals. Rounds to whole number bal_agg Function bal_agg(y_year As String, val_type As String, Optional acct_type As String = \"*\", Optional txbl As Integer = 1, Optional active As Integer = 1) As Double Get the sum of values from the balances table for a year and type, optionally further qualified by acct type,taxable status,active status. Wild cards are ok as are excel functions like \"<>\" prepended to the values for strings. Note all the criteria fields must have values - suggest using na if there is no value such as for an election. calc_retir Sub calc_retir() Iterate through the years to calc retirement streams based on balances from prior year. Prior balance from balances feeds current retirement, and current invest_iande_work. Retirement feeds aux,. Aux and invest_iande_work feeds current balances. Iande depends on retirement as well and taxes depend on iande calc_table Sub calc_table() Testing forced calc of table CT_Tax Function CT_Tax(tax_Year As Integer, taxable_Income As Double) As Double Calculate the ct income tax for a given year and taxable income amount. The so called initial tax calculation only.. Table is not setup exactly like federal - it uses the traditional method not the subraction method.. Gets a result of zero if year not in the table. d2s Function d2s(dt As Date) As String ei_withhold Function ei_withhold(legend As String, ei_template, y_year As String) As Double Compute annual social security or medicare withholding for earned income. Relies on naming conventions. Ei_template is a template for the line with earned income. % is replaced by the person indicator, which. Is the trailing part of the legend.. The legend has two parts separated by hyphen. the first part is the type of withholding. Which must be either: medicare or soc sec. Y_year is the column heading such as y2022 endbal Function endbal(acct As String, y_year As String) As Variant Compute the end balance for an account for a year extend_iiande Function extend_iiande(account As String, category As String, y_year As String) As Double For investment income and expense, use a ratio to the start balance to compute a forecast value for the income/expense item on this row. To be run in a cell in the invest_iande_work table. Fed_Tax_CapGn Function Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double Computes the resulting federal tax with capital gains portion at 15%. The input should include qualified dividends Federal_Tax Function Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double Calculate the federal income tax for a given year and taxable income amount. Gets a result of zero if year not in the table. gain Function gain(acct As String, y_year As String, realized As Boolean) As Variant For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast. Other types of accounts return zero.. For investments actuals, use the values from invest_actl. For bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table get_val Function get_val(line_key As Variant, tbl_name As String, col_name As String, Optional raise_bad_col = False) As Variant Fetches a value from a given table (it must be an actual worksheet table. If the line is not found in the table, a zero is returned.. Bad columns are usually logged, but if the argument raise_bad_col is true then an error is raised. IntYear Function IntYear(yval) As Integer Strips off the y on the argument (eg y2019) and returns an integer invest_fees Function invest_fees(acct As String, y_year As String) As Variant For investments, return the account fees for an account for a year for actual or forecast. Other types of accounts return zero.. For investments actuals, use the values from invest_iande_work is_forecast Function is_forecast(y_year As String) As Boolean Determine if this year is a forecast year last_two_parts Function last_two_parts(cat As String, Optional delim = \":\") As String Take the last two parts of a delimited string and return them as a new string with the delimiter. Missing parts will be set to zero lenght string linear Function linear(count As Integer, Optional minimum = 0) As Double Use the excel forecast linear function to extrapolate the value based on the prior values on this line.. Will use number of data points if they exist or fewer if that goes before the first year. The minimum is used to prevent values from going below that amount. Suitable only for year columns.. Due to trouble with the listobject function which makes values empty for cells with formulas, a work around is used. To determine the table name from the worksheet name.this should be ok for major tables which correspond by convention. log Sub log(txt As String) LUMP Function LUMP(account As String, y_year As String) As Double Return the expected lump sum payment for an account based on the prior year's end balance MedicarePrem Function MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year), return annual part b premium or part d surcharge (irmaa). Normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead.. B_or_d isa 1 for part b premium or 2 for part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly mo_apply Function mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date. The end date is a string since there is a bug in the mac excel.. The end date represents the month of the last period to include. the day is ignored and the last day of the month is used. nth_word_into Function nth_word_into(n As Integer, source As String, template As String) As String Insert the nth word (first is 0th) from source into the template, replacing % PartBPrem Function PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part b premium. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly PartDSurcharge Function PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation. inflation is given as 1.0x so it can be used directly percent_year_worked Function percent_year_worked(initials As String) As Double Using the year of the current column and the data in the people table, return a number between 0 and 1. Indicating the percent of the year worked for the person with initials given prior_value Function prior_value(line As String) As Variant Get the prior years' value for this line. suitable only for year columns. ratio_to_start Function ratio_to_start(account As String, category As String, y_year As String) As Double For investment income and expense, compute the ratio to the start balance, but use the prior end balance since. That should have already been computed. this allows the table to occur before the balances table in the compute order. To be run in a cell in the invest_iande_work table. reinv_amt Function reinv_amt(acct_name As String, y_year As String) As Double Compute the reinvestment amount for an account and year. retir_parm Function retir_parm(code As String, who As String) As Variant Get a retirement paramenter given code and code (g or v) RMD_1 Function RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double Return the req minimum distribution table 1 result for a year for a given account, owner (gbd or vec) and year.. If death year is not given then this function treat this as spousal inheritance. If death year is given the treat this as a beneficiary inheritance rolling_avg Function rolling_avg(Optional max_value As Variant = Null, Optional lookback As Integer = 5, Optional table As String = \"\", Optional key As String = \"\", Optional this_y_year As String = \"\") As Double Look back at previous columns and average the numeric values found there, ignoring items before 2018, but including zeros. Max_value if provided is used instead of any higher values. Lookback is defaulted to 5 years. If not provided, table, key and y_year are taken from the calling cell. Return the average. returns 0 if the count of valid items is 0. simple_return Function simple_return(account As String, y_year As String) As Double Return the rlzd gain divided by the average of the start and end balances (or zero) sort_tax_table Function sort_tax_table() Make sure the federal tax tables are sorted properly test_fed_tax Sub test_fed_tax() test_get_val Sub test_get_val() test_LUMP Sub test_LUMP() test_medicarePrem Sub test_medicarePrem() test_mo_apply Sub test_mo_apply() test_nth Sub test_nth() test_sort Sub test_sort() this_col_name Function this_col_name() As String Return the caller's column name, assuming the cell is in a table.. Otherwise generates a #value error. Use to make formulas more portable unrlz Function unrlz(acct As String, y_year As String) As Variant Compute the unrealized gain or loss for an account for a year, assuming end bal is fixed ws_for_table_name Function ws_for_table_name(tbl_name As String) As String Find out what worksheet the named table occurs on y_offset Function y_offset(y_year As String, offset As Integer) As String Given a y_year offset it by the amount given, producing a new y_year","title":"VBA Code Summary"},{"location":"vba_sorted/","text":"VBA Code Attribute VB_Name = \"Module1\" Public Const dbg As Boolean = False Option Base 0 Function acct_who1(acct As String, Optional num_chars As Integer = 1) As String 'return the first initial of the owner of an account in format type - who - firm Dim parts() As String parts = Split(acct, \" - \") who = parts(1) acct_who1 = Left(who, num_chars) End Function Function add_wdraw(acct As String, y_year As String) As Variant 'Get the actual or forecast transfers in (positive) our out(negative) 'Determines whether the year is actual or forecast, in order to determine the source from the Accounts table. 'For actuals returns the value from the source table. 'For forecast, will add realized gains that are not re-invested 'If source table is the retirement table, changes the sign. Dim line As String, tbl As String, prefix As String Dim rlz As Double, reinv As Double, wdraw As Double Dim no_distr_plan As Integer is_fcst = is_forecast(y_year) prefix = \"Actl\" If is_fcst Then prefix = \"Fcst\" value = 0 acct_type = get_val(acct, \"tbl_accounts\", \"Type\") tbl = get_val(acct, \"tbl_accounts\", prefix & \"_source_tab\") 'logic to switch sign for retirement sign = 1 If tbl = \"tbl_retir_vals\" Then sign = -1 End If line = get_val(acct, \"tbl_accounts\", prefix & \"_source\") If (\"I\" = acct_type) And Not is_fcst Then line = \"add/wdraw\" & line ' complete key for investment actuals If line <> \"zero\" Then ' keyword to enable forecasting of zeros value = get_val(line, tbl, y_year) value = value * sign End If If \"I\" = acct_type Then 'determine amount to withdraw based on reinv rate If is_fcst Then rlz = get_val(\"Rlz Int/Gn\" & acct, \"tbl_balances\", y_year) no_distr_plan = get_val(acct, \"tbl_accounts\", \"No Distr Plan\") reinv = Round(no_distr_plan * rlz * get_val(\"Reinv Rate\" & acct, \"tbl_balances\", y_year), 0) wdraw = -Round(rlz - reinv) value = value + wdraw End If End If add_wdraw = value End Function Function age_as_of_date(inits As String, dt As Date) As Double 'return the age attained by an account owner in a given year Dim dob As Date, eoy As Date Dim diff As Double, age As Double dob = get_val(inits, \"tbl_people\", \"DOB\") diff = (dt - dob) / 365.25 age = Application.WorksheetFunction.Round(diff, 3) age_as_of_date = age End Function Function age_of(inits As String, y_year As String) As Integer 'return the age attained by an account owner in a given year Dim dob As Date, eoy As Date Dim diff As Double, age As Integer dob = get_val(inits, \"tbl_people\", \"DOB\") eoy = DateSerial(IntYear(y_year), 12, 31) diff = (eoy - dob) / 365.25 age = Int(Application.WorksheetFunction.RoundDown(diff, 0)) age_of = age End Function Function agg(y_year As String, by_tag As Variant, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double ' Aggregate (default is sum) up the values in the table containing the calling cell for a year where the by_tag is found in the tag column. ' Use of this can help avoid the hard coding of addresses into formulas ' By default the tag column is \"tag\" but an alternate can be provided ' Other agg_methods are \"min\" and \"max\" Dim agg_val As Double Dim tbl As ListObject Dim point As Range, val_rng As Range, tag_col As Range Set point = Application.caller Set tbl = point.ListObject Set tag_rng = tbl.ListColumns(tag_col_name).Range Set val_rng = tbl.ListColumns(y_year).Range Select Case agg_method Case \"sum\" agg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rng, by_tag) Case \"min\" agg_val = Application.WorksheetFunction.MinIfs(val_rng, tag_rng, by_tag) Case \"max\" agg_val = Application.WorksheetFunction.MaxIfs(val_rng, tag_rng, by_tag) End Select agg = agg_val End Function Function agg_table(tbl_name As String, y_year As String, by_tag As String, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double ' Aggregate (default is sum) up the values in the named table for a year where the by_tag is found in the tag column. ' Use of this can help avoid the hard coding of addresses into formulas ' By default the tag column is \"tag\" but an alternate can be provided ' Other agg_methods are \"min\" and \"max\" ' A second and third criteria may be provided by extending the by_tag and the tag_col_name as follows: ' A delimiter is included in the strings to allow two values to be provided.The delimiter is stile (|) ' The there should be exactly 0 or 1 or 2 delimiters, andthe by_tag and tag_column_name should agree Dim agg_val As Double Dim tbl As ListObject Dim point As Range, val_rng As Range, tag_rngs() As Range Dim by_tags() As String, tag_col_names() As String, by_tags_v As Variant On Error GoTo ErrHandler delim = \"|\" by_tags = Split(by_tag, delim) tag_col_names = Split(tag_col_name, delim) Set point = Application.caller ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set val_rng = tbl.ListColumns(y_year).Range ReDim tag_rngs(UBound(by_tags)) ReDim by_tags_v(UBound(by_tags)) For I = LBound(by_tags) To UBound(by_tags) Set tag_rngs(I) = tbl.ListColumns(tag_col_names(I)).Range If IsNumeric(by_tags(I)) Then by_tags_v(I) = CInt(by_tags(I)) Else by_tags_v(I) = by_tags(I) End If Next I Select Case agg_method Case \"sum\" Select Case UBound(by_tags) Case 0 agg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rngs(0), by_tags_v(0)) Case 1 agg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rngs(0), by_tags_v(0), tag_rngs(1), by_tags_v(1)) Case 2 agg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rngs(0), by_tags_v(0), tag_rngs(1), by_tags_v(1), tag_rngs(2), by_tags_v(2)) End Select Case \"min\" agg_val = Application.WorksheetFunction.MinIfs(val_rng, tag_rngs(0), by_tags(0)) Case \"max\" agg_val = Application.WorksheetFunction.MaxIfs(val_rng, tag_rngs(0), by_tags(0)) End Select agg_table = agg_val Exit Function ErrHandler: log (\"[ \" & point.address & \" ] agg_table: \" & Err.Number & \" \" & Err.Description) End Function Function ANN(account As String, account_owner As String, y_year As String) As Double 'DEPRECATED - USE annuity instead 'return a year's value for an annuity stream based on the prior year's end balance 'does not properly handle partial years Dim this_year As Integer, age As Integer Dim prior_end_bal As Double, term As Double, result As Double, anny_rate As Double, anny_dur As Double Dim anny_start As Date, o1 As String, n As Integer Dim dur_parm As String this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) age = age_of(account_owner, y_year) - 1 o1 = Left(account_owner, 1) anny_rate = get_val(\"anny_rate\", \"tbl_retir_parms\", o1) dur_parm = \"anny_dur\" ' hack picks different duration for roth If InStr(account, \"Roth\") > 0 Then dur_parm = \"roth_dur\" anny_dur = get_val(dur_parm, \"tbl_retir_parms\", o1) anny_start = get_val(\"anny_start\", \"tbl_retir_parms\", o1) n = anny_dur - (this_year - year(anny_start)) result = 0 If n > 0 Then result = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal) End If ANN = result End Function Function annuity(account As String, y_year As String) As Double 'return a year's value for an annuity stream based on the prior year's end balance 'fetches the start date, duration and annual annuity rate from tbl_retir_vals 'rounds to whole number Dim anny_start As Date Dim duration As Integer, this_year As Integer Dim annual_rate As Double, anny_rate As Double this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) anny_start = get_val(account, \"tbl_retir_vals\", \"Start Date\") duration = get_val(account, \"tbl_retir_vals\", \"Anny Dur Yrs\") anny_rate = get_val(account, \"tbl_retir_vals\", \"Anny Rate\") n = duration - (this_year - year(anny_start)) result = 0 If n > 0 Then result = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal) factor = mo_apply(anny_start, y_year) ' TODO put end date on this call result = factor * result result = Application.WorksheetFunction.Round(result, 0) End If annuity = result End Function Function bal_agg(y_year As String, val_type As String, Optional acct_type As String = \"*\", Optional txbl As Integer = 1, Optional active As Integer = 1) As Double 'get the sum of values from the balances table for a year and type, optionally further qualified by acct type,taxable status,active status 'wild cards are OK as are Excel functions like \"<>\" prepended to the values for strings 'NOTE all the criteria fields must have values - suggest using NA if there is no value such as for an election. Dim this_year As Integer, tbl_name As String Dim result As Double Dim tbl As ListObject, crit_col1 As ListColumn, crit_col2 As ListColumn, val_col As ListColumn Dim criteria1 As String, criteria2 As String tbl_name = \"tbl_balances\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set crit_col1 = tbl.ListColumns(\"ValType\") Set crit_col2 = tbl.ListColumns(\"Type\") Set crit_col3 = tbl.ListColumns(\"Income Txbl\") Set crit_col4 = tbl.ListColumns(\"Active\") Set val_col = tbl.ListColumns(y_year) result = Application.WorksheetFunction.SumIfs(val_col.Range, _ crit_col1.Range, val_type, _ crit_col2.Range, acct_type, _ crit_col3.Range, txbl, _ crit_col4.Range, active) bal_agg = result End Function Sub calc_retir() 'iterate through the years to calc retirement streams based on balances from prior year 'prior balance from balances feeds current retirement, and current invest_iande_work 'retirement feeds aux, 'aux and invest_iande_work feeds current balances 'iande depends on retirement as well and taxes depend on iande Dim rcols As Range, rcell As Range, single_cell As Range Dim tbls() As ListObject Dim tbl_names() As String, ws_names() As String Dim msg As String, formula As String log (\"-----------------------------\") log (\"Entering manual calculation mode.\") Application.Calculation = xlCalculationManual tbl_names = Split(\"tbl_retir_vals;tbl_aux;tbl_invest_iande_work;tbl_balances;tbl_iande;tbl_taxes\", \";\") k = UBound(tbl_names) ReDim tbls(k), ws_names(k) msg = \"\" For I = LBound(tbl_names) To k ws_names(I) = ws_for_table_name(tbl_names(I)) Set tbls(I) = ThisWorkbook.Worksheets(ws_names(I)).ListObjects(tbl_names(I)) If Len(msg) > 0 Then msg = msg & \",\" If I = UBound(tbl_names) Then msg = msg & \" and \" msg = msg & ws_names(I) Next I Set rcols = tbls(0).HeaderRowRange Set col = tbls(0).ListColumns(\"yearly\") col.Range.Dirty col.Range.Calculate log (\"Retirement yearly column refreshed.\") For Each rcell In rcols If InStr(rcell.value, \"Y20\") = 1 Then log (\"Calculating for \" & rcell.value) For I = LBound(tbls) To UBound(tbls) Set col = tbls(I).ListColumns(rcell.value) t_name = tbls(I).Name Application.StatusBar = rcell.value & \":\" & t_name log (\" \" & t_name & \" - Range \" & col.Range.address) If dbg Then For Each single_cell In col.Range.Cells formula = single_cell.formula If 0 < Len(formula) Then If Left(formula, 1) = \"=\" Then log (\" \" & single_cell.address & \": \" & formula) single_cell.Dirty single_cell.Calculate End If End If Next Else col.Range.Dirty col.Range.Calculate End If Next I End If Next rcell log (\"Entering automatic calculation mode.\") Application.StatusBar = \"\" log (\"-----------------------------\") Application.Calculation = xlCalculationAutomatic End Sub Sub calc_table() 'Testing forced calc of table Dim rcols As Range, rcell As Range Dim tbl As ListObject Dim tbl_name As String Dim ws_name As String Dim msg As String log (\"-----------------------------\") log (\"Entering manual calculation mode.\") Application.Calculation = xlCalculationManual tbl_name = \"tbl_balances\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) tbl.Range.Dirty tbl.Range.Calculate log (tbl_name & \" refreshed.\") log (\"Entering automatic calculation mode.\") log (\"-----------------------------\") Application.Calculation = xlCalculationAutomatic End Sub Function CT_Tax(tax_Year As Integer, taxable_Income As Double) As Double 'Calculate the CT income tax for a given year and taxable income amount 'The so called Initial Tax Calculation only. 'Table is not setup exactly like Federal - it uses the traditional method not the subraction method. 'gets a result of zero if year not in the table. Dim result As Double Dim tbl_name As String Dim tbl As ListObject Dim lr As ListRow Dim rng As Range Dim yr As Integer Dim ti As Double, rt As Double, base As Double tbl_name = \"tbl_ct_tax\" ws = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) result = 0 prior = 0 For Each lr In tbl.ListRows() Set rng = lr.Range yr = rng.Cells(1, 1).value ti = rng.Cells(1, 2).value rt = rng.Cells(1, 3).value base = rng.Cells(1, 4).value If tax_Year = yr Then If taxable_Income < ti And taxable_Income >= prior Then result = base + (rt * (taxable_Income - prior)) result = Round(result, 0) End If prior = ti End If Next lr CT_Tax = result End Function Function d2s(dt As Date) As String d2s = Format(dt, \"mm/dd/yyyy\") End Function Function ei_withhold(legend As String, ei_template, y_year As String) As Double ' compute annual social security or medicare withholding for earned income ' relies on naming conventions ' ei_template is a template for the line with earned income. % is replaced by the person indicator, which ' is the trailing part of the legend. ' the legend has two parts separated by hyphen. The first part is the type of withholding ' which must be either: Medicare or Soc Sec ' y_year is the column heading such as Y2022 Dim result As Double, earned As Double Dim rate As Variant, cap As Variant Dim legend_parts() As String Dim typ As String, ei_line As String, y_rate_year As String legend_parts = Split(legend, \"-\") typ = Trim(legend_parts(LBound(legend_parts))) who = Trim(legend_parts(UBound(legend_parts))) ei_line = Replace(ei_template, \"%\", who) earned = get_val(ei_line, \"tbl_iande\", y_year) ffy = get_val(\"first_forecast\", \"tbl_gen_state\", \"value\") lay = -1 + IntYear(ffy) rate_year = Application.WorksheetFunction.Min(lay, IntYear(y_year)) y_rate_year = \"Y\" & CStr(rate_year) Select Case typ Case \"Soc Sec\": cap = get_val(\"Social Security Wage Cap\", \"tbl_manual_actl\", y_rate_year) rate = get_val(\"Social Security FICA rate\", \"tbl_manual_actl\", y_rate_year) result = rate * Application.WorksheetFunction.Min(cap, earned) Case \"Medicare\": rate = get_val(\"Medicare withholding rate\", \"tbl_manual_actl\", y_rate_year) result = rate * earned End Select ei_withhold = result End Function Function endbal(acct As String, y_year As String) As Variant 'compute the end balance for an account for a year Dim rate As Variant Dim val As Variant open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) adds = get_val(\"Add/Wdraw\" & acct, \"tbl_balances\", y_year) reinv = get_val(\"Reinv Amt\" & acct, \"tbl_balances\", y_year) fees = get_val(\"Fees\" & acct, \"tbl_balances\", y_year) unrlzd = get_val(\"Unrlz Gn/Ls\" & acct, \"tbl_balances\", y_year) val = open_bal + adds + reinv + unrlzd + fees endbal = val End Function Function extend_iiande(account As String, category As String, y_year As String) As Double 'For investment income and expense, use a ratio to the start balance to compute a forecast value for the income/expense item on this row 'To be run in a cell in the invest_iande_work table. Dim work_table As String, bal_table As String Dim key As Variant Dim start_bal As Double, rate As Double, value As Double work_table = Application.caller.ListObject.Name bal_table = \"tbl_balances\" start_bal = get_val(\"End Bal\" + account, bal_table, y_offset(y_year, -1)) key = account + \":\" + category + \":rate\" rate = get_val(key, work_table, y_year) value = rate * start_bal extend_iiande = value End Function Function Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double 'computes the resulting federal tax with capital gains portion at 15% 'the input should include qualified dividends Dim base As Double, result As Double, cgt As Double base = Federal_Tax(tax_Year, taxable_Income - totCapGn) cgt = 0.15 * totCapGn result = base + cgt Fed_Tax_CapGn = result End Function Function Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double 'Calculate the federal income tax for a given year and taxable income amount 'gets a result of zero if year not in the table. Dim result As Double Dim tbl_name As String Dim tbl As ListObject Dim lr As ListRow Dim rng As Range Dim yr As Integer Dim ti As Double Dim rt As Double Dim sb As Double tbl_name = \"tbl_fed_tax\" ws = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) result = 0 For Each lr In tbl.ListRows() Set rng = lr.Range yr = rng.Cells(1, 1).value ti = rng.Cells(1, 2).value rt = rng.Cells(1, 3).value sb = rng.Cells(1, 4).value If tax_Year = yr Then If taxable_Income > ti Then result = (rt * taxable_Income) - sb result = Round(result, 0) End If End If Next lr Federal_Tax = result End Function Function gain(acct As String, y_year As String, realized As Boolean) As Variant 'For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast 'Other types of accounts return zero. ' for investments actuals, use the values from invest_actl ' for bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table Dim rate As Variant Dim val As Variant Dim col_name As String Dim interest_row As String account_type = get_val(acct, \"tbl_accounts\", \"Type\") Select Case account_type Case \"I\", \"B\" is_fcst = is_forecast(y_year) Select Case is_fcst Case True Select Case account_type Case \"I\" Select Case realized Case True val = agg_table(\"tbl_invest_iande_work\", y_year, acct & \"|value|I\", , \"Account|Type|IorE\") Case False ' Unrlz Gn open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) rate = get_val(\"Mkt Gn Rate\" & acct, \"tbl_balances\", y_year) val = open_bal * rate End Select Case \"B\" Select Case realized Case True open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) rate = get_val(\"Mkt Gn Rate\" & acct, \"tbl_balances\", y_year) val = open_bal * rate Case False ' Unrlz Gn val = 0 End Select End Select Case False ' actuals Select Case account_type Case \"I\" Select Case realized Case True val = get_val(\"Rlz Int/Gn\" & acct, \"tbl_invest_actl\", y_year) Case False val = get_val(\"Unrlz Gn/Ls\" & acct, \"tbl_invest_actl\", y_year) End Select Case \"B\" 'banks Select Case realized Case True interest_row = get_val(\"bank_interest\", \"tbl_gen_state\", \"value\") val = get_val(interest_row, \"tbl_iande\", y_year) Case False ' banks never have unrealized val = 0 End Select End Select End Select gain = val Case Else ' return zero if not investment or bank account gain = 0 End Select End Function Function get_val(line_key As Variant, tbl_name As String, col_name As String, Optional raise_bad_col = False) As Variant 'Fetches a value from a given table (it must be an actual worksheet table 'If the line is not found in the table, a zero is returned. 'Bad columns are usually logged, but if the argument raise_bad_col is True then an error is raised. Dim value As Variant, rng As Variant Dim caller As Range Dim address As String address = \"no addr\" On Error GoTo skip ' allow testing from outside of Excel Set caller = Application.caller() address = caller.Worksheet.Name & \"!\" & caller(1, 1).address skip: ws = ws_for_table_name(tbl_name) 'now get the data With ThisWorkbook.Worksheets(ws) Set rng = .ListObjects(tbl_name).HeaderRowRange Dim cr As Range On Error GoTo ErrHandler1 col = Application.WorksheetFunction.Match(col_name, rng, False) Set rng = .ListObjects(tbl_name).DataBodyRange On Error GoTo ErrHandler value = Application.WorksheetFunction.VLookup(line_key, rng, col, False) If IsEmpty(value) Then value = 0 End If End With get_val = value Exit Function ErrHandler: log (\"[\" & address & \" ] get_val: \" & line_key & \" not found in \" & tbl_name & \", using zero as value for \" & col_name) Dim lkRange As Range If False Then 'use this to debug missing lines. e.g. tbl_name = \"tbl_taxes\" Then Set lkRange = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name).ListColumns(1).DataBodyRange Debug.Print (lkRange.count) For Each c In lkRange.Cells log (c.value) Next End If get_val = 0 Exit Function ErrHandler1: If raise_bad_col = True Then Err.Raise vbObjectError + 1729, , \"Bad column: \" + col_name End If log (\"[ \" & address & \" ] get_val: \" & Err.Number & \" \" & Err.Description) log (\"Trying to locate column: \" & col_name & \" in table \" & tbl_name) log (\"line is \" & line_key) End Function Function IntYear(yval) As Integer 'strips off the Y on the argument (eg Y2019) and returns an integer y = 0 + Right(yval, 4) IntYear = y End Function Function invest_fees(acct As String, y_year As String) As Variant 'For investments, return the account fees for an account for a year for actual or forecast 'Other types of accounts return zero. ' for investments actuals, use the values from invest_iande_work Dim val As Variant account_type = get_val(acct, \"tbl_accounts\", \"Type\") Select Case account_type Case \"I\" val = get_val(acct & \":Investing:Account Fees:value\", \"tbl_invest_iande_work\", y_year) 'Do not include action fees since those are included as part of the realized gain 'val = val + get_val(acct & \":Investing:Action Fees:value\", \"tbl_invest_iande_work\", y_year) invest_fees = val Case Else ' return zero if not investment or bank account invest_fees = 0 End Select End Function Function is_forecast(y_year As String) As Boolean 'determine if this year is a forecast year ffys = get_val(\"first_forecast\", \"tbl_gen_state\", \"Value\") ffy = IntYear(ffys) ty = IntYear(y_year) r = ty >= ffy is_forecast = r End Function Function last_two_parts(cat As String, Optional delim = \":\") As String 'take the last two parts of a delimited string and return them as a new string with the delimiter 'missing parts will be set to zero lenght string Dim arr() As String arr = Split(\"::\" + cat, delim) k = UBound(arr) r = arr(k - 1) + \":\" + arr(k) last_two_parts = r End Function Function linear(count As Integer, Optional minimum = 0) As Double 'Use the Excel forecast linear function to extrapolate the value based on the prior <count> values on this line. 'will use <count> number of data points if they exist or fewer if that goes before the first year 'The minimum is used to prevent values from going below that amount ' Suitable only for year columns. ' Due to trouble with the ListObject function which makes values empty for cells with formulas, a work around is used ' to determine the table name from the worksheet name.This should be OK for major tables which correspond by convention. Dim point As Range, db_rng As Range, col_rng As Range Dim v As Variant, ys As Variant, xs As Variant, ys1() As Variant, xs1() As Variant Dim table_name As String Dim ws As Worksheet Dim this_year As Double On Error GoTo ErrHandler Set point = Application.caller Set ws = point.Worksheet table_name = \"tbl_\" & ws.Name ' work around - referencing the list object makes values empty for cells with formulas! Set db_rng = Range(table_name) ' equivalent to databodyRange hdg_row = db_rng.Row - 1 progress = \"initialized\" With ws ' see how many prior items are available up to the requested number For I = 1 To count cn = .Cells(hdg_row, point.Column - I).value If Not (Left(cn, 1) = \"Y\" And IsNumeric(Right(cn, 4))) Then Exit For End If Next I count = I - 1 progress = \"count set: \" & count ' Construct the exising dependent (y) values y_year = .Cells(hdg_row, point.Column).value this_year = CDbl(IntYear(y_year)) progress = \"this year set\" Set y_range = .Range(.Cells(point.Row, point.Column - count), .Cells(point.Row, point.Column - 1)) progress = \"y_range: \" & y_range.address ys = y_range.value progress = \"ys set\" Set x_range = .Range(.Cells(hdg_row, point.Column - count), .Cells(hdg_row, point.Column - 1)) progress = \"x_range: \" & x_range.address xs = x_range.value progress = \"values extracted\" End With any_empty = False ReDim ys1(UBound(ys, 2) - 1) ' redim forces origin to, so the one dimension versions start there ReDim xs1(UBound(xs, 2) - 1) For I = LBound(xs, 2) To UBound(xs, 2) 'years as numbers xs1(I - 1) = CDbl(IntYear(xs(1, I))) ys1(I - 1) = ys(1, I) any_empty = any_empty Or IsEmpty(ys1(I - 1)) Next I progress = \"values formatted\" 'When workbook is initially loaded Excel does not have knowledge of dependencies hidden in this function 'So it runs the fomulas when the predecessors are not yet available. This causes forecast_linear to error since data is missing. 'However, apparently the calcs are done a second time where they work. This bit looks for empties and if so returns zero. If any_empty Then v = 0 progress = \"empty detected\" Else v = Application.WorksheetFunction.Forecast_Linear(this_year, ys1, xs1) v = Application.WorksheetFunction.Max(v, minimum) progress = \"forecast_linear returned \" & CStr(v) End If linear = v Exit Function ErrHandler: log (\"linear failed. Progress code: \" & progress) log (\"worksheet: \" & ws.Name) log (\"hdg_row: \" & hdg_row) log (\"point.row:\" & point.Row) log (\"point.column: \" & point.Column) log (\"y_year: \" & y_year) log (\"Error: \" & Err.Number) log (Err.Description) If progress = \"values formatted\" Then For I = LBound(xs1) To UBound(xs1) log (\"\" & xs1(I) & \": \" & ys1(I)) Next I End If End Function Sub log(txt As String) fn = ThisWorkbook.Path & \"/fcast_log.txt\" Open ThisWorkbook.Path & \"/log.txt\" For Append As #1 Print #1, (Format(Now, \"mm/dd/yyyy HH:mm:ss: \") & txt) Close #1 End Sub Function LUMP(account As String, y_year As String) As Double 'return the expected lump sum payment for an account based on the prior year's end balance Dim this_year As Integer, tbl_name As String Dim prior_end_bal As Double prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", y_offset(y_year, -1)) LUMP = prior_end End Function Function MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year), return annual part b premium or part D surcharge (IRMAA) 'normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead. 'b_or_d isa 1 for part B premium or 2 for Part D surcharge 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly Dim yr As Integer Dim tbl_name As String, ws_name As String, magi_yr As String Dim tbl As ListObject Dim lr As ListRow, rng As Range Dim infl As Variant yr = IntYear(year) If magi = -1 Then magi_yr = y_offset(year, -2) magi = get_val(\"Adjusted Gross - TOTAL\", \"tbl_taxes\", magi_yr) End If magi = Application.WorksheetFunction.Max(1, magi) tbl_name = \"tbl_part_b\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set yr_col = tbl.ListColumns(\"year\") y = Application.WorksheetFunction.VLookup(yr, yr_col.Range, 1, True) ' latest year for which we have data MedicarePrem = 0 'in case the if never succeeds For Each lr In tbl.ListRows() Set rng = lr.Range ry = rng.Cells(1, 1).value rl = rng.Cells(1, 2).value rh = rng.Cells(1, 3).value valu = rng.Cells(1, 3 + b_or_d).value pw = (yr - y) If (ry = y And rl < magi And rh >= magi) Then p = valu * 12 infl = CDbl(Application.WorksheetFunction.Power(inflation, pw)) MedicarePrem = p * infl Exit For End If Next End Function Function mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double 'Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date 'The end date is a string since there is a bug in the Mac Excel. 'The end date represents the month of the last period to include. The day is ignored and the last day of the month is used. Dim result As Double, distance As Double, sign As Integer, months As Integer Dim ed As Date, sd As Date If end_mdy = \"\" Then ed = DateSerial(3000, 12, 31) 'the default since the literal is not working on MacExcel Else mdy = Split(end_mdy, \"/\") ed = DateSerial(mdy(2), mdy(0) + 1, 1) - 1 End If ed = Application.WorksheetFunction.Min(ed, DateSerial(IntYear(y_year), 12, 31)) sd = Application.WorksheetFunction.Max(start_date, DateSerial(IntYear(y_year), 1, 1)) distance = (ed - sd) / (365.25 / 12) months = Round(distance, 0) months = Application.WorksheetFunction.Min(12, months) months = Application.WorksheetFunction.Max(0, months) result = months / 12 mo_apply = result End Function Function nth_word_into(n As Integer, source As String, template As String) As String ' insert the nth word (first is 0th) from source into the template, replacing % Dim words() As String words = Split(Trim(source), \" \") result = Replace(template, \"%\", Trim(words(n))) nth_word_into = result End Function Function PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part b premium 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly PartBPrem = MedicarePrem(1, year, inflation, magi) End Function Function PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part D surcharge 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly PartDSurcharge = MedicarePrem(2, year, inflation, magi) End Function Function percent_year_worked(initials As String) As Double 'Using the year of the current column and the data in the people table, return a number between 0 and 1 'indicating the percent of the year worked for the person with initials given Dim result As Double Dim retir_date As Date result = 0 retir_date = get_val(initials, \"tbl_people\", \"Retire Date\") y_year = this_col_name() y = IntYear(y_year) j1 = DateSerial(y, 1, 1) diff = DateDiff(\"d\", j1, retir_date) dty = 2 + DateDiff(\"d\", j1, DateSerial(y, 12, 31)) 'days this year If diff > dty Then result = 1 End If If diff < 0 Then result = 0 End If If diff > 0 And diff <= dty Then result = diff / dty End If percent_year_worked = result End Function Function prior_value(line As String) As Variant ' Get the prior years' value for this line. Suitable only for year columns. Dim prior_col As String Dim value As Variant Dim table As String Dim rng As Range Set rng = Application.caller table = rng.ListObject.Name prior_col = y_offset(this_col_name(), -1) value = get_val(line, table, prior_col) prior_value = value End Function Function ratio_to_start(account As String, category As String, y_year As String) As Double 'For investment income and expense, compute the ratio to the start balance, but use the prior end balance since 'that should have already been computed. This allows the table to occur before the balances table in the compute order 'To be run in a cell in the invest_iande_work table. Dim work_table As String, bal_table As String Dim key As Variant Dim start_bal As Double, value As Double, ratio As Double work_table = Application.caller.ListObject.Name bal_table = \"tbl_balances\" On Error GoTo err1 start_bal = get_val(\"End Bal\" + account, bal_table, y_offset(y_year, -1), True) GoTo continue err1: ' If we are on the first period, then the start value should be static and not require a calculation If 1729 = Err.Number - vbObjectError Then start_bal = get_val(\"Start Bal\" + account, bal_table, y_year) Else log (Err.Description) ratio_to_start = 0 Exit Function End If continue: key = account + \":\" + category + \":value\" value = get_val(key, work_table, y_year) If start_bal = 0 Then ratio = 0 Else ratio = value / start_bal ratio = Round(ratio, 4) End If ratio_to_start = ratio End Function Function reinv_amt(acct_name As String, y_year As String) As Double 'compute the reinvestment amount for an account and year. Dim amt, rlz, rate, fees As Double rlz = get_val(\"Rlz Int/Gn\" & acct_name, \"tbl_balances\", y_year) rate = get_val(\"Reinv Rate\" & acct_name, \"tbl_balances\", y_year) amt = Round(rlz * rate, 2) reinv_amt = amt End Function Function retir_parm(code As String, who As String) As Variant 'Get a retirement paramenter given code and code (G or V) Dim rng As Range On Error GoTo ErrHandler sht = \"retireparms\" cl = InStr(1, \"abGV\", who, vbTextCompare) With ThisWorkbook.Worksheets(sht) Set rng = .Range(\"Table3[code]\") rw = Application.WorksheetFunction.Match(code, rng, False) rw = rw + rng.Row - 1 s = sht & \"!\" & .Cells(rw, cl).address v = .Range(s) retir_parm = v End With Exit Function ErrHandler: log (\"retir_parm: \" & Err.Description & \" (\" & Err.Number & \")\") log (\"Looking for: \" & code & \" who:\" & who) End Function Function RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double 'return the req minimum distribution table 1 result for a year for a given account, owner (GBD or VEC) and year. 'if death year is not given then this function treat this as spousal inheritance 'if death year is given the treat this as a beneficiary inheritance Dim this_year As Integer, age As Integer Dim prior_end_bal As Double, life_expectancy As Double, result As Double this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) If death_year = 0 Then ' for spousal use actual age this year age = age_of(account_owner, y_year) life_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\") Else ' work with the age at year after death for beneficiary type age = age_of(account_owner, \"Y\" & (death_year + 1)) life_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\") life_expectancy = life_expectancy - (this_year - (death_year + 1)) 'factor is reduced by one for each succeeding distribution year. End If result = prior_end_bal / life_expectancy RMD_1 = result End Function Function rolling_avg(Optional max_value As Variant = Null, Optional lookback As Integer = 5, Optional table As String = \"\", Optional key As String = \"\", Optional this_y_year As String = \"\") As Double 'Look back at previous columns and average the numeric values found there, ignoring items before 2018, but including zeros 'max_value if provided is used instead of any higher values 'lookback is defaulted to 5 years 'If not provided, table, key and y_year are taken from the calling cell 'Return the average. Returns 0 if the count of valid items is 0. Dim y_year As String Dim point As Range, ws As Worksheet Dim value As Variant Set point = Application.caller If table = \"\" Then table = point.ListObject.Name End If If key = \"\" Then offset = point.ListObject.ListColumns(1).Range(1, 1).Column - 1 Set ws = point.Worksheet key = ws.Cells(point.Row, 1 + offset).value End If If this_y_year = \"\" Then this_y_year = this_col_name() End If this_year = IntYear(this_y_year) tot = 0 cnt = 0 For y = this_year - lookback To this_year - 1 If y < 2018 Then value = Null Else y_year = \"Y\" & y value = get_val(key, table, y_year) End If If Not IsNull(value) Then If Not IsNull(max_value) Then value = Application.WorksheetFunction.Min(max_value, value) End If tot = tot + value cnt = cnt + 1 End If Next y If cnt <> 0 Then rolling_avg = tot / cnt Else rolling_avg = 0 End If End Function Function simple_return(account As String, y_year As String) As Double 'return the rlzd gain divided by the average of the start and end balances (or zero) sb = get_val(\"Start Bal\" & account, \"tbl_balances\", y_year) eb = get_val(\"End Bal\" & account, \"tbl_balances\", y_year) rg = get_val(\"Rlz Int/Gn\" & account, \"tbl_balances\", y_year) urg = get_val(\"Unrlz Gn/Ls\" & account, \"tbl_balances\", y_year) av = (sb + eb) / 2 If av = 0 Then result = 0 Else result = (rg + urg) / av End If simple_return = result End Function Function sort_tax_table() 'make sure the federal tax tables are sorted properly Dim tbl_name As String tbl_name = \"tbl_fed_tax\" ws = ws_for_table_name(tbl_name) Dim tbl As ListObject Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) Dim year_column As Range, Range_column As Range Set year_column = Range(tbl_name & \"[Year]\") Set Range_column = Range(tbl_name & \"[Range]\") With tbl.sort .SortFields.Clear .SortFields.Add key:=year_column, SortOn:=xlSortOnValues, Order:=xlAscending .SortFields.Add key:=Range_column, SortOn:=xlSortOnValues, Order:=xlAscending .Header = xlYes .Apply End With End Function Sub test_fed_tax() Dim r As Double, c As Double zt = \"not passed\" r = Federal_Tax(2150, 9999) If 0 = r Then zt = \"passed\" n = 74031 pt = \"not passed\" r = Federal_Tax(2020, 350000) If r = n Then pt = \"passed\" n = 72331 ct = \"not passed\" c = Fed_Tax_CapGn(2020, 350000, 10000) If c = n Then ct = \"passed\" Debug.Print (\"Zero test: \" & zt) Debug.Print (\"Positive test:\" & pt) Debug.Print (\"Capital gains test:\" & ct) End Sub Sub test_get_val() Dim tbl_name As String Dim line_name As String Dim y_year As String Debug.Print (get_val(\"Expenses:T:Soc Sec - TOTAL\", \"tbl_iande_actl\", \"Y2018\")) Debug.Print (get_val(\"End BalReal Estate\", \"tbl_balances\", \"Y2019\")) End Sub Sub test_LUMP() Dim val As Double val = LUMP(\"401K - GBD - TRV\", \"Y2022\") Debug.Print (val) End Sub Sub test_medicarePrem() Dim test_cases() As Variant Dim yr As String Dim infl As Variant Dim magi As Variant test_cases() = Array(Array(2021, 1#, 10000), Array(2022, 1#, 182001), Array(2022, 1#, 400000), Array(2023, 1.02, 75000)) log (\"Part B tests\") For I = LBound(test_cases) To UBound(test_cases) yr = \"Y\" & test_cases(I)(0) magi = test_cases(I)(2) infl = test_cases(I)(1) partB = PartBPrem(yr, infl, magi) partD = PartDSurcharge(yr, infl, magi) msg = \"Input: year=\" & test_cases(I)(0) & \" magi=\" & magi & \" inflation=\" & infl & \" Output: \" & partB & \" Part D: \" & partD log (msg) Next End Sub Sub test_mo_apply() Dim test_cases() As Variant Dim test_case As Variant Dim yr As String Dim start_date As Date, end_date As String, result As Double test_cases() = Array( _ Array(3, 2022, 2022), _ Array(12, 2025, 2025), _ Array(3, 2022, 2022, 11, 2022), _ Array(3, 2022, 2025, 9, 2025), _ Array(3, 2022, 2022, 8, 2022) _ ) log (\"mo_apply tests\") For I = LBound(test_cases) To UBound(test_cases) test_case = test_cases(I) start_date = DateSerial(test_case(1), test_case(0), 1) yr = \"Y\" & test_case(2) end_date = \"-none-\" If UBound(test_case) > 2 Then end_date = test_case(3) & \"/1/\" & test_case(4) result = mo_apply(start_date, yr, end_date) Else result = mo_apply(start_date, yr) End If msg = \"Input: year=\" & yr & \" start/end dates = \" & start_date & \" \" & end_date & \" Output: \" & result log (msg) Next I End Sub Sub test_nth() Debug.Print (nth_word_into(0, \"fed tax value\", \"Taxes for %s\")) End Sub Sub test_sort() sort_tax_table End Sub Function this_col_name() As String 'return the caller's column name, assuming the cell is in a table. 'Otherwise generates a #VALUE error 'Use to make formulas more portable Dim point As Range Dim list_ojb As ListObject Dim cols As ListColumns Dim offset As Integer, col_ix As Integer Set point = Application.caller Set list_obj = point.ListObject Set cols = list_obj.ListColumns offset = list_obj.Range(1, 1).Column - 1 col_ix = offset + point.Column this_col_name = cols(col_ix) End Function Function unrlz(acct As String, y_year As String) As Variant 'compute the unrealized gain or loss for an account for a year, assuming end bal is fixed Dim open_bal As Variant, adds As Variant, rlzd As Variant, end_bal As Variant Dim val As Variant open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) adds = get_val(\"Add/Wdraw\" & acct, \"tbl_balances\", y_year) rlzd = get_val(\"Rlz Int/Gn\" & acct, \"tbl_balances\", y_year) end_bal = get_val(\"End bal\" & acct, \"tbl_balances\", y_year) val = end_bal - (open_bal + adds + rlzd) unrlz = val End Function Function ws_for_table_name(tbl_name As String) As String ' find out what worksheet the named table occurs on With ThisWorkbook.Worksheets(\"utility\") Set rng = .ListObjects(\"tbl_table_map\").DataBodyRange ws = Application.WorksheetFunction.VLookup(tbl_name, rng, 2, False) End With ws_for_table_name = ws End Function Function y_offset(y_year As String, offset As Integer) As String 'given a y_year offset it by the amount given, producing a new y_year y = IntYear(y_year) r = \"Y\" & y + offset y_offset = r End Function","title":"VBA Code"},{"location":"vba_sorted/#vba-code","text":"Attribute VB_Name = \"Module1\" Public Const dbg As Boolean = False Option Base 0 Function acct_who1(acct As String, Optional num_chars As Integer = 1) As String 'return the first initial of the owner of an account in format type - who - firm Dim parts() As String parts = Split(acct, \" - \") who = parts(1) acct_who1 = Left(who, num_chars) End Function Function add_wdraw(acct As String, y_year As String) As Variant 'Get the actual or forecast transfers in (positive) our out(negative) 'Determines whether the year is actual or forecast, in order to determine the source from the Accounts table. 'For actuals returns the value from the source table. 'For forecast, will add realized gains that are not re-invested 'If source table is the retirement table, changes the sign. Dim line As String, tbl As String, prefix As String Dim rlz As Double, reinv As Double, wdraw As Double Dim no_distr_plan As Integer is_fcst = is_forecast(y_year) prefix = \"Actl\" If is_fcst Then prefix = \"Fcst\" value = 0 acct_type = get_val(acct, \"tbl_accounts\", \"Type\") tbl = get_val(acct, \"tbl_accounts\", prefix & \"_source_tab\") 'logic to switch sign for retirement sign = 1 If tbl = \"tbl_retir_vals\" Then sign = -1 End If line = get_val(acct, \"tbl_accounts\", prefix & \"_source\") If (\"I\" = acct_type) And Not is_fcst Then line = \"add/wdraw\" & line ' complete key for investment actuals If line <> \"zero\" Then ' keyword to enable forecasting of zeros value = get_val(line, tbl, y_year) value = value * sign End If If \"I\" = acct_type Then 'determine amount to withdraw based on reinv rate If is_fcst Then rlz = get_val(\"Rlz Int/Gn\" & acct, \"tbl_balances\", y_year) no_distr_plan = get_val(acct, \"tbl_accounts\", \"No Distr Plan\") reinv = Round(no_distr_plan * rlz * get_val(\"Reinv Rate\" & acct, \"tbl_balances\", y_year), 0) wdraw = -Round(rlz - reinv) value = value + wdraw End If End If add_wdraw = value End Function Function age_as_of_date(inits As String, dt As Date) As Double 'return the age attained by an account owner in a given year Dim dob As Date, eoy As Date Dim diff As Double, age As Double dob = get_val(inits, \"tbl_people\", \"DOB\") diff = (dt - dob) / 365.25 age = Application.WorksheetFunction.Round(diff, 3) age_as_of_date = age End Function Function age_of(inits As String, y_year As String) As Integer 'return the age attained by an account owner in a given year Dim dob As Date, eoy As Date Dim diff As Double, age As Integer dob = get_val(inits, \"tbl_people\", \"DOB\") eoy = DateSerial(IntYear(y_year), 12, 31) diff = (eoy - dob) / 365.25 age = Int(Application.WorksheetFunction.RoundDown(diff, 0)) age_of = age End Function Function agg(y_year As String, by_tag As Variant, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double ' Aggregate (default is sum) up the values in the table containing the calling cell for a year where the by_tag is found in the tag column. ' Use of this can help avoid the hard coding of addresses into formulas ' By default the tag column is \"tag\" but an alternate can be provided ' Other agg_methods are \"min\" and \"max\" Dim agg_val As Double Dim tbl As ListObject Dim point As Range, val_rng As Range, tag_col As Range Set point = Application.caller Set tbl = point.ListObject Set tag_rng = tbl.ListColumns(tag_col_name).Range Set val_rng = tbl.ListColumns(y_year).Range Select Case agg_method Case \"sum\" agg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rng, by_tag) Case \"min\" agg_val = Application.WorksheetFunction.MinIfs(val_rng, tag_rng, by_tag) Case \"max\" agg_val = Application.WorksheetFunction.MaxIfs(val_rng, tag_rng, by_tag) End Select agg = agg_val End Function Function agg_table(tbl_name As String, y_year As String, by_tag As String, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double ' Aggregate (default is sum) up the values in the named table for a year where the by_tag is found in the tag column. ' Use of this can help avoid the hard coding of addresses into formulas ' By default the tag column is \"tag\" but an alternate can be provided ' Other agg_methods are \"min\" and \"max\" ' A second and third criteria may be provided by extending the by_tag and the tag_col_name as follows: ' A delimiter is included in the strings to allow two values to be provided.The delimiter is stile (|) ' The there should be exactly 0 or 1 or 2 delimiters, andthe by_tag and tag_column_name should agree Dim agg_val As Double Dim tbl As ListObject Dim point As Range, val_rng As Range, tag_rngs() As Range Dim by_tags() As String, tag_col_names() As String, by_tags_v As Variant On Error GoTo ErrHandler delim = \"|\" by_tags = Split(by_tag, delim) tag_col_names = Split(tag_col_name, delim) Set point = Application.caller ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set val_rng = tbl.ListColumns(y_year).Range ReDim tag_rngs(UBound(by_tags)) ReDim by_tags_v(UBound(by_tags)) For I = LBound(by_tags) To UBound(by_tags) Set tag_rngs(I) = tbl.ListColumns(tag_col_names(I)).Range If IsNumeric(by_tags(I)) Then by_tags_v(I) = CInt(by_tags(I)) Else by_tags_v(I) = by_tags(I) End If Next I Select Case agg_method Case \"sum\" Select Case UBound(by_tags) Case 0 agg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rngs(0), by_tags_v(0)) Case 1 agg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rngs(0), by_tags_v(0), tag_rngs(1), by_tags_v(1)) Case 2 agg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rngs(0), by_tags_v(0), tag_rngs(1), by_tags_v(1), tag_rngs(2), by_tags_v(2)) End Select Case \"min\" agg_val = Application.WorksheetFunction.MinIfs(val_rng, tag_rngs(0), by_tags(0)) Case \"max\" agg_val = Application.WorksheetFunction.MaxIfs(val_rng, tag_rngs(0), by_tags(0)) End Select agg_table = agg_val Exit Function ErrHandler: log (\"[ \" & point.address & \" ] agg_table: \" & Err.Number & \" \" & Err.Description) End Function Function ANN(account As String, account_owner As String, y_year As String) As Double 'DEPRECATED - USE annuity instead 'return a year's value for an annuity stream based on the prior year's end balance 'does not properly handle partial years Dim this_year As Integer, age As Integer Dim prior_end_bal As Double, term As Double, result As Double, anny_rate As Double, anny_dur As Double Dim anny_start As Date, o1 As String, n As Integer Dim dur_parm As String this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) age = age_of(account_owner, y_year) - 1 o1 = Left(account_owner, 1) anny_rate = get_val(\"anny_rate\", \"tbl_retir_parms\", o1) dur_parm = \"anny_dur\" ' hack picks different duration for roth If InStr(account, \"Roth\") > 0 Then dur_parm = \"roth_dur\" anny_dur = get_val(dur_parm, \"tbl_retir_parms\", o1) anny_start = get_val(\"anny_start\", \"tbl_retir_parms\", o1) n = anny_dur - (this_year - year(anny_start)) result = 0 If n > 0 Then result = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal) End If ANN = result End Function Function annuity(account As String, y_year As String) As Double 'return a year's value for an annuity stream based on the prior year's end balance 'fetches the start date, duration and annual annuity rate from tbl_retir_vals 'rounds to whole number Dim anny_start As Date Dim duration As Integer, this_year As Integer Dim annual_rate As Double, anny_rate As Double this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) anny_start = get_val(account, \"tbl_retir_vals\", \"Start Date\") duration = get_val(account, \"tbl_retir_vals\", \"Anny Dur Yrs\") anny_rate = get_val(account, \"tbl_retir_vals\", \"Anny Rate\") n = duration - (this_year - year(anny_start)) result = 0 If n > 0 Then result = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal) factor = mo_apply(anny_start, y_year) ' TODO put end date on this call result = factor * result result = Application.WorksheetFunction.Round(result, 0) End If annuity = result End Function Function bal_agg(y_year As String, val_type As String, Optional acct_type As String = \"*\", Optional txbl As Integer = 1, Optional active As Integer = 1) As Double 'get the sum of values from the balances table for a year and type, optionally further qualified by acct type,taxable status,active status 'wild cards are OK as are Excel functions like \"<>\" prepended to the values for strings 'NOTE all the criteria fields must have values - suggest using NA if there is no value such as for an election. Dim this_year As Integer, tbl_name As String Dim result As Double Dim tbl As ListObject, crit_col1 As ListColumn, crit_col2 As ListColumn, val_col As ListColumn Dim criteria1 As String, criteria2 As String tbl_name = \"tbl_balances\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set crit_col1 = tbl.ListColumns(\"ValType\") Set crit_col2 = tbl.ListColumns(\"Type\") Set crit_col3 = tbl.ListColumns(\"Income Txbl\") Set crit_col4 = tbl.ListColumns(\"Active\") Set val_col = tbl.ListColumns(y_year) result = Application.WorksheetFunction.SumIfs(val_col.Range, _ crit_col1.Range, val_type, _ crit_col2.Range, acct_type, _ crit_col3.Range, txbl, _ crit_col4.Range, active) bal_agg = result End Function Sub calc_retir() 'iterate through the years to calc retirement streams based on balances from prior year 'prior balance from balances feeds current retirement, and current invest_iande_work 'retirement feeds aux, 'aux and invest_iande_work feeds current balances 'iande depends on retirement as well and taxes depend on iande Dim rcols As Range, rcell As Range, single_cell As Range Dim tbls() As ListObject Dim tbl_names() As String, ws_names() As String Dim msg As String, formula As String log (\"-----------------------------\") log (\"Entering manual calculation mode.\") Application.Calculation = xlCalculationManual tbl_names = Split(\"tbl_retir_vals;tbl_aux;tbl_invest_iande_work;tbl_balances;tbl_iande;tbl_taxes\", \";\") k = UBound(tbl_names) ReDim tbls(k), ws_names(k) msg = \"\" For I = LBound(tbl_names) To k ws_names(I) = ws_for_table_name(tbl_names(I)) Set tbls(I) = ThisWorkbook.Worksheets(ws_names(I)).ListObjects(tbl_names(I)) If Len(msg) > 0 Then msg = msg & \",\" If I = UBound(tbl_names) Then msg = msg & \" and \" msg = msg & ws_names(I) Next I Set rcols = tbls(0).HeaderRowRange Set col = tbls(0).ListColumns(\"yearly\") col.Range.Dirty col.Range.Calculate log (\"Retirement yearly column refreshed.\") For Each rcell In rcols If InStr(rcell.value, \"Y20\") = 1 Then log (\"Calculating for \" & rcell.value) For I = LBound(tbls) To UBound(tbls) Set col = tbls(I).ListColumns(rcell.value) t_name = tbls(I).Name Application.StatusBar = rcell.value & \":\" & t_name log (\" \" & t_name & \" - Range \" & col.Range.address) If dbg Then For Each single_cell In col.Range.Cells formula = single_cell.formula If 0 < Len(formula) Then If Left(formula, 1) = \"=\" Then log (\" \" & single_cell.address & \": \" & formula) single_cell.Dirty single_cell.Calculate End If End If Next Else col.Range.Dirty col.Range.Calculate End If Next I End If Next rcell log (\"Entering automatic calculation mode.\") Application.StatusBar = \"\" log (\"-----------------------------\") Application.Calculation = xlCalculationAutomatic End Sub Sub calc_table() 'Testing forced calc of table Dim rcols As Range, rcell As Range Dim tbl As ListObject Dim tbl_name As String Dim ws_name As String Dim msg As String log (\"-----------------------------\") log (\"Entering manual calculation mode.\") Application.Calculation = xlCalculationManual tbl_name = \"tbl_balances\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) tbl.Range.Dirty tbl.Range.Calculate log (tbl_name & \" refreshed.\") log (\"Entering automatic calculation mode.\") log (\"-----------------------------\") Application.Calculation = xlCalculationAutomatic End Sub Function CT_Tax(tax_Year As Integer, taxable_Income As Double) As Double 'Calculate the CT income tax for a given year and taxable income amount 'The so called Initial Tax Calculation only. 'Table is not setup exactly like Federal - it uses the traditional method not the subraction method. 'gets a result of zero if year not in the table. Dim result As Double Dim tbl_name As String Dim tbl As ListObject Dim lr As ListRow Dim rng As Range Dim yr As Integer Dim ti As Double, rt As Double, base As Double tbl_name = \"tbl_ct_tax\" ws = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) result = 0 prior = 0 For Each lr In tbl.ListRows() Set rng = lr.Range yr = rng.Cells(1, 1).value ti = rng.Cells(1, 2).value rt = rng.Cells(1, 3).value base = rng.Cells(1, 4).value If tax_Year = yr Then If taxable_Income < ti And taxable_Income >= prior Then result = base + (rt * (taxable_Income - prior)) result = Round(result, 0) End If prior = ti End If Next lr CT_Tax = result End Function Function d2s(dt As Date) As String d2s = Format(dt, \"mm/dd/yyyy\") End Function Function ei_withhold(legend As String, ei_template, y_year As String) As Double ' compute annual social security or medicare withholding for earned income ' relies on naming conventions ' ei_template is a template for the line with earned income. % is replaced by the person indicator, which ' is the trailing part of the legend. ' the legend has two parts separated by hyphen. The first part is the type of withholding ' which must be either: Medicare or Soc Sec ' y_year is the column heading such as Y2022 Dim result As Double, earned As Double Dim rate As Variant, cap As Variant Dim legend_parts() As String Dim typ As String, ei_line As String, y_rate_year As String legend_parts = Split(legend, \"-\") typ = Trim(legend_parts(LBound(legend_parts))) who = Trim(legend_parts(UBound(legend_parts))) ei_line = Replace(ei_template, \"%\", who) earned = get_val(ei_line, \"tbl_iande\", y_year) ffy = get_val(\"first_forecast\", \"tbl_gen_state\", \"value\") lay = -1 + IntYear(ffy) rate_year = Application.WorksheetFunction.Min(lay, IntYear(y_year)) y_rate_year = \"Y\" & CStr(rate_year) Select Case typ Case \"Soc Sec\": cap = get_val(\"Social Security Wage Cap\", \"tbl_manual_actl\", y_rate_year) rate = get_val(\"Social Security FICA rate\", \"tbl_manual_actl\", y_rate_year) result = rate * Application.WorksheetFunction.Min(cap, earned) Case \"Medicare\": rate = get_val(\"Medicare withholding rate\", \"tbl_manual_actl\", y_rate_year) result = rate * earned End Select ei_withhold = result End Function Function endbal(acct As String, y_year As String) As Variant 'compute the end balance for an account for a year Dim rate As Variant Dim val As Variant open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) adds = get_val(\"Add/Wdraw\" & acct, \"tbl_balances\", y_year) reinv = get_val(\"Reinv Amt\" & acct, \"tbl_balances\", y_year) fees = get_val(\"Fees\" & acct, \"tbl_balances\", y_year) unrlzd = get_val(\"Unrlz Gn/Ls\" & acct, \"tbl_balances\", y_year) val = open_bal + adds + reinv + unrlzd + fees endbal = val End Function Function extend_iiande(account As String, category As String, y_year As String) As Double 'For investment income and expense, use a ratio to the start balance to compute a forecast value for the income/expense item on this row 'To be run in a cell in the invest_iande_work table. Dim work_table As String, bal_table As String Dim key As Variant Dim start_bal As Double, rate As Double, value As Double work_table = Application.caller.ListObject.Name bal_table = \"tbl_balances\" start_bal = get_val(\"End Bal\" + account, bal_table, y_offset(y_year, -1)) key = account + \":\" + category + \":rate\" rate = get_val(key, work_table, y_year) value = rate * start_bal extend_iiande = value End Function Function Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double 'computes the resulting federal tax with capital gains portion at 15% 'the input should include qualified dividends Dim base As Double, result As Double, cgt As Double base = Federal_Tax(tax_Year, taxable_Income - totCapGn) cgt = 0.15 * totCapGn result = base + cgt Fed_Tax_CapGn = result End Function Function Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double 'Calculate the federal income tax for a given year and taxable income amount 'gets a result of zero if year not in the table. Dim result As Double Dim tbl_name As String Dim tbl As ListObject Dim lr As ListRow Dim rng As Range Dim yr As Integer Dim ti As Double Dim rt As Double Dim sb As Double tbl_name = \"tbl_fed_tax\" ws = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) result = 0 For Each lr In tbl.ListRows() Set rng = lr.Range yr = rng.Cells(1, 1).value ti = rng.Cells(1, 2).value rt = rng.Cells(1, 3).value sb = rng.Cells(1, 4).value If tax_Year = yr Then If taxable_Income > ti Then result = (rt * taxable_Income) - sb result = Round(result, 0) End If End If Next lr Federal_Tax = result End Function Function gain(acct As String, y_year As String, realized As Boolean) As Variant 'For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast 'Other types of accounts return zero. ' for investments actuals, use the values from invest_actl ' for bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table Dim rate As Variant Dim val As Variant Dim col_name As String Dim interest_row As String account_type = get_val(acct, \"tbl_accounts\", \"Type\") Select Case account_type Case \"I\", \"B\" is_fcst = is_forecast(y_year) Select Case is_fcst Case True Select Case account_type Case \"I\" Select Case realized Case True val = agg_table(\"tbl_invest_iande_work\", y_year, acct & \"|value|I\", , \"Account|Type|IorE\") Case False ' Unrlz Gn open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) rate = get_val(\"Mkt Gn Rate\" & acct, \"tbl_balances\", y_year) val = open_bal * rate End Select Case \"B\" Select Case realized Case True open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) rate = get_val(\"Mkt Gn Rate\" & acct, \"tbl_balances\", y_year) val = open_bal * rate Case False ' Unrlz Gn val = 0 End Select End Select Case False ' actuals Select Case account_type Case \"I\" Select Case realized Case True val = get_val(\"Rlz Int/Gn\" & acct, \"tbl_invest_actl\", y_year) Case False val = get_val(\"Unrlz Gn/Ls\" & acct, \"tbl_invest_actl\", y_year) End Select Case \"B\" 'banks Select Case realized Case True interest_row = get_val(\"bank_interest\", \"tbl_gen_state\", \"value\") val = get_val(interest_row, \"tbl_iande\", y_year) Case False ' banks never have unrealized val = 0 End Select End Select End Select gain = val Case Else ' return zero if not investment or bank account gain = 0 End Select End Function Function get_val(line_key As Variant, tbl_name As String, col_name As String, Optional raise_bad_col = False) As Variant 'Fetches a value from a given table (it must be an actual worksheet table 'If the line is not found in the table, a zero is returned. 'Bad columns are usually logged, but if the argument raise_bad_col is True then an error is raised. Dim value As Variant, rng As Variant Dim caller As Range Dim address As String address = \"no addr\" On Error GoTo skip ' allow testing from outside of Excel Set caller = Application.caller() address = caller.Worksheet.Name & \"!\" & caller(1, 1).address skip: ws = ws_for_table_name(tbl_name) 'now get the data With ThisWorkbook.Worksheets(ws) Set rng = .ListObjects(tbl_name).HeaderRowRange Dim cr As Range On Error GoTo ErrHandler1 col = Application.WorksheetFunction.Match(col_name, rng, False) Set rng = .ListObjects(tbl_name).DataBodyRange On Error GoTo ErrHandler value = Application.WorksheetFunction.VLookup(line_key, rng, col, False) If IsEmpty(value) Then value = 0 End If End With get_val = value Exit Function ErrHandler: log (\"[\" & address & \" ] get_val: \" & line_key & \" not found in \" & tbl_name & \", using zero as value for \" & col_name) Dim lkRange As Range If False Then 'use this to debug missing lines. e.g. tbl_name = \"tbl_taxes\" Then Set lkRange = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name).ListColumns(1).DataBodyRange Debug.Print (lkRange.count) For Each c In lkRange.Cells log (c.value) Next End If get_val = 0 Exit Function ErrHandler1: If raise_bad_col = True Then Err.Raise vbObjectError + 1729, , \"Bad column: \" + col_name End If log (\"[ \" & address & \" ] get_val: \" & Err.Number & \" \" & Err.Description) log (\"Trying to locate column: \" & col_name & \" in table \" & tbl_name) log (\"line is \" & line_key) End Function Function IntYear(yval) As Integer 'strips off the Y on the argument (eg Y2019) and returns an integer y = 0 + Right(yval, 4) IntYear = y End Function Function invest_fees(acct As String, y_year As String) As Variant 'For investments, return the account fees for an account for a year for actual or forecast 'Other types of accounts return zero. ' for investments actuals, use the values from invest_iande_work Dim val As Variant account_type = get_val(acct, \"tbl_accounts\", \"Type\") Select Case account_type Case \"I\" val = get_val(acct & \":Investing:Account Fees:value\", \"tbl_invest_iande_work\", y_year) 'Do not include action fees since those are included as part of the realized gain 'val = val + get_val(acct & \":Investing:Action Fees:value\", \"tbl_invest_iande_work\", y_year) invest_fees = val Case Else ' return zero if not investment or bank account invest_fees = 0 End Select End Function Function is_forecast(y_year As String) As Boolean 'determine if this year is a forecast year ffys = get_val(\"first_forecast\", \"tbl_gen_state\", \"Value\") ffy = IntYear(ffys) ty = IntYear(y_year) r = ty >= ffy is_forecast = r End Function Function last_two_parts(cat As String, Optional delim = \":\") As String 'take the last two parts of a delimited string and return them as a new string with the delimiter 'missing parts will be set to zero lenght string Dim arr() As String arr = Split(\"::\" + cat, delim) k = UBound(arr) r = arr(k - 1) + \":\" + arr(k) last_two_parts = r End Function Function linear(count As Integer, Optional minimum = 0) As Double 'Use the Excel forecast linear function to extrapolate the value based on the prior <count> values on this line. 'will use <count> number of data points if they exist or fewer if that goes before the first year 'The minimum is used to prevent values from going below that amount ' Suitable only for year columns. ' Due to trouble with the ListObject function which makes values empty for cells with formulas, a work around is used ' to determine the table name from the worksheet name.This should be OK for major tables which correspond by convention. Dim point As Range, db_rng As Range, col_rng As Range Dim v As Variant, ys As Variant, xs As Variant, ys1() As Variant, xs1() As Variant Dim table_name As String Dim ws As Worksheet Dim this_year As Double On Error GoTo ErrHandler Set point = Application.caller Set ws = point.Worksheet table_name = \"tbl_\" & ws.Name ' work around - referencing the list object makes values empty for cells with formulas! Set db_rng = Range(table_name) ' equivalent to databodyRange hdg_row = db_rng.Row - 1 progress = \"initialized\" With ws ' see how many prior items are available up to the requested number For I = 1 To count cn = .Cells(hdg_row, point.Column - I).value If Not (Left(cn, 1) = \"Y\" And IsNumeric(Right(cn, 4))) Then Exit For End If Next I count = I - 1 progress = \"count set: \" & count ' Construct the exising dependent (y) values y_year = .Cells(hdg_row, point.Column).value this_year = CDbl(IntYear(y_year)) progress = \"this year set\" Set y_range = .Range(.Cells(point.Row, point.Column - count), .Cells(point.Row, point.Column - 1)) progress = \"y_range: \" & y_range.address ys = y_range.value progress = \"ys set\" Set x_range = .Range(.Cells(hdg_row, point.Column - count), .Cells(hdg_row, point.Column - 1)) progress = \"x_range: \" & x_range.address xs = x_range.value progress = \"values extracted\" End With any_empty = False ReDim ys1(UBound(ys, 2) - 1) ' redim forces origin to, so the one dimension versions start there ReDim xs1(UBound(xs, 2) - 1) For I = LBound(xs, 2) To UBound(xs, 2) 'years as numbers xs1(I - 1) = CDbl(IntYear(xs(1, I))) ys1(I - 1) = ys(1, I) any_empty = any_empty Or IsEmpty(ys1(I - 1)) Next I progress = \"values formatted\" 'When workbook is initially loaded Excel does not have knowledge of dependencies hidden in this function 'So it runs the fomulas when the predecessors are not yet available. This causes forecast_linear to error since data is missing. 'However, apparently the calcs are done a second time where they work. This bit looks for empties and if so returns zero. If any_empty Then v = 0 progress = \"empty detected\" Else v = Application.WorksheetFunction.Forecast_Linear(this_year, ys1, xs1) v = Application.WorksheetFunction.Max(v, minimum) progress = \"forecast_linear returned \" & CStr(v) End If linear = v Exit Function ErrHandler: log (\"linear failed. Progress code: \" & progress) log (\"worksheet: \" & ws.Name) log (\"hdg_row: \" & hdg_row) log (\"point.row:\" & point.Row) log (\"point.column: \" & point.Column) log (\"y_year: \" & y_year) log (\"Error: \" & Err.Number) log (Err.Description) If progress = \"values formatted\" Then For I = LBound(xs1) To UBound(xs1) log (\"\" & xs1(I) & \": \" & ys1(I)) Next I End If End Function Sub log(txt As String) fn = ThisWorkbook.Path & \"/fcast_log.txt\" Open ThisWorkbook.Path & \"/log.txt\" For Append As #1 Print #1, (Format(Now, \"mm/dd/yyyy HH:mm:ss: \") & txt) Close #1 End Sub Function LUMP(account As String, y_year As String) As Double 'return the expected lump sum payment for an account based on the prior year's end balance Dim this_year As Integer, tbl_name As String Dim prior_end_bal As Double prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", y_offset(y_year, -1)) LUMP = prior_end End Function Function MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year), return annual part b premium or part D surcharge (IRMAA) 'normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead. 'b_or_d isa 1 for part B premium or 2 for Part D surcharge 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly Dim yr As Integer Dim tbl_name As String, ws_name As String, magi_yr As String Dim tbl As ListObject Dim lr As ListRow, rng As Range Dim infl As Variant yr = IntYear(year) If magi = -1 Then magi_yr = y_offset(year, -2) magi = get_val(\"Adjusted Gross - TOTAL\", \"tbl_taxes\", magi_yr) End If magi = Application.WorksheetFunction.Max(1, magi) tbl_name = \"tbl_part_b\" ws_name = ws_for_table_name(tbl_name) Set tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name) Set yr_col = tbl.ListColumns(\"year\") y = Application.WorksheetFunction.VLookup(yr, yr_col.Range, 1, True) ' latest year for which we have data MedicarePrem = 0 'in case the if never succeeds For Each lr In tbl.ListRows() Set rng = lr.Range ry = rng.Cells(1, 1).value rl = rng.Cells(1, 2).value rh = rng.Cells(1, 3).value valu = rng.Cells(1, 3 + b_or_d).value pw = (yr - y) If (ry = y And rl < magi And rh >= magi) Then p = valu * 12 infl = CDbl(Application.WorksheetFunction.Power(inflation, pw)) MedicarePrem = p * infl Exit For End If Next End Function Function mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double 'Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date 'The end date is a string since there is a bug in the Mac Excel. 'The end date represents the month of the last period to include. The day is ignored and the last day of the month is used. Dim result As Double, distance As Double, sign As Integer, months As Integer Dim ed As Date, sd As Date If end_mdy = \"\" Then ed = DateSerial(3000, 12, 31) 'the default since the literal is not working on MacExcel Else mdy = Split(end_mdy, \"/\") ed = DateSerial(mdy(2), mdy(0) + 1, 1) - 1 End If ed = Application.WorksheetFunction.Min(ed, DateSerial(IntYear(y_year), 12, 31)) sd = Application.WorksheetFunction.Max(start_date, DateSerial(IntYear(y_year), 1, 1)) distance = (ed - sd) / (365.25 / 12) months = Round(distance, 0) months = Application.WorksheetFunction.Min(12, months) months = Application.WorksheetFunction.Max(0, months) result = months / 12 mo_apply = result End Function Function nth_word_into(n As Integer, source As String, template As String) As String ' insert the nth word (first is 0th) from source into the template, replacing % Dim words() As String words = Split(Trim(source), \" \") result = Replace(template, \"%\", Trim(words(n))) nth_word_into = result End Function Function PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part b premium 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly PartBPrem = MedicarePrem(1, year, inflation, magi) End Function Function PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant 'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part D surcharge 'If the year is not in the table, then the largest year lower than that given will be used 'and the resulting value will include inflation. Inflation is given as 1.0x so it can be used directly PartDSurcharge = MedicarePrem(2, year, inflation, magi) End Function Function percent_year_worked(initials As String) As Double 'Using the year of the current column and the data in the people table, return a number between 0 and 1 'indicating the percent of the year worked for the person with initials given Dim result As Double Dim retir_date As Date result = 0 retir_date = get_val(initials, \"tbl_people\", \"Retire Date\") y_year = this_col_name() y = IntYear(y_year) j1 = DateSerial(y, 1, 1) diff = DateDiff(\"d\", j1, retir_date) dty = 2 + DateDiff(\"d\", j1, DateSerial(y, 12, 31)) 'days this year If diff > dty Then result = 1 End If If diff < 0 Then result = 0 End If If diff > 0 And diff <= dty Then result = diff / dty End If percent_year_worked = result End Function Function prior_value(line As String) As Variant ' Get the prior years' value for this line. Suitable only for year columns. Dim prior_col As String Dim value As Variant Dim table As String Dim rng As Range Set rng = Application.caller table = rng.ListObject.Name prior_col = y_offset(this_col_name(), -1) value = get_val(line, table, prior_col) prior_value = value End Function Function ratio_to_start(account As String, category As String, y_year As String) As Double 'For investment income and expense, compute the ratio to the start balance, but use the prior end balance since 'that should have already been computed. This allows the table to occur before the balances table in the compute order 'To be run in a cell in the invest_iande_work table. Dim work_table As String, bal_table As String Dim key As Variant Dim start_bal As Double, value As Double, ratio As Double work_table = Application.caller.ListObject.Name bal_table = \"tbl_balances\" On Error GoTo err1 start_bal = get_val(\"End Bal\" + account, bal_table, y_offset(y_year, -1), True) GoTo continue err1: ' If we are on the first period, then the start value should be static and not require a calculation If 1729 = Err.Number - vbObjectError Then start_bal = get_val(\"Start Bal\" + account, bal_table, y_year) Else log (Err.Description) ratio_to_start = 0 Exit Function End If continue: key = account + \":\" + category + \":value\" value = get_val(key, work_table, y_year) If start_bal = 0 Then ratio = 0 Else ratio = value / start_bal ratio = Round(ratio, 4) End If ratio_to_start = ratio End Function Function reinv_amt(acct_name As String, y_year As String) As Double 'compute the reinvestment amount for an account and year. Dim amt, rlz, rate, fees As Double rlz = get_val(\"Rlz Int/Gn\" & acct_name, \"tbl_balances\", y_year) rate = get_val(\"Reinv Rate\" & acct_name, \"tbl_balances\", y_year) amt = Round(rlz * rate, 2) reinv_amt = amt End Function Function retir_parm(code As String, who As String) As Variant 'Get a retirement paramenter given code and code (G or V) Dim rng As Range On Error GoTo ErrHandler sht = \"retireparms\" cl = InStr(1, \"abGV\", who, vbTextCompare) With ThisWorkbook.Worksheets(sht) Set rng = .Range(\"Table3[code]\") rw = Application.WorksheetFunction.Match(code, rng, False) rw = rw + rng.Row - 1 s = sht & \"!\" & .Cells(rw, cl).address v = .Range(s) retir_parm = v End With Exit Function ErrHandler: log (\"retir_parm: \" & Err.Description & \" (\" & Err.Number & \")\") log (\"Looking for: \" & code & \" who:\" & who) End Function Function RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double 'return the req minimum distribution table 1 result for a year for a given account, owner (GBD or VEC) and year. 'if death year is not given then this function treat this as spousal inheritance 'if death year is given the treat this as a beneficiary inheritance Dim this_year As Integer, age As Integer Dim prior_end_bal As Double, life_expectancy As Double, result As Double this_year = IntYear(y_year) prior_end_bal = get_val(\"End Bal\" & account, \"tbl_balances\", \"Y\" & this_year - 1) If death_year = 0 Then ' for spousal use actual age this year age = age_of(account_owner, y_year) life_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\") Else ' work with the age at year after death for beneficiary type age = age_of(account_owner, \"Y\" & (death_year + 1)) life_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\") life_expectancy = life_expectancy - (this_year - (death_year + 1)) 'factor is reduced by one for each succeeding distribution year. End If result = prior_end_bal / life_expectancy RMD_1 = result End Function Function rolling_avg(Optional max_value As Variant = Null, Optional lookback As Integer = 5, Optional table As String = \"\", Optional key As String = \"\", Optional this_y_year As String = \"\") As Double 'Look back at previous columns and average the numeric values found there, ignoring items before 2018, but including zeros 'max_value if provided is used instead of any higher values 'lookback is defaulted to 5 years 'If not provided, table, key and y_year are taken from the calling cell 'Return the average. Returns 0 if the count of valid items is 0. Dim y_year As String Dim point As Range, ws As Worksheet Dim value As Variant Set point = Application.caller If table = \"\" Then table = point.ListObject.Name End If If key = \"\" Then offset = point.ListObject.ListColumns(1).Range(1, 1).Column - 1 Set ws = point.Worksheet key = ws.Cells(point.Row, 1 + offset).value End If If this_y_year = \"\" Then this_y_year = this_col_name() End If this_year = IntYear(this_y_year) tot = 0 cnt = 0 For y = this_year - lookback To this_year - 1 If y < 2018 Then value = Null Else y_year = \"Y\" & y value = get_val(key, table, y_year) End If If Not IsNull(value) Then If Not IsNull(max_value) Then value = Application.WorksheetFunction.Min(max_value, value) End If tot = tot + value cnt = cnt + 1 End If Next y If cnt <> 0 Then rolling_avg = tot / cnt Else rolling_avg = 0 End If End Function Function simple_return(account As String, y_year As String) As Double 'return the rlzd gain divided by the average of the start and end balances (or zero) sb = get_val(\"Start Bal\" & account, \"tbl_balances\", y_year) eb = get_val(\"End Bal\" & account, \"tbl_balances\", y_year) rg = get_val(\"Rlz Int/Gn\" & account, \"tbl_balances\", y_year) urg = get_val(\"Unrlz Gn/Ls\" & account, \"tbl_balances\", y_year) av = (sb + eb) / 2 If av = 0 Then result = 0 Else result = (rg + urg) / av End If simple_return = result End Function Function sort_tax_table() 'make sure the federal tax tables are sorted properly Dim tbl_name As String tbl_name = \"tbl_fed_tax\" ws = ws_for_table_name(tbl_name) Dim tbl As ListObject Set tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name) Dim year_column As Range, Range_column As Range Set year_column = Range(tbl_name & \"[Year]\") Set Range_column = Range(tbl_name & \"[Range]\") With tbl.sort .SortFields.Clear .SortFields.Add key:=year_column, SortOn:=xlSortOnValues, Order:=xlAscending .SortFields.Add key:=Range_column, SortOn:=xlSortOnValues, Order:=xlAscending .Header = xlYes .Apply End With End Function Sub test_fed_tax() Dim r As Double, c As Double zt = \"not passed\" r = Federal_Tax(2150, 9999) If 0 = r Then zt = \"passed\" n = 74031 pt = \"not passed\" r = Federal_Tax(2020, 350000) If r = n Then pt = \"passed\" n = 72331 ct = \"not passed\" c = Fed_Tax_CapGn(2020, 350000, 10000) If c = n Then ct = \"passed\" Debug.Print (\"Zero test: \" & zt) Debug.Print (\"Positive test:\" & pt) Debug.Print (\"Capital gains test:\" & ct) End Sub Sub test_get_val() Dim tbl_name As String Dim line_name As String Dim y_year As String Debug.Print (get_val(\"Expenses:T:Soc Sec - TOTAL\", \"tbl_iande_actl\", \"Y2018\")) Debug.Print (get_val(\"End BalReal Estate\", \"tbl_balances\", \"Y2019\")) End Sub Sub test_LUMP() Dim val As Double val = LUMP(\"401K - GBD - TRV\", \"Y2022\") Debug.Print (val) End Sub Sub test_medicarePrem() Dim test_cases() As Variant Dim yr As String Dim infl As Variant Dim magi As Variant test_cases() = Array(Array(2021, 1#, 10000), Array(2022, 1#, 182001), Array(2022, 1#, 400000), Array(2023, 1.02, 75000)) log (\"Part B tests\") For I = LBound(test_cases) To UBound(test_cases) yr = \"Y\" & test_cases(I)(0) magi = test_cases(I)(2) infl = test_cases(I)(1) partB = PartBPrem(yr, infl, magi) partD = PartDSurcharge(yr, infl, magi) msg = \"Input: year=\" & test_cases(I)(0) & \" magi=\" & magi & \" inflation=\" & infl & \" Output: \" & partB & \" Part D: \" & partD log (msg) Next End Sub Sub test_mo_apply() Dim test_cases() As Variant Dim test_case As Variant Dim yr As String Dim start_date As Date, end_date As String, result As Double test_cases() = Array( _ Array(3, 2022, 2022), _ Array(12, 2025, 2025), _ Array(3, 2022, 2022, 11, 2022), _ Array(3, 2022, 2025, 9, 2025), _ Array(3, 2022, 2022, 8, 2022) _ ) log (\"mo_apply tests\") For I = LBound(test_cases) To UBound(test_cases) test_case = test_cases(I) start_date = DateSerial(test_case(1), test_case(0), 1) yr = \"Y\" & test_case(2) end_date = \"-none-\" If UBound(test_case) > 2 Then end_date = test_case(3) & \"/1/\" & test_case(4) result = mo_apply(start_date, yr, end_date) Else result = mo_apply(start_date, yr) End If msg = \"Input: year=\" & yr & \" start/end dates = \" & start_date & \" \" & end_date & \" Output: \" & result log (msg) Next I End Sub Sub test_nth() Debug.Print (nth_word_into(0, \"fed tax value\", \"Taxes for %s\")) End Sub Sub test_sort() sort_tax_table End Sub Function this_col_name() As String 'return the caller's column name, assuming the cell is in a table. 'Otherwise generates a #VALUE error 'Use to make formulas more portable Dim point As Range Dim list_ojb As ListObject Dim cols As ListColumns Dim offset As Integer, col_ix As Integer Set point = Application.caller Set list_obj = point.ListObject Set cols = list_obj.ListColumns offset = list_obj.Range(1, 1).Column - 1 col_ix = offset + point.Column this_col_name = cols(col_ix) End Function Function unrlz(acct As String, y_year As String) As Variant 'compute the unrealized gain or loss for an account for a year, assuming end bal is fixed Dim open_bal As Variant, adds As Variant, rlzd As Variant, end_bal As Variant Dim val As Variant open_bal = get_val(\"Start bal\" & acct, \"tbl_balances\", y_year) adds = get_val(\"Add/Wdraw\" & acct, \"tbl_balances\", y_year) rlzd = get_val(\"Rlz Int/Gn\" & acct, \"tbl_balances\", y_year) end_bal = get_val(\"End bal\" & acct, \"tbl_balances\", y_year) val = end_bal - (open_bal + adds + rlzd) unrlz = val End Function Function ws_for_table_name(tbl_name As String) As String ' find out what worksheet the named table occurs on With ThisWorkbook.Worksheets(\"utility\") Set rng = .ListObjects(\"tbl_table_map\").DataBodyRange ws = Application.WorksheetFunction.VLookup(tbl_name, rng, 2, False) End With ws_for_table_name = ws End Function Function y_offset(y_year As String, offset As Integer) As String 'given a y_year offset it by the amount given, producing a new y_year y = IntYear(y_year) r = \"Y\" & y + offset y_offset = r End Function","title":"VBA Code"},{"location":"worksheets/","text":"Worksheets accounts This worksheet lists the tracked accounts and their attributes. Some of these accounts are real accounts at financial institutions. Others summarize sets of assets or liabilities. One account is designated as the sweep account. The attributes are: Name Description Account The name of the account or summay set Type A=Asset, B=Bank, C=Credit Cards, I=Investment, L=Liability, N=Loans Income Txbl 0 if sheltered, 1 if normal taxes Active 0 if inactive, 1 if active No Distr Plan 0 if there is a distribution plan, 1 otherwise, blank for n/a Near Mkt Rate Rate to use to override the first forecast year computed rate Rate Cap Rate used to cap computed rates Reinv Rate Amount used to initialize the Reinv Rate row on the balances table Actl_source The line name where to find the actual add/wdraw amount Actl_source_tab The table name where to find the actual add/wdraw amount Fcst_source The line name where to find the forecast add/wdraw amount Fcst_source_tab The table name where to find the forecast add/wdraw amount Notes Place to indicate special things about the account balances The following fields are looked up from the account page: Type, Income Txbl, and Active. This table has the following rows for each account. ValType Formula Mkt Gn Rate Used to forecast unrealized gains. Computed with simple_return for historical rows. Reinv Rate The part of realized gains that is reinvested each year. Proper modeling also requires consideration of re-investment policies, which are modeled as a re-investment rate per account per year. TODO : The remainder is planned to be transfered to the primary bank (new item in General State) Start Bal Previous year's end balance Add/Wdraw The amount added to the account during the year if positive, or removed if negative. Either manual, or some rows will have formulas Rlz Int/Gn The actual or forecast realized gain, including income and any capital gains or losses. Fees Account and transaction fees which reduce the value of the account Unrlz Gn/Ls The unrealized gains due to market changes End Bal Adds the start balance to each of the other change categories. The calculations are designed to work even if the rows are filtered or sorted. To restore to the natural sort order sort by AcctName then ValType (using a custom sort order that needs to be defined). Rlz Int/Gn line For actuals, this value derives from the investment performance report[^2] via the invest_actl worksheet . For forecast periods, the investment income and expense values are derived from adjusted extrapolated historical rates on line item basis. These values are then summed one way for the balances and another way for the iande tab. iande This is for income and expenses. This is both actuals and forecast. It has two leading columns then the actual and forecast years: Name Description Key The full multi-level category name, anchored as Income or Expense, such as Expenses:T:Income Tax:Current Yr:Fed:Est pmts . This column is normally hidden. Account The last portion of the key, indented by two spaces for each level The levels are grouped using Excel's grouping, so they can be expanded or collapsed. This tab is seeded with the original iande-actl data. But it is expected that over time the rows will change. For instance, if we later drop the first few years, we will find that some of the rows no longer come over from Moneydance. On the other hand, we may add rows in Moneydance. It is also possible that we may want to re-organize or rename the rows. Take deleted rows first. Deleted Rows - The python script that loads the latest from Moneydance performs a check before executing the load. It requires that any row that contains data or a fomula in the forecast era exist in the fresh import from Moneydance, when seeding the iande data. New rows - The new rows will be added into the tbl_iande-actl table but the tbl_iande won't know about them, possibly yielding totals that don't match. At this point its up to the operator to make any needed adjustments to tbl_iande so that it's consistent with the actuals feed. Note - if new subcategories are created: then its best to insert them on tbl_iande so that what used to be a leaf node now has no data (its just a heading), copy the fixed values to the new rows and ensure the subtotals are proper for non-fixed (forecast values). Note: the report filters out categories that do not have any actuals. In order to create forecasts for these, go ahead and create the desired rows in Moneydance and manually construct the rows in tbl_iande . Re-arrangement and renaming - At this point its up to the operator to make any needed adjustments to tbl_iande so that it's consistent with the actuals feed. The net of this is that except during periods of change, the rows of the iande tab and the rows of the iande-actl tab form the same set. We don't require these to be in the same order. aux This is a set of rows needed to establish forecasts in some cases. The rows may be input or calculated. The need arises for aux data and calcs, for instance, in handling 401K accounts, where the EE contribution is tax deductable but is only part of the amount for add/wdraw at the balance level. That value plus the pre-tax deductions amounts from the paychecks need to be summed to produce the W2 exclusions. This is the place where those calcs happen. The calculations are flexible, but they often use the form of looking up a value and multiplying it by the value in the sign field. Mostly the sign field is used to change or retain the sign, but it can be used to apply a scalar value such as a tax rate. The following style is used to allow the table to be relocated and makes the formula apparent from the values in cells. =@get_val([@Source],[@[Source Table]],this_col_name())*[@Sign] this_col_name is a VBA function that gets the current column table name. The field 'Accum_by' is intended to allow summations using the accum function. If a value needs more than one tag, create another row with the same data and a different tag. An example of this 401K deductions, which generate W2 exclusions on one hand and the need to deposit amounts into the 401K account. invest_iande_work This sheet refers to Income and Expenses that relate to investments. The upper left quadrant of the sheet refers to actual values for several categories. These are converted to ratios in the lower left quadrant, so that forecasts can be derived. The table consists of - a set of lines of type value that represent income and expenses for each account - a matching set of lines with a type of rate to hold the ratio to the start bal . These are computed in the case of actuals. The actual rates are extended into the forecast periods where they are used to compute forecasts for each of the income/expense types. The following categories were devised to support forecasting investment income and taxes[^3]. Category Supports CapGn:Mut LT Long term mutual fund distributions. For taxable accounts - supports tax calc CapGn:Mut ST Long term mutual fund distributions. For taxable accounts - supports tax calc CapGn:Sales Gains or losses from sales in taxable accounts CapGn:Shelt:Distr Mutual fund distributions of any duration in non-taxable accounts CapGn:Shelt:Sales Gains or losses from sales in non-taxable accounts Div:Reg Regular dividends in taxable accounts Div:Shelt Dividends in non-taxable accounts Div:Tax-exempt[^1] Dividends exempt from federal tax in taxable accounts Int:Reg Interest in taxable accounts Int:Shelt Interest in non-taxable accounts Int:Tax-exempt Interest exempt from federal tax in taxable accounts The actuals derive from a Moneydance report: Investment IandE, which is a configured Transaction Filter that selects just the investment income and expense lines for all accounts. It should select dates over the years that are actuals. The result is saved into invest-iande.tsv . The values are summarized by investment accounts for each of the categories. These become the numerators of the actual rates experience for each category for each account. The denominator is the opening balance of the account. Its imperfect for accounts where money is moved in or out during the year, but it is adequate for its use of setting default rates for forecast years. The summarization is done on they Python side at load time. The ratios are calculated in the spreadsheet. Rates are rounded to 1 basis point (.01%). The rolling average of the previous periods is used to carry the rates into the forecast period. These averages may be modified by the rate cap set on the accounts tab. On the balances table the Rlzd Int/Gn and Fees lines are derived as sums from this table. On the iande table the forecasts for investment income and expense are also summed up from the values in this table. Forecasts for these lines are calculated as the sum across all accounts for the line for forecast periods. For actual periods those values will derive directly from the Moneydance income and expense report. retirement Plans out income streams and post-retirement medical expenses. This affects both the balances and the iande tabs. Retirement medical are modeled here. Deductibles and copays are in 'other'. These values are posted as totals in the premium lines of IANDE and are meant to represent all net medical expenses. Name Description Item A computed key, composed of type, whose, and firm. Who Initials of who owns this account or JNT for joint. Normally hidden. Type See conventions . Normally hidden. Firm The firm holding the account. Normally hidden. Election A code for the distribution election on this item. Start Date Expected start date for the distribution or expense Anny Dur Yrs If an annuity is elected, how many years should it run. Anny Rate The rate used for the annuity Yearly For non-annuity ongoing values (pensions), yearly amount. retireparms Social Security This table creates a key for the selected social security election, by which the retirement table can find the value. pension facts Facts about pensions used by retirement sheet. iande-actl This is Income and Expense actuals as it comes from Moneydance Income & Expense by Year report. A key is constructed which includes the hierarchy. That occurs in the A column. The summary rows are replaced by formulas as part of the import process. These can be copied into future years. The column headings are of the Y+year style to facilitate lookups. This data is loaded from data/iande.tsv with the program iande-actl-load.py IRA-Txbl-Distr This line is needed to handle the accounting difficulty that arises with IRA distributions when the source account is in Moneydance (see note). The gross amount is taxable and thus needs to be included in the tax calculation. However, the tax amounts go to the state and federal expense lines and the net goes to the receiving bank. There is no place to declare income. The solution allows a uniform way of handling the data (at the cost of a bit of special handling). The solution uses a Moneydance tag, IRA-Txbl-Distr on those transactions. This involves editing the transactions that are downloaded from the financial institution to add in the tag. This needs to be done in the Bank Register view not the Register view. The tags field is only shown in the Bank Register view. This data is exported from Moneydance via the IRA-Distr report, and saved in the data/IRA-Distr.tsv file. It is then imported via special handling in IRA_distr processes the transactions to create a table tbl_ira_dist . The IRA-Txbl-Distr line on the tbl_iande pulls from that table. From there it flows to the taxes tab. The value in iande_actl may have values for some years (if the distribution comes from an account not tracked by Moneydance. This can happen with an inherited IRA). It should match to what is in the iande table. If not then the tags probably have not been set correctly. other_actl This sheet holds several tables of other actuals. Payroll Savings incl ER contributions Used by cash flow calcs on IandE. Roth contributions Used in tax calcs. 529 plan distributions Used to populate untaxed income lines in iande. IRA distributions Used to populate retirement income:IRA-Txbl-Distr on iande. HSA disbursements Used to populate untaxed income lines in iande. Bank transfers to/from selected investments Used by cash flow calcs on IandE. Manually input actual items Mostly values needed for tax calcs. A number of entries are needed to determine taxes. When easiest, these are input on this table: tbl_manual_actl . A Moneydance report W2-exclusions extracts the amounts that can be excluded from the W2s. This relies on the Pre-tax and pre-tax tags. These should be input manually. Computes the actual 401K contributions to post to the iande tab. transfers-actl Gathers the transfers to and from all accounts coming from or going to banks or credit cards. This also shows the transfers to and from bank and credit card accounts. The bank and credit card transfers are derived another way and are also included on this tab. If there are transfers between these accounts, then they should pass through a bank account in order to be captured here. That is the purpose of the pseudo bank account 'Passthru' and its sub-accounts in Moneydance. This tab is loaded by transfers-actl-load.py from these sources: A copy of the output of moneydance transfer report stored under budget/data . The method used is the difference of progressive balances. The balances are generated by the Account Balances report selecting only banks and credit cards. This is done for each year. The tab-separated files are stored under budget/data as bank-bal-YYYY . A third method is planned which will ensure that all accounts have rows - even those with zero transfers. invest-actl The Python program invest-actl-load.py gets the master list of investment accounts from fcast.xlsm . It then reads the data/invst_*.tsv files and computes the net flows for each account by year. The MoneyDance Investment Performance report is named invest-p-YYYY.tsv . There is one for each actual year. The program reads these as well. It ends up with 5 rows of actuals for each investment. The values types are: ValType Description Add/Wdraw Amount moved into or out of account Rlz Int/Gn Income + Realized Gains Unrlz Gn/Ls Unrealized gains Income Interest and Dividends Gains Realized Gains This can be used to look up the actuals on the balances tab. The visual basic function gain references the realized and unrealized gain lines for actuals. the visual basic function add_wdraw likewise references the first line. taxes This computes Federal and State income taxes. It requires the data from the tables tab. For actuals it pulls data mostly from iande-actl. A few income fields need to come from tax documents. capgn This is for the purposes of estimating taxes for the current and prior year until tax statements arrive reconciling between balances (which includes realized capital gains) and income (which only includes capital gains arising as dividends, but not from sales of securities). tax_tables A table of state tax information, tax tables, Medicare Part B premiums, inflation, required minimum distribution tables, and a general state mangement table. Federal tax tables These use the subtraction method in IRS pub detailed here: https://www.irs.gov/pub/irs-pdf/i1040gi.pdf. This takes 6 rows and 4 columns per year. These are organized in a single table. A VBA macro is used to select the right values for use on the taxes tab. The prgram bracket_fix.py computes the numbers for the subtraction table based on a csv file which is shows the values using the additive method. Not sure where I found that file, most recently, I recreated the format. Kind of painful. May be best to wait for the 1040 Instructions to be published each year. (Or find a reliable source) CT Tax Table Married Joint Multiple years of tax tables for this slice. Reqd Min Distr Table I Table I is for beneficiaries (inherited IRA). Uniform Lifetime Table Also known as Table III, this table is for normal (not inherited) plans. gen_tables A table of state tax information, Medicare Part B premiums, inflation, and a general state mangement table. state taxes This compiles facts about various states for the purpose of considering relocation. Can be referenced in the tax calcs. Source: https://www.kiplinger.com/tool/retirement/T055-S001-state-by-state-guide-to-taxes-on-retirees/index.php Part B Premium Values to select the premium given modified AGI and year. Also includes the part D adjustment. inflation 3 columns about 75 rows General State Originally this has only one value, the first forecast year. Other items have been added, so the name is not great. [^1]: Tax exemption is in reality further broken down into federal and state. In theory it should be implemented on a per security basis. But it only matters for taxation so it is handled by custom lines on the taxes sheet by year. [^2]: This report does not break out the income types. If the accounting is done properly then the breakout for a particular investment account can be achieved via an income/expense report that selects that account. The value of the performance report 'Income' column total is equal to the value of the Investment Income report line Income - TOTAL. [^3]: See Appendix","title":"Worksheets"},{"location":"worksheets/#worksheets","text":"","title":"Worksheets"},{"location":"worksheets/#accounts","text":"This worksheet lists the tracked accounts and their attributes. Some of these accounts are real accounts at financial institutions. Others summarize sets of assets or liabilities. One account is designated as the sweep account. The attributes are: Name Description Account The name of the account or summay set Type A=Asset, B=Bank, C=Credit Cards, I=Investment, L=Liability, N=Loans Income Txbl 0 if sheltered, 1 if normal taxes Active 0 if inactive, 1 if active No Distr Plan 0 if there is a distribution plan, 1 otherwise, blank for n/a Near Mkt Rate Rate to use to override the first forecast year computed rate Rate Cap Rate used to cap computed rates Reinv Rate Amount used to initialize the Reinv Rate row on the balances table Actl_source The line name where to find the actual add/wdraw amount Actl_source_tab The table name where to find the actual add/wdraw amount Fcst_source The line name where to find the forecast add/wdraw amount Fcst_source_tab The table name where to find the forecast add/wdraw amount Notes Place to indicate special things about the account","title":"accounts"},{"location":"worksheets/#balances","text":"The following fields are looked up from the account page: Type, Income Txbl, and Active. This table has the following rows for each account. ValType Formula Mkt Gn Rate Used to forecast unrealized gains. Computed with simple_return for historical rows. Reinv Rate The part of realized gains that is reinvested each year. Proper modeling also requires consideration of re-investment policies, which are modeled as a re-investment rate per account per year. TODO : The remainder is planned to be transfered to the primary bank (new item in General State) Start Bal Previous year's end balance Add/Wdraw The amount added to the account during the year if positive, or removed if negative. Either manual, or some rows will have formulas Rlz Int/Gn The actual or forecast realized gain, including income and any capital gains or losses. Fees Account and transaction fees which reduce the value of the account Unrlz Gn/Ls The unrealized gains due to market changes End Bal Adds the start balance to each of the other change categories. The calculations are designed to work even if the rows are filtered or sorted. To restore to the natural sort order sort by AcctName then ValType (using a custom sort order that needs to be defined).","title":"balances"},{"location":"worksheets/#rlz-intgn-line","text":"For actuals, this value derives from the investment performance report[^2] via the invest_actl worksheet . For forecast periods, the investment income and expense values are derived from adjusted extrapolated historical rates on line item basis. These values are then summed one way for the balances and another way for the iande tab.","title":"Rlz Int/Gn line"},{"location":"worksheets/#iande","text":"This is for income and expenses. This is both actuals and forecast. It has two leading columns then the actual and forecast years: Name Description Key The full multi-level category name, anchored as Income or Expense, such as Expenses:T:Income Tax:Current Yr:Fed:Est pmts . This column is normally hidden. Account The last portion of the key, indented by two spaces for each level The levels are grouped using Excel's grouping, so they can be expanded or collapsed. This tab is seeded with the original iande-actl data. But it is expected that over time the rows will change. For instance, if we later drop the first few years, we will find that some of the rows no longer come over from Moneydance. On the other hand, we may add rows in Moneydance. It is also possible that we may want to re-organize or rename the rows. Take deleted rows first. Deleted Rows - The python script that loads the latest from Moneydance performs a check before executing the load. It requires that any row that contains data or a fomula in the forecast era exist in the fresh import from Moneydance, when seeding the iande data. New rows - The new rows will be added into the tbl_iande-actl table but the tbl_iande won't know about them, possibly yielding totals that don't match. At this point its up to the operator to make any needed adjustments to tbl_iande so that it's consistent with the actuals feed. Note - if new subcategories are created: then its best to insert them on tbl_iande so that what used to be a leaf node now has no data (its just a heading), copy the fixed values to the new rows and ensure the subtotals are proper for non-fixed (forecast values). Note: the report filters out categories that do not have any actuals. In order to create forecasts for these, go ahead and create the desired rows in Moneydance and manually construct the rows in tbl_iande . Re-arrangement and renaming - At this point its up to the operator to make any needed adjustments to tbl_iande so that it's consistent with the actuals feed. The net of this is that except during periods of change, the rows of the iande tab and the rows of the iande-actl tab form the same set. We don't require these to be in the same order.","title":"iande"},{"location":"worksheets/#aux","text":"This is a set of rows needed to establish forecasts in some cases. The rows may be input or calculated. The need arises for aux data and calcs, for instance, in handling 401K accounts, where the EE contribution is tax deductable but is only part of the amount for add/wdraw at the balance level. That value plus the pre-tax deductions amounts from the paychecks need to be summed to produce the W2 exclusions. This is the place where those calcs happen. The calculations are flexible, but they often use the form of looking up a value and multiplying it by the value in the sign field. Mostly the sign field is used to change or retain the sign, but it can be used to apply a scalar value such as a tax rate. The following style is used to allow the table to be relocated and makes the formula apparent from the values in cells. =@get_val([@Source],[@[Source Table]],this_col_name())*[@Sign] this_col_name is a VBA function that gets the current column table name. The field 'Accum_by' is intended to allow summations using the accum function. If a value needs more than one tag, create another row with the same data and a different tag. An example of this 401K deductions, which generate W2 exclusions on one hand and the need to deposit amounts into the 401K account.","title":"aux"},{"location":"worksheets/#invest_iande_work","text":"This sheet refers to Income and Expenses that relate to investments. The upper left quadrant of the sheet refers to actual values for several categories. These are converted to ratios in the lower left quadrant, so that forecasts can be derived. The table consists of - a set of lines of type value that represent income and expenses for each account - a matching set of lines with a type of rate to hold the ratio to the start bal . These are computed in the case of actuals. The actual rates are extended into the forecast periods where they are used to compute forecasts for each of the income/expense types. The following categories were devised to support forecasting investment income and taxes[^3]. Category Supports CapGn:Mut LT Long term mutual fund distributions. For taxable accounts - supports tax calc CapGn:Mut ST Long term mutual fund distributions. For taxable accounts - supports tax calc CapGn:Sales Gains or losses from sales in taxable accounts CapGn:Shelt:Distr Mutual fund distributions of any duration in non-taxable accounts CapGn:Shelt:Sales Gains or losses from sales in non-taxable accounts Div:Reg Regular dividends in taxable accounts Div:Shelt Dividends in non-taxable accounts Div:Tax-exempt[^1] Dividends exempt from federal tax in taxable accounts Int:Reg Interest in taxable accounts Int:Shelt Interest in non-taxable accounts Int:Tax-exempt Interest exempt from federal tax in taxable accounts The actuals derive from a Moneydance report: Investment IandE, which is a configured Transaction Filter that selects just the investment income and expense lines for all accounts. It should select dates over the years that are actuals. The result is saved into invest-iande.tsv . The values are summarized by investment accounts for each of the categories. These become the numerators of the actual rates experience for each category for each account. The denominator is the opening balance of the account. Its imperfect for accounts where money is moved in or out during the year, but it is adequate for its use of setting default rates for forecast years. The summarization is done on they Python side at load time. The ratios are calculated in the spreadsheet. Rates are rounded to 1 basis point (.01%). The rolling average of the previous periods is used to carry the rates into the forecast period. These averages may be modified by the rate cap set on the accounts tab. On the balances table the Rlzd Int/Gn and Fees lines are derived as sums from this table. On the iande table the forecasts for investment income and expense are also summed up from the values in this table. Forecasts for these lines are calculated as the sum across all accounts for the line for forecast periods. For actual periods those values will derive directly from the Moneydance income and expense report.","title":"invest_iande_work"},{"location":"worksheets/#retirement","text":"Plans out income streams and post-retirement medical expenses. This affects both the balances and the iande tabs. Retirement medical are modeled here. Deductibles and copays are in 'other'. These values are posted as totals in the premium lines of IANDE and are meant to represent all net medical expenses. Name Description Item A computed key, composed of type, whose, and firm. Who Initials of who owns this account or JNT for joint. Normally hidden. Type See conventions . Normally hidden. Firm The firm holding the account. Normally hidden. Election A code for the distribution election on this item. Start Date Expected start date for the distribution or expense Anny Dur Yrs If an annuity is elected, how many years should it run. Anny Rate The rate used for the annuity Yearly For non-annuity ongoing values (pensions), yearly amount.","title":"retirement"},{"location":"worksheets/#retireparms","text":"","title":"retireparms"},{"location":"worksheets/#social-security","text":"This table creates a key for the selected social security election, by which the retirement table can find the value.","title":"Social Security"},{"location":"worksheets/#pension-facts","text":"Facts about pensions used by retirement sheet.","title":"pension facts"},{"location":"worksheets/#iande-actl","text":"This is Income and Expense actuals as it comes from Moneydance Income & Expense by Year report. A key is constructed which includes the hierarchy. That occurs in the A column. The summary rows are replaced by formulas as part of the import process. These can be copied into future years. The column headings are of the Y+year style to facilitate lookups. This data is loaded from data/iande.tsv with the program iande-actl-load.py","title":"iande-actl"},{"location":"worksheets/#ira-txbl-distr","text":"This line is needed to handle the accounting difficulty that arises with IRA distributions when the source account is in Moneydance (see note). The gross amount is taxable and thus needs to be included in the tax calculation. However, the tax amounts go to the state and federal expense lines and the net goes to the receiving bank. There is no place to declare income. The solution allows a uniform way of handling the data (at the cost of a bit of special handling). The solution uses a Moneydance tag, IRA-Txbl-Distr on those transactions. This involves editing the transactions that are downloaded from the financial institution to add in the tag. This needs to be done in the Bank Register view not the Register view. The tags field is only shown in the Bank Register view. This data is exported from Moneydance via the IRA-Distr report, and saved in the data/IRA-Distr.tsv file. It is then imported via special handling in IRA_distr processes the transactions to create a table tbl_ira_dist . The IRA-Txbl-Distr line on the tbl_iande pulls from that table. From there it flows to the taxes tab. The value in iande_actl may have values for some years (if the distribution comes from an account not tracked by Moneydance. This can happen with an inherited IRA). It should match to what is in the iande table. If not then the tags probably have not been set correctly.","title":"IRA-Txbl-Distr"},{"location":"worksheets/#other_actl","text":"This sheet holds several tables of other actuals.","title":"other_actl"},{"location":"worksheets/#payroll-savings-incl-er-contributions","text":"Used by cash flow calcs on IandE.","title":"Payroll Savings incl ER contributions"},{"location":"worksheets/#roth-contributions","text":"Used in tax calcs.","title":"Roth contributions"},{"location":"worksheets/#529-plan-distributions","text":"Used to populate untaxed income lines in iande.","title":"529 plan distributions"},{"location":"worksheets/#ira-distributions","text":"Used to populate retirement income:IRA-Txbl-Distr on iande.","title":"IRA distributions"},{"location":"worksheets/#hsa-disbursements","text":"Used to populate untaxed income lines in iande.","title":"HSA disbursements"},{"location":"worksheets/#bank-transfers-tofrom-selected-investments","text":"Used by cash flow calcs on IandE.","title":"Bank transfers to/from selected investments"},{"location":"worksheets/#manually-input-actual-items","text":"Mostly values needed for tax calcs. A number of entries are needed to determine taxes. When easiest, these are input on this table: tbl_manual_actl . A Moneydance report W2-exclusions extracts the amounts that can be excluded from the W2s. This relies on the Pre-tax and pre-tax tags. These should be input manually. Computes the actual 401K contributions to post to the iande tab.","title":"Manually input actual items"},{"location":"worksheets/#transfers-actl","text":"Gathers the transfers to and from all accounts coming from or going to banks or credit cards. This also shows the transfers to and from bank and credit card accounts. The bank and credit card transfers are derived another way and are also included on this tab. If there are transfers between these accounts, then they should pass through a bank account in order to be captured here. That is the purpose of the pseudo bank account 'Passthru' and its sub-accounts in Moneydance. This tab is loaded by transfers-actl-load.py from these sources: A copy of the output of moneydance transfer report stored under budget/data . The method used is the difference of progressive balances. The balances are generated by the Account Balances report selecting only banks and credit cards. This is done for each year. The tab-separated files are stored under budget/data as bank-bal-YYYY . A third method is planned which will ensure that all accounts have rows - even those with zero transfers.","title":"transfers-actl"},{"location":"worksheets/#invest-actl","text":"The Python program invest-actl-load.py gets the master list of investment accounts from fcast.xlsm . It then reads the data/invst_*.tsv files and computes the net flows for each account by year. The MoneyDance Investment Performance report is named invest-p-YYYY.tsv . There is one for each actual year. The program reads these as well. It ends up with 5 rows of actuals for each investment. The values types are: ValType Description Add/Wdraw Amount moved into or out of account Rlz Int/Gn Income + Realized Gains Unrlz Gn/Ls Unrealized gains Income Interest and Dividends Gains Realized Gains This can be used to look up the actuals on the balances tab. The visual basic function gain references the realized and unrealized gain lines for actuals. the visual basic function add_wdraw likewise references the first line.","title":"invest-actl"},{"location":"worksheets/#taxes","text":"This computes Federal and State income taxes. It requires the data from the tables tab. For actuals it pulls data mostly from iande-actl. A few income fields need to come from tax documents.","title":"taxes"},{"location":"worksheets/#capgn","text":"This is for the purposes of estimating taxes for the current and prior year until tax statements arrive reconciling between balances (which includes realized capital gains) and income (which only includes capital gains arising as dividends, but not from sales of securities).","title":"capgn"},{"location":"worksheets/#tax_tables","text":"A table of state tax information, tax tables, Medicare Part B premiums, inflation, required minimum distribution tables, and a general state mangement table.","title":"tax_tables"},{"location":"worksheets/#federal-tax-tables","text":"These use the subtraction method in IRS pub detailed here: https://www.irs.gov/pub/irs-pdf/i1040gi.pdf. This takes 6 rows and 4 columns per year. These are organized in a single table. A VBA macro is used to select the right values for use on the taxes tab. The prgram bracket_fix.py computes the numbers for the subtraction table based on a csv file which is shows the values using the additive method. Not sure where I found that file, most recently, I recreated the format. Kind of painful. May be best to wait for the 1040 Instructions to be published each year. (Or find a reliable source)","title":"Federal tax tables"},{"location":"worksheets/#ct-tax-table-married-joint","text":"Multiple years of tax tables for this slice.","title":"CT Tax Table Married Joint"},{"location":"worksheets/#reqd-min-distr-table-i","text":"Table I is for beneficiaries (inherited IRA).","title":"Reqd Min Distr Table I"},{"location":"worksheets/#uniform-lifetime-table","text":"Also known as Table III, this table is for normal (not inherited) plans.","title":"Uniform Lifetime Table"},{"location":"worksheets/#gen_tables","text":"A table of state tax information, Medicare Part B premiums, inflation, and a general state mangement table.","title":"gen_tables"},{"location":"worksheets/#state-taxes","text":"This compiles facts about various states for the purpose of considering relocation. Can be referenced in the tax calcs. Source: https://www.kiplinger.com/tool/retirement/T055-S001-state-by-state-guide-to-taxes-on-retirees/index.php","title":"state taxes"},{"location":"worksheets/#part-b-premium","text":"Values to select the premium given modified AGI and year. Also includes the part D adjustment.","title":"Part B Premium"},{"location":"worksheets/#inflation","text":"3 columns about 75 rows","title":"inflation"},{"location":"worksheets/#general-state","text":"Originally this has only one value, the first forecast year. Other items have been added, so the name is not great. [^1]: Tax exemption is in reality further broken down into federal and state. In theory it should be implemented on a per security basis. But it only matters for taxation so it is handled by custom lines on the taxes sheet by year. [^2]: This report does not break out the income types. If the accounting is done properly then the breakout for a particular investment account can be achieved via an income/expense report that selects that account. The value of the performance report 'Income' column total is equal to the value of the Investment Income report line Income - TOTAL. [^3]: See Appendix","title":"General State"}]}