{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tools to map accounting data to long term plans","text":"<p>The accounting system is Moneydance.  The long term planning is via Excel.</p> <p>This spreadsheet extends the family's historical financials into the future.  It allows for modeling and planning for </p> <ul> <li>Income and expenses (combined with cash flow)</li> <li>Accounts balances and transfers (including investments)</li> <li>Working life and retirement phases</li> <li>Federal and state income taxes. The tax calculator is far from general.</li> </ul> <p>The spreadsheet is built by Python programs.  Actual data is based on data exported from Moneydance.</p> <p>Spreadsheet</p> <p>Operations</p> <p>Python is the glue</p> <p>Visual Basic</p> <p>Getting Started</p>"},{"location":"data_files/","title":"Data Files","text":""},{"location":"data_files/#privacy","title":"Privacy","text":"<p>The data folder is excluded from github for privacy reasons.</p>"},{"location":"data_files/#conventions","title":"Conventions","text":""},{"location":"data_files/#file-types","title":"File types","text":"<p>Set up files are either </p> <ul> <li>tab separated values with extension .tsv</li> <li>JSON with extension .json.  These are typically exports from tables defined in Excel. There are two types depending on the 'orientation'.  </li> <li>YAML - used for the setup config definitions</li> </ul>"},{"location":"data_files/#file-locations","title":"File locations","text":"<p>Files are in the data folder under the project.  The data folder is not included in the git repository. </p> <p>To make more manageable, the files that have a version each year are placed in subfolders.  The under the sub-folder the files are simply named yyyy.tsv.</p> <p>A listing of the files can be had with </p> <pre><code>tree -PD '*.tsv' --prune data/\ntree -PD '*.json' --prune data/\n</code></pre>"},{"location":"data_files/#file-names","title":"File names","text":"<p>Preferred format uses hyphen not underscores or spaces to separate words. Abbreviations such as IRA and HSA are forced to lowercase, to aid sorting.</p>"},{"location":"data_files/#moneydance-reports-and-their-files","title":"Moneydance reports and their files","text":"<p>(Case sensitive sort to match Moneydance)</p> Report Periods File(s) Used in config by Other file use 401, HSA, ESP payroll data full years payroll_to_savings.tsv tbl_payroll_savings 529-Distr4 all years 529-distr.tsv tbl_529_distr Account Balances each year acct-bals-yyyy.tsv tbl_accounts1, tbl_balances2 bank_actl_load.py3 HSA - disbursements - 2 full years hsa-disbursements.tsv tbl_hsa_disb5 IRA-Distr6 all years ira-distr.tsv tbl_ira_distr Income &amp; Expense by Year full years iande.tsv tbl_iande,tbl_iande_actl Income &amp; Expense YTD Current year to date iande_ytd.tsv tbl_current Investment IandE7 full years invest-iande.tsv tbl_invest_iande_work Investment Performance each year invest-p-yyyy.tsv tbl_invest_actl7 Roth-contributions2 all years roth_contributions.tsv tbl_roth_contributions Transfers BKG detailed full years trans_bkg.tsv tbl_bank_sel_invest10 Transfers to Investment Accounts by Year full years invest-x.tsv tbl_invest_actl Transfers-to-fcast9 full years transfers.tsv tbl_transfers_actl"},{"location":"data_files/#other-data-files","title":"Other data files","text":""},{"location":"data_files/#json-input-files","title":"JSON input files","text":"<p>The following files can be prepared from an existing worksheet with the <code>dance/util/extract_table.py</code> utility, or they can be created manually. They are named according to the table that they support. </p> File Orientation ct_tax_rates.json records fed_tax_rates.json records gen_state.json index manual_actl.json index mcare_opt.json records part_b.json records pension_facts.json index people.json index social_security.json records state_tax_facts.json index"},{"location":"data_files/#orientation","title":"Orientation","text":"<p>Orientation of <code>index</code> is used when the first field is a unique key.  For example <code>gen_state.json</code> might contain:</p> <pre><code>{\n...\n\"ss_fed_wh\": {\n\"Value\": 0.22,\n\"Comment\": \"can be 7, 10, 12 or 22 see form W4-V as decimal\"\n},\n\"distr_fed_wh\": {\n\"Value\": 0.2,\n\"Comment\": \"Fed withholding used for pension &amp; IRA distributions\"\n},...\n}\n</code></pre> <p>When there is no key the orientation of <code>records</code> is used. For example <code>fed_tax_rates.json</code> might start with</p> <pre><code>[\n{\n\"Year\": 2022,\n\"Range\": 0,\n\"Rate\": 0.1,\n\"Subtract\": 0.0\n},\n{\n\"Year\": 2022,\n\"Range\": 20549,\n\"Rate\": 0.12,\n\"Subtract\": 410.88\n},...\n</code></pre>"},{"location":"data_files/#json-files-with-testing-values","title":"JSON files with testing values","text":"<p>The file <code>known_test_values.json</code> is set up to allow checking of the results against known historical values.</p>"},{"location":"data_files/#template-tsv-files","title":"Template tsv files","text":"<p>These files are used to seed their respective tables. They are styled as a Moneydance report saved as .tsv, so the first three lines are ignored. The 4th line contains headings and subsequent lines contain data.  Processing occurs specific to the type. In the case of taxes, indentation must be 3 spaces. </p> <ul> <li>retire_medical_template.tsv</li> <li>retire_template.tsv</li> <li>taxes_template.tsv</li> </ul> <p>The above files can be prepared from an existing worksheet with the <code>dance/util/extract_table.py</code> utility, or they can be created manually.</p> <ol> <li> <p>The most recent is best so as to contain all current accounts. This is used to create the Accounts worksheet.  The balances are not used, except that when they are zero, the account will be ignored unless it is specifically mentiond in the <code>include_zeros</code> section of the YAML.\u00a0\u21a9</p> </li> <li> <p>Another instance of the Account Balances is used to establish the opening balances on the Balances sheet. This may be for a different year.  If an earlier file is used, history can be included in the Balances sheet.\u00a0\u21a9</p> </li> <li> <p>All history years must be available in order to compute the flows to/from bank accounts and credit cards.\u00a0\u21a9</p> </li> <li> <p>529 Distributions depend on the tag <code>529-Distr</code> being used to make distributions but not inheritance or transfers.  Thus on the iande table it defrays the college expenses.\u00a0\u21a9</p> </li> <li> <p>These data are used to compute medical payments made from HSA accounts by year.\u00a0\u21a9</p> </li> <li> <p>This is a transaction filter report using the tag <code>IRA-Txbl-Distr</code> \u21a9</p> </li> <li> <p>This is a transaction filter that selects income and expense categories that are required to only apply to investments.\u00a0\u21a9\u21a9</p> </li> <li> <p>Investment actuals requires the transfers file and the performance files. It also depends on the data from the investment expenses to already be in place.\u00a0\u21a9</p> </li> <li> <p>This requires that if the Passthru account is used, it must only be used to transfer funds to/from banks.  In other words there is an assumption that it does not mask any movement to/from income or expense items.  Those must be directly in the investment account.\u00a0\u21a9</p> </li> <li> <p>Source accounts: All bank, credit card, income, expense and all HSA accounts. Target Accounts: All asset, liability &amp; loan. The HSA accounts (a subset of investments) are needed since they sometimes transfer to the medical providers.\u00a0\u21a9</p> </li> </ol>"},{"location":"data_from_moneydance/","title":"Data from Moneydance","text":""},{"location":"data_from_moneydance/#copy-income-and-expense-from-moneydance","title":"Copy Income and Expense from Moneydance","text":"<ol> <li>In Moneydance run <code>Income &amp; Expense by Year</code></li> <li>Save as <code>data/iande.tsv</code> </li> <li>Close spreadsheet and run the program  <code>iande-actl-load.py</code> </li> <li>Ensure that the formulas on the year are set to <code>getval...</code></li> <li>Check that income, tax and expense totals match to report: </li> <li>start at level 3 and drill down to find problems.</li> <li>IRA distributions are problematic see note IRA-Txbl-Distr</li> <li>If there are new categories - you will need to insert a line</li> </ol>"},{"location":"data_from_moneydance/#first-pass-on-the-taxes","title":"First pass on the taxes","text":"<p>The first pass does not rely on the tax forms, those come later - basically the bits that are not accounted for are entered into the manual_actl tab.</p> <ol> <li>Check W2 exclusions on aux</li> <li>Change the column for the year to use the actuals</li> <li>Carefully check the progression of the logic</li> </ol>"},{"location":"data_from_moneydance/#copy-transfers-data-from-moneydance","title":"Copy transfers data from Moneydance","text":"<ol> <li>Run report in Moneydance currently called Transfers-to-fcast for all actual periods.</li> <li>Press Save button and choose Tab delimited and save as <code>data/transfers.tsv</code></li> <li>(If a year has been completed run the Bank balance export procedure)</li> <li>If <code>fcast.xlsm</code> is open, save your work and close the file.</li> <li>Open a terminal window at the project root.</li> <li>Run <code>python transfers_actl_load.py</code></li> <li>Re-open the spreadsheet and save it to force balances to recalc and be stored.</li> </ol> <pre><code>&gt; dance/transfers_actl_load.py\n2022-08-19 12:49:34,546 - transfers_actl_load - INFO - loaded dataframe from data/transfers.tsv\n2022-08-19 12:49:34,839 - tables - INFO - Read table tbl_iande_actl from data/fcast.xlsm\n2022-08-19 12:49:34,839 - tables - INFO -   300 rows and 6 columns\n2022-08-19 12:49:35,124 - transfers_actl_load - INFO - loaded workbook from data/fcast.xlsm\n2022-08-19 12:49:35,162 - transfers_actl_load - INFO - First forecast year is: 2022\n2022-08-19 12:49:35,470 - books - INFO - deleted worksheet transfers_actl\n2022-08-19 12:49:35,470 - books - INFO - created worksheet transfers_actl\n2022-08-19 12:49:35,499 - tables - INFO - table tbl_transfers_actl added to transfers_actl\n</code></pre>"},{"location":"data_from_moneydance/#bank-balance-export-procedure","title":"Bank balance export procedure","text":"<p>The method used is the difference of progressive balances.  This is done for each year.  </p> <ol> <li>In Moneydance run the <code>Account Balances</code> report selecting only banks and credit cards.  </li> <li>Save the file as tab-separated under <code>budget/data</code> as <code>bank-bal-YYYY</code>.</li> <li>These files are consumed by the <code>transfers_actl_load.py</code> routine.</li> </ol>"},{"location":"data_from_moneydance/#investment-actuals","title":"Investment actuals","text":"<p>The Tranfers to Investment Accounts by Year report is saved as <code>invest-x.tsv</code>. The Investment Performance report for each year is saved under <code>invest-p-yyyy.tsv</code> for each year. These are processed by <code>invest_actl_load.py</code>. At each year end:</p> <ol> <li>Run Tranfers to Investment Accounts by Year and save as <code>invest_x.tsv</code></li> <li>For each year:</li> <li>Run <code>Investment Performance</code> report for the year and save under <code>invest-p-yyyy.tsv</code></li> <li>If <code>fcast.xlsm</code> is open, save your work and close the file.</li> <li>Open a terminal window at the project root.</li> <li>Run <code>invest_actl_load.py</code></li> <li>Re-open the spreadsheet and save it to force balances to recalc and be stored.</li> </ol> <pre><code>&gt;dance/invest_actl_load.py 2022-08-19 13:49:22,563 - invest_actl_load - INFO - loaded dataframe from data/invest_x.tsv\n2022-08-19 13:49:22,563 - invest_actl_load - INFO - Starting investment actual load\n2022-08-19 13:49:22,824 - tables - INFO - Read table tbl_accounts from data/fcast.xlsm\n2022-08-19 13:49:22,824 - tables - INFO -   27 rows and 10 columns\n2022-08-19 13:49:22,834 - invest_actl_load - INFO - Processing 2018\n2022-08-19 13:49:22,846 - invest_actl_load - INFO - Processing 2019\n2022-08-19 13:49:22,856 - invest_actl_load - INFO - Processing 2020\n2022-08-19 13:49:22,867 - invest_actl_load - INFO - Processing 2021\n2022-08-19 13:49:23,145 - books - INFO - deleted worksheet invest_actl\n2022-08-19 13:49:23,145 - books - INFO - created worksheet invest_actl\n2022-08-19 13:49:23,175 - tables - INFO - table tbl_invest_actl added to invest_actl\n</code></pre>"},{"location":"data_from_moneydance/#validate-balances-for-a-year","title":"Validate balances for a year","text":"<p>The routine <code>balance_check.py</code> is available to see how the values from the <code>Account Balances</code> report in Moneydance match to those in <code>fcast.xlsm</code>. </p> <ol> <li>In Moneydance run the <code>Account Balances</code> report selecting all accounts. </li> <li>Save the report  under the names: <code>data/acct-bals-yyyy.tsv</code>.</li> <li>If the year has rolled over in the spreadsheet</li> <li>change first_forecast_year in on the tables worksheet.</li> <li>In a terminal window set current directory to the project root and run <code>dance/balance_check.py yyyy</code> where yyyy is the year to check.  You should get a listing that shows the exact matches and the accounts that don't match (and how much they are off).</li> </ol>"},{"location":"data_from_moneydance/#add-an-account","title":"Add an account","text":"<ol> <li>On the accounts tab insert a row in the table</li> <li>Fill in all fields (notes is optional). Usually, the account name is used for the actl_source</li> <li>Create the rows on the balances table</li> </ol> Steps 1 Unhide all columns and sort by account name 2 Insert 6 new rows.  Put the account name in the first row of the AcctName field. 3 Copy down columns A, D, E, F from another account. 4 Copy the 6 value types into column B 5 Insert 6 copies of the new account name for each account in  column c 6 Copy formulas into 1st active year 7 Set the opening balance 8 When satisfied with actuals, copy formulas into 1st forecast period"},{"location":"data_from_moneydance/#rename-an-account","title":"Rename an account","text":"<p>It turns out to be useful to have an account naming convention.  The convention is      type - owner - firm where type is 401K, 529, BKG, ESP, HSA, IRA, IRA Roth, MUT, BNDand owner is JNT or the owner's initials.</p> <p>Notes </p> <ul> <li>BND is for - gov't bonds where TRY is for treasury - direct</li> </ul> <p>Here's what has to be done to rename an account.</p> <ol> <li> <p>The account name can be changed in Moneydance using the Tools -&gt; Accounts menu.</p> </li> <li> <p>It must be changed in fcst.xlsm at the following locations</p> </li> <li>tbl_accounts - it occurs in the A column and may occur in the G column</li> <li>tbl_balances</li> <li>Depending on the account it may occur in the following location</li> <li>tbl_retir, </li> <li>tbl_retir_parms</li> <li>The following should be refreshed: tbl_transfers_actl by running the procedure</li> </ol>"},{"location":"data_from_moneydance/#accounting","title":"Accounting","text":"<p>The computation of balances depends on the ability to determine the changes to the accounts.  </p>"},{"location":"data_from_moneydance/#investments","title":"Investments","text":"<p>The performance report provides opening and closing balances, income, gains and something called \"Return Amount\". It does not indicate unrealized gains per se.  The \"Return Amount\" is essentially a plug to get to the ending balance.  Note - income needs to be marked MiscInc (not transfer to the income category)</p> <p>Gains are essentially realized gains. Fees for purchases and/or sales of securities are included as part of the cost basis.  Other fees, that occur outside of the purchase or sale transaction are not included - such things as commissions, other account fees, and others. </p> <p>The other fees are rolled into the plug field (Return Amount), along with unrealized gains. It is better to include them in the Gains and therefore the 'Rlz Int/Gn' value in the spreadsheet. Thus when an account is closed, there will be no unrealized gains. </p> <p>To do this the investment fees need two categories.  Investing:Action Fees, Investing:Account Fees.  Only the account fee is selected in the Investment IandE report.  This allows the loading of investment actuals to add the account fees to the gains.  It also means that the transaction fees are not used to forecast future fees.  This is reasonable since they are by nature not asset based and the forecast method uses percentage of assets.</p>"},{"location":"data_from_moneydance/#other-assets","title":"Other Assets","text":"<p>The \"Other Asset\" account has several sub-accounts, including receivables from a few parties.  The method of determining the transfers depends is to use the <code>transfers-to-fcast</code> memorized report.  Some of the sub-accounts in Other Asset have transactions using expense categories.  To support this the memorized report includes all expenses in the criteria.  This correctly gathers the amounts such as depreciation for cars and payments made against some expense category (on our behalf).  The set of a target accounts configured in this report includes all investment, loan, asset and liability accounts.   Whenever there is a transfer between these accounts, this method essentially cancels out that values, which can lead to wrong balances.  Such transactions should be routed throught the <code>Passthru</code> bank account to avoid this problem.</p>"},{"location":"idioms/","title":"Some Excel idioms &amp; notes","text":""},{"location":"idioms/#this-column","title":"This column","text":"<p>Use the indirect method to locate this column.</p> Refer to this column<pre><code>INDIRECT(\"tbl_balances[\"&amp;this_col_name()&amp;\"]\")\n</code></pre>"},{"location":"idioms/#lookup","title":"Lookup","text":"<p>Use a value from this table to find a value in another table. The 4th parameter is the default if not found.</p> <p>Locate a value with a common key<pre><code>XLOOKUP([@AcctName],tbl_retir_vals[Item],INDIRECT(\"tbl_retir_vals[\"&amp;this_col_name()&amp;\"]\"),0)\n</code></pre> Here get the value for a year from the retirement table based on the account name.</p>"},{"location":"idioms/#construct-a-key","title":"Construct a key","text":"<p>Often the exact key has to be constructed.  Excel uses double quotes for strings and <code>&amp;</code> for concatenation.  TRIM is needed if the field is, say, indented.</p> Use string functions to construct key<pre><code>\"Add/Wdraw\"&amp;TRIM([@Account])\n</code></pre>"},{"location":"idioms/#delimited-strings-to-arrays","title":"Delimited strings to arrays","text":"<p>Often the field value may have delimiters and you need to pick out one of the sections.  User the TEXTSPLIT and INDEX functions. For instance to pick out the 2nd item of the field <code>key</code>. Note the delimiter can be longer than a single character.</p> Picking values between delimiters<pre><code>INDEX(TEXTSPLIT([@key],\" - \"),2)\n</code></pre>"},{"location":"idioms/#substring-match","title":"Substring match","text":"<p>Is a substring in a list?  Use SEARCH wrapped with ISNUMBER.</p> Find values with substring<pre><code>ISNUMBER(SEARCH(\"Start BalHSA - \"&amp;INDEX(TEXTSPLIT([@key],\" - \"),2),tbl_balances[Key]))\n</code></pre>"},{"location":"idioms/#is-value-in-a-list","title":"Is value in a list","text":"<p>For use in filters, determine if a value is in a list. Construct the list with curly brackets.  Use the type 0 for exact match.</p> Find values that match a list<pre><code>ISNUMBER(MATCH(tbl_balances[ValType],{\"Start Bal\",\"Add/Wdraw\",\"Reinv Amt\",\"Fees\",\"Unrlz Gn/Ls\"},0)\n</code></pre>"},{"location":"idioms/#filter-then-aggregate","title":"Filter then aggregate","text":"<p>Filters produce more than one row so the results have to be aggregated by SUM, PRODUCT, MIN or the like.</p> <p>Criteria are all required with multiplied together with *. To allow either criterion, use +.</p> <p>In this example several rows are selected to compute the end balance.</p> Filter with criteria 'anded'<pre><code>SUM(FILTER(INDIRECT(\"tbl_balances[\"&amp;this_col_name()&amp;\"]\"),(tbl_balances[AcctName]=tbl_balances[@AcctName])*ISNUMBER(MATCH(tbl_balances[ValType],{\"Start Bal\",\"Add/Wdraw\",\"Reinv Amt\",\"Fees\",\"Unrlz Gn/Ls\"},0))))\n</code></pre> <p>In another example, two items are multiplied: Pick two rows and multiply them<pre><code>PRODUCT(FILTER(INDIRECT(\"tbl_balances[\"&amp;this_col_name()&amp;\"]\"),(tbl_balances[AcctName]=tbl_balances[@AcctName])*((tbl_balances[ValType]=\"Reinv Rate\")+(tbl_balances[ValType]=\"Rlz Int/Gn\"))))\n</code></pre></p>"},{"location":"idioms/#if-filter-can-empty","title":"If filter can empty","text":"<p>If the result can be empty then use the if_empty parameter</p> Last parm of FILTER is 0 to allow empty set<pre><code>=-SUM(FILTER(INDIRECT(\"tbl_retir_vals[\"&amp;this_col_name()&amp;\"]\"),(tbl_retir_vals[Item]=TRIM([@Account]))*(tbl_retir_vals[Election]=\"ROLLOVER\"),0))\n</code></pre>"},{"location":"idioms/#convert-transaction-format-to-net-change","title":"Convert transaction format to net change","text":"<p>The <code>transfers_plan</code> table is in a transactional format, with a year, two accounts (from and to) and a value.  This ensures that both sides of the transaction are accounted for.  However, most other tables have a net change style - what happens to a particular account in a year. This formula converts the plan to the net change format.</p> <p>Working in memory, two arrays element by element, then add them up.</p>"},{"location":"idioms/#construct-debitcredit-array-for-account","title":"Construct debit/credit array for account","text":""},{"location":"idioms/#make-boolean-array","title":"Make boolean array","text":"<p>This creates an array of two columns and as many rows as in the table.</p> Structured table reference to mark this account<pre><code>(tbl_transfers_plan[[From_Account]:[To_Account]]=tbl_balances[@AcctName])\n</code></pre>"},{"location":"idioms/#construct-two-values-array-column-array","title":"Construct two values array column array","text":"<p>This creates two columns with the same number of rows with a negative and positive version of each amount</p> Horizontal stacking<pre><code>HSTACK(-tbl_transfers_plan[Amount],tbl_transfers_plan[Amount])\n</code></pre>"},{"location":"idioms/#multiply-them","title":"Multiply them","text":"X ="},{"location":"idioms/#add-across-rows","title":"Add across rows","text":"<p>The BYROW and LAMBDA functions are used. Each row is passed into lambda as the parameter <code>row</code>, which is then summed. the <code>_xlpm.</code> is needed as Excel uses that to identify the parameter name.  It is actually stored in the internal XML but not displayed in the Excel user interface.</p> Sum by row<pre><code>BYROW((tbl_transfers_plan[[From_Account]:[To_Account]]=tbl_balances[@AcctName])*HSTACK(-tbl_transfers_plan[Amount],tbl_transfers_plan[Amount]),LAMBDA(_xlpm.row,SUM(_xlpm.row)))\n</code></pre> <p>The result is then multiplied by the year selection to get all net of all the transactions for the account and year, as shown here:</p> <p></p>"},{"location":"idioms/#final-sum","title":"Final sum","text":"<p>Wrap the whole thing in a <code>SUM()</code> to get the net change in the account for the year.</p> Full<pre><code>SUM(BYROW((tbl_transfers_plan[[From_Account]:[To_Account]]=tbl_balances[@AcctName])*HSTACK(-tbl_transfers_plan[Amount],tbl_transfers_plan[Amount]),LAMBDA(_xlpm.row,SUM(_xlpm.row)))*(tbl_transfers_plan[Y_Year]=this_col_name()))\n</code></pre>"},{"location":"idioms/#conditional-formatting-limits","title":"Conditional Formatting limits","text":"<p>Conditional formatting formulas cannot use structured references, including bare table names.</p>"},{"location":"operations/","title":"Operations","text":"<p>The following support the need to refresh data. These are usually applied annually although the year-to-date feature allows interim updates.</p>"},{"location":"operations/#actuals","title":"Actuals","text":""},{"location":"operations/#bank","title":"Bank","text":"<p>bank_actl_load.py</p>"},{"location":"operations/#income-and-expense","title":"Income and Expense","text":"<p>The <code>dance/iande_actl_load.py</code> module loads data into either <code>iande_actl</code> or <code>current</code>.  For actual income and expense lines <code>iande</code> references the <code>iande_actl</code> table so that its easier to update.  </p> <p>After refreshing the <code>current</code> table, it may or may not be desirable to reload the prior re-projection data using ytd.py.</p> <pre><code>usage: iande_actl_load.py [-h] [-s {iande_actl,current}] [-p PATH] [-w WORKBOOK] [-f]\nCopies data from input file into tab \"iande_actl\" or \"current\" after doing some checks.\n\noptions:\n  -h, --help            show this help message and exit\n-s {iande_actl,current}, --sheet {iande_actl,current}\nwhich sheet - iande_actl or current\n  -p PATH, --path PATH  The path and name of the input file. If not given will use \"data/iande.tsv\" or \"data/iande_ytd.tsv\"\ndepending on sheet\n  -w WORKBOOK, --workbook WORKBOOK\n                        Target workbook\n  -f, --force           Use -f to ignore warning\n</code></pre>"},{"location":"operations/#year-to-date-and-reprojection","title":"Year-to-date and reprojection","text":"<p>During the year it is handy from time to time to replace the modeled values with reprojected values. The current tab and the <code>ytd.py</code> program allow for this.</p> <p>The command line program <code>ytd.py</code> allows the contents of the ytd table to be saved into a file.  The data can be reloaded into the table after a refresh and the reprojected values can be copied into the correct cells in the iande table.</p> <pre><code>usage: ytd.py [-h] [-s] [-l] [-f] [-w WORKBOOK] [-p PATH]\nCopies data from ytd tab to file or from file to ytd tab and iande.\n\noptions:\n  -h, --help            show this help message and exit\n-s, --save            saves data from the current tab to the file\n  -l, --load            loads the file data to the current tab\n  -f, --forward         carries the projected values to the first forecast year in the iande table\n  -w WORKBOOK, --workbook WORKBOOK\n                        Target workbook. Default=data/test_wb.xlsm\n  -p PATH, --path PATH  The path and name of the storage file. Default=./data/ytd_data.json\n</code></pre>"},{"location":"operations/#investments","title":"Investments","text":"<p>invest_actl_load.py invest_iande_load.py</p>"},{"location":"operations/#other-actuals","title":"Other Actuals","text":"<p>other_actls.py</p>"},{"location":"operations/#retirement","title":"Retirement","text":"<p>retire_load.py</p>"},{"location":"operations/#taxes","title":"Taxes","text":""},{"location":"operations/#new-year-new-tax-rates","title":"New year - new tax rates","text":"<p>Pull the IRS data as a .csv file. Use <code>bracket_fix.py</code> to transform into the correct format.</p> <p>For example:</p> <pre><code>dance/bracket_fix.py data/2022_tax_brackets_irs.csv 0,0.10,0\n20549.0,0.12,410.8800000000001\n83550.0,0.22,8766.0\n178150.0,0.24,12329.0\n340100.0,0.32,39537.0\n431900.0,0.35,52494.0\n647850.0,0.37,65451.0\nCopy the above numbers into the table and add the year\n</code></pre>"},{"location":"operations/#rebuild-the-taxes-table","title":"Rebuild the taxes table","text":"<p>NOT CURRENTLY WRITING THE TABLE INTO THE SHEET</p> <pre><code>dance/taxes_load.py -h      usage: taxes_load.py [-h] [--workbook WORKBOOK] [--path PATH]\nPrepares the taxes table from the input template\n\noptions:\n  -h, --help            show this help message and exit\n--workbook WORKBOOK, -w WORKBOOK\n                        Target workbook\n  --path PATH, -p PATH  The path and name of the input file\n</code></pre>"},{"location":"operations/#transfers","title":"Transfers","text":"<p>transfers_actl_load.py</p>"},{"location":"operations/#setup","title":"Setup","text":"<p>See Setup.</p>"},{"location":"operations/#utility","title":"Utility","text":""},{"location":"operations/#index_tables","title":"index_tables","text":"<p>The Python code, <code>util/index_tables.py</code> enumerates and indexs the tables (something oddly missing in Excel due to the fact that it is worksheet oriented). The index is stored on the utility worksheet.</p>"},{"location":"operations/#extract-table","title":"Extract Table","text":"<p>Use <code>dance/util/extract_table.py</code> to copy the contents of an existing worksheet table to a <code>json</code> formatted file. Similarly, template files can be recreated from the worksheet table.</p> <pre><code>usage: extract_table.py [-h] [--workbook WORKBOOK] --table TABLE [--output OUTPUT] [--data_only]\nCopies table data from workbook and stores as a json or tsv output file.\n\noptions:\n  -h, --help            show this help message and exit\n--workbook WORKBOOK, -w WORKBOOK\n                        Source workbook\n  --table TABLE, -t TABLE\n                        Source table name, include tbl_\n  --output OUTPUT, -o OUTPUT\n                        Name of the output file. Default is folder of workbook and configured data path\n  --data_only, -d       To get data not formulas\n</code></pre> <p>For example, this copies the aux table from a worksheet called test_wb.xlsm to a data file.</p> <pre><code>% dance/util/extract_table.py -w data/test_wb.xlsm -t tbl_aux -o records\n2023-06-21 14:23:19,716 - extract_table - INFO - Wrote to data/aux.json\n</code></pre>"},{"location":"python/","title":"Use of Python","text":"<p>External access to the spreadsheet is provided via Python programs. Mostly these are programs to transfer Moneydance actual data into the Workbook.  This is done via Python using the <code>openxlpy</code> library.  These files are in the <code>dance</code> subfolder.</p>"},{"location":"python/#python-environment","title":"Python Environment","text":"<p>In the terminal change the current directory to the root of the repository. Use the following command to active the virtual environment: <code>source .venv/bin/activate</code></p>"},{"location":"report_configs/","title":"Moneydance report definitions","text":"<p>This page is intended to document the reports which are used to generate the actual data.</p>"},{"location":"report_configs/#transfers-to-fcast","title":"Transfers-to-fcast","text":"<p>Source accounts: All bank, All Income, All Credit Card, All Expense Target accounts: All Load, All Asset, All Liability</p> <p>Security and Investments are handled via the performance report</p>"},{"location":"report_configs/#tranfers-to-investment-accounts-by-year","title":"Tranfers to Investment Accounts by Year","text":"<p>This report can be run once for all actual year periods.  It provides transfers in/out of the investment accounts.</p> <p>Source accounts: All Bank (except any accounts that acts as a passthru account to handle separate dividend and dividend reinvested transactions), All Credit Card + certain categories Target accounts: All Investment</p> <p>A account passthru account may be used to support the strange way the broker handles re-investments.  It has to be excluded from true transfers.</p>"},{"location":"report_configs/#certain-categories","title":"Certain categories","text":"<p>Two situations have arisen when the use of categories made sense.</p> <ol> <li>An inheritance which was transfered directly to an investment account.  In this case an income category was used to isolate the (rare) transaction.</li> <li>The financial institution provides a disbursement and withholds for and pays state and federal taxes.  These transactions effectively are transfers from the account and should be included.</li> </ol>"},{"location":"report_configs/#investment-performance","title":"Investment Performance","text":"<p>This report is run once per year. It provides information used to determine realized and unrealized gains.</p> <p>Select: All Investment, All Security</p>"},{"location":"setup/","title":"Setting up the spreadsheet","text":""},{"location":"setup/#summary-of-steps","title":"Summary of steps","text":"<ol> <li>Prepare data files. See Data Files.<ol> <li>Save certain reports from Moneydance to the <code>data</code> folder.</li> <li>Prepare other imput files as json or tsv</li> </ol> </li> <li>Acquire a registration key for the bureau of labor statistics (for inflation data)</li> <li>Edit the control file as described below.</li> <li>Validate the file against the schema.  I use VS Code extension <code>YAML Language Support by Red Hat</code></li> <li>Run <code>dance/setup/create_wb.py</code></li> </ol>"},{"location":"setup/#api-key","title":"API key","text":"<p>The system copies the inflation data to faciliatate planning.  To do this an API key is needed.  This is free; they only want an email address.  Register here: https://data.bls.gov/registrationEngine/.  The API key should be stored in ./private/api_keys.yml. The rows of this file are expected to be simply a site code and the key value, such as below:</p> <p></p> <p>Fifteen days before it expires (in 1 year) <code>labstat@bls.gov</code> will send an email titled <code>Bureau of Labor Statistics API Key Expiration</code> requiring a reactivation.</p>"},{"location":"setup/#the-setup-control-file","title":"The setup control file","text":"<p>The control file is <code>.data/setup.yaml</code>.  To reference the schema insert the following line at the top:</p> <pre><code># yaml-language-server: $schema=../dance/setup/setup_schema.json\n</code></pre>"},{"location":"setup/#global-settings","title":"Global Settings","text":"<p>The following values are global in nature:</p> Item Purpose Example start_year Integer of 1st year to use for time series 2018 end_year Last Year of the time series 2030 year_column_width Column size for years 12 first_forecast_year First year that is considered a forecast. Prior years are considered actual 2022 zoom_scale Scaling factor for all sheets 135 # how to scale the worksheets bank_interest Moneydance category used to convey bank interest to the account balances Income:I:Invest income:Int:Bank"},{"location":"setup/#sheet-groups","title":"Sheet groups","text":"<p>Sheets are grouped together in sheet groups using the <code>sheet_group</code> definitions.  Each sheet is assigned to a group and thus shares the color and table style.</p>"},{"location":"setup/#sheets","title":"Sheets","text":"<p>This section defines the layout and sometimes the data to be loaded into the sheet. It is a list of definition of each sheet.  So at that level it looks like:</p> <pre><code>sheets:\naccounts:\nbalances:\niande:\n...\n</code></pre>"},{"location":"setup/#table-definitions","title":"Table Definitions","text":"<p>Within each sheet are the list of tables. Most sheets only have one.  Here's an example with two:</p> <p><pre><code>retireparms:\nsheet_group: retirement\ntables:\n- name: tbl_retire_parms\n- name: tbl_pens_facts\n</code></pre> By convention all the table names start with <code>tbl_</code>.</p> <p>The table definition consists of various fields, some of which are optional and/or defaulted.</p> Item Purpose Default title The title that is place above the table in Excel columns A list of the column definitions (see below) that are included in the table title_row When there is more than one table, locates this table on the sheet. If tables are spread horizontally, then subsequent tables will need an entry. 1 for the first table, then automatically places a space before the next table. start_col The first column of the table on the sheet (A=1,B=2...) 1 include_years True if there is a time series for the years False hidden A list of columns to hide Show every column data definitions where to get the data for the initial load Don't load data actl_formulas Specify formulas for actuals. fcst_formulas Specify formulas for forecast periods. highlights Specify Excel conditional formatting dyno_fields a way to determine values at build time edit_checks Sets data validation in Excel for table columns"},{"location":"setup/#column-definitions","title":"Column definitions","text":"<p>The following support column definitions</p> Item Purpose Default name the column heading width optional width used to set column width in spreadsheet width of previous column horiz optional indicator of horizontal alignment such as \"center\" number_format number from openpyxl chart"},{"location":"setup/#data-definitions","title":"Data definitions","text":"<p>The data definitions are purpose built to support the target table, but there are some elements that are common.  Some data definitions are closely related, so, to prevent duplication, the yaml reference/override notation is used (&amp; and *).  </p> Item Purpose Use context source local to reference local files; remote to pull data over internet. remote to pull data over internet. internal is used to create the table/sheet cross reference. type These codes are used by the program select the processing logic to use. See supported types local path path relative to project folder for local sources, the path and name of the primary input file file_sets for items that require additional files, one or more sets of files are defined. Each file set has a name and a value of the base_path which is a folder name with the trailing slash. Valid names are \"balances\" and \"performance\" group Specific Moneydance groupings to include. Moneydance uses these to categorize accounts.  Its things like: Assets, Bank Accounts, Credit Cards... Accounts, Balances no_details_for For these groupings create rows only at the grouping level, no details. Investments here means to summarize to the investment level and don't carry over the securities. Accounts include_zeros Accounts listed here will be carried over even if the balance is zero Accounts tax_free_keys Mark the accounts that are not subject to current income tax Accounts site_code BLS, or FEDREG. Used to determine which site to reference remote api_key If needed. A reference to the api_key which is stored in ./private/api_keys.yml remote table Defines how to locate a table in HTML remote table.find_method caption - only supported method remote table.method_parameters parameters for the method, specifically the text to search for in the caption. remote hier_separator Typically set to colon.  The existence of this key indicates that the lines should be subtotaled and folded iande,iande_actl,current,aux hier_insert_paths Some line items are do not yet exist or are not yet populated in Moneydance. This is a way to insert them within the hierarchy so they can be used for forecasting. iande,iande_actl,current,aux hier_alt_agg This optional field allows aggregation to occur by any of the following methods: MIN, MAX, PRODUCT. The default is TOTAL. This is a mapping between lines and one of the aggregation types. template Used in the cases where a template is used to generate the table. For the extract operation, this specifies the fields which are to be pulled from the table.  In the case of folding, it specifies the field to fold on and the indent depth"},{"location":"setup/#supported-types","title":"Supported Types","text":"Type Purpose json_index Imports entire table previously exported via <code>dance/util/extract_table.py</code> using the <code>-o index</code> option. Suitable when the table has a unique key. json_records Imports entire table previously exported via <code>dance/util/extract_table.py</code> using the <code>-o index</code> option. Suitable when the table does not have a unique key. md_529_distr Get the 529 plan distribution records from Moneydance export and summarize so data items can be put in spreadsheet md_acct Processes the account extract from Moneydance md_bal Processes the balances extract from Moneydance md_hsa_disb Get the HSA disbursement records from Moneydance export and summarize so data items can be put in spreadsheet md_iande_actl Processes the income and expense extract from Moneydance to create the iande and iande_actl sheets md_invest_actl Sets up the investment actual transfers md_invest_iande_work Read investment income and expense actual data from file into a dataframe md_ira_distr Get the IRA distribution records from Moneydance export and summarize so data items can be put in spreadsheet md_pr_sav Get the payroll to savings records from Moneydance export and summarize so data items can be put in spreadsheet md_roth Get the roth contributions md_sel_inv Get amounts transferred to/from certain brokerages, mutual funds, loans from/to any banks. md_transfers_actl Sets up the non-investment actual transfers retire_medical_template Sets up the retire medical table based on a template retire_template Set up the retirement table based on a template tax_template Prepares the taxes worksheet based on a template"},{"location":"setup/#inserting-rows","title":"Inserting Rows","text":"<p>An optional key is used to define new rows to be inserted on sheets that use the folding/subtotaling method.</p> <p>For instance, the income and expense report in MoneyDance filters out categories that have no transactions.  This leads to a need to insert those rows in the <code>tbl_iande</code> and <code>tbl_iande_actl</code> tables. For example, future social security payouts should subtotal into retirement income. </p> <p>It is also useful in the aux table to construct subtotals.</p> <p>The specification of the new rows needs to contain the full hiearchy information so that it can be inserted into the right place.  At run time these are checked against the existing items and added only if not already there.</p> <p>Note: include only those lines that are not headings or totals. Headings and total lines will be constructed and inserted as well as the specified data lines.</p> <p>In this example, we aggregate based on the MIN function to plan the distributions from the health savings accounts</p> <p></p>"},{"location":"setup/#actual-and-forecast-formulas","title":"Actual and Forecast Formulas","text":"<p>There are three optional keys to allow formulas to be established for the years section: <code>actl_formulas</code>, <code>all_col_formulas</code>, and <code>fcst_formulas</code>.  They work the same way but apply to different columns, as their names indicate.</p> <p>Each section consists of a list of rules.  All rules have the following parts:</p> Key word Description formula The formula to use for the selected year columns (actual or forecast) first_item Optional. In some cases the first item or items of the series needs to be different. If supplied it may be a keyword <code>skip</code>. If it starts with <code>=</code> then it is a formula that will be used in the first place. Otherwise, it will be a constant or a list of constants separated by <code>,</code>. In that case it will be applied to the first n positions. <p>There are two constructions.  The first is the enumeration method, where the config lists all the keys that are to be matched against a base field.</p> Key word Description base_field The name of the column that is used for matching matches A list of values by which to match rows. This could match a single row or many rows. <p>The second construction allows for queries against several fields.  These are \"anded\" together to product a boolean series to select the rows to be updated.</p> Key word Description query The query is a list of objects with the following fields. - field A field name in this table - compare_to A value to compare to, either a string or a number - compare_with A comparison like \"=\" <p>For example, if there is a key <code>fcst_formulas</code> under the table, it is used to set formulas for the forecast columns.  Each column receives the same formula, but they can vary by row.  The structure is setup like this:</p> <pre><code>  fcst_formulas:\n- base_field: ValType # Near Mkt Rate\nmatches: Mkt Gn Rate\nfirst_item: =get_val([@AcctName],\"tbl_accounts\",\"Near Mkt Rate\")*[@Active]\nformula: =rolling_avg()\n- formula: =add_wdraw( [@AcctName],this_col_name()) # Add/Wdraw for rows with distribution plans\nquery:\n- field: ValType # Add/Wdraw if no distribution plan is via transfers_plan \ncompare_with: \"=\"\ncompare_to: \"Add/Wdraw\"\n- field: No Distr Plan\ncompare_with: =\ncompare_to: 0 ...\n</code></pre>"},{"location":"setup/#array-formulas","title":"Array formulas","text":"<p>It is not possible to use dynamic arrays fully as they are not well supported (yet?) by <code>openpyxl</code>. However, some effort has been made to allow for control-shift-enter (CSE) arrays. These work best when the formula summarizes to a single cell or results in a single column of results in a fixed size array.  This has been tested for use with data validation.</p> <p>For instance the following formula selects the active accounts with no distribution plan which is used for data validation of a table field.</p> <pre><code>=SORT(FILTER(tbl_accounts[Account],(tbl_accounts[Active]=1)*(tbl_accounts[No Distr Plan]=1)))\n</code></pre> <p>The result is stored under a heading of CHOICES.  The data validation is a list with a source of <code>=$F$3#</code>.  The # indicates the entire result set.</p> <p></p> <p>The following formula (shown wrapped) uses dynamic array functions, but due to the <code>openpyxl</code> limitation it results in a CSE formula, which is fine since it produces a single value.</p> <pre><code>=SUM(\n  BYROW(\n    (tbl_transfers_plan[[From_Account]:[To_Account]]=tbl_balances[@AcctName])*HSTACK(-tbl_transfers_plan[Amount],tbl_transfers_plan[Amount]),\n    LAMBDA(_xlpm.row,SUM(_xlpm.row))\n  )\n  *(tbl_transfers_plan[Y_Year]=this_col_name()))\n</code></pre> <p>The lambda function needs its parameters prefixed with _xlpm.  The code handles the prefixes for the dynamic array functions.</p> <p>After an Excel session when the file is saved, Excel will rewrite the document so that the internal XML files have new schemas listed.  Further, if a CSE formula is edited, it may be converted to a dynamic array formula, and, in that case, an internal <code>metadata.xml</code> file is created to support the dynamic arrays.  If <code>openpyxl</code> later rewrites the file, the <code>metadata.xml</code> and the references to it in the dynamic array formulas will be lost.  This has the effect of converting back to a CSE formula.</p>"},{"location":"setup/#build-time-created-fields","title":"Build-time created fields","text":"<p>Some tables need a way to determine values at build time. The <code>dyno_fields</code> section may be directly under the table.</p> <p></p> <p>the <code>matches</code> list is a list of values to be matched agains the field. There is a special case if just a single *, meaning all.</p> <p>The target field should be previously defined, but it is filled in by this logic.  The commands available are: - suffix - something added to the matched item - constant - a value that is always the same - formula - an Excel formula</p>"},{"location":"setup/#formula-specifics","title":"Formula Specifics","text":"<ul> <li>Always start the formula with a leading equals sign.</li> <li>Constants are fine, but remember to use the leading equals sign</li> <li>Structured table references are supported and recommended.  </li> <li>Refer to this column with the VBA function <code>this_col_name()</code></li> <li>Many VBA functions are designed to be used in formulas</li> </ul>"},{"location":"setup/#highlights","title":"Highlights","text":"<p>For example the following puts a line between the actual and forecast periods. The anchor, (ampersand) allows other tables to use the same by using <code>*past_future</code></p> <pre><code>  highlights: present: &amp;past_future\nformula: =A$2=get_val(\"first_forecast\",\"tbl_gen_state\",\"Value\") # ref is to heading row\nborder:\nedges: - left\nstyle: thin\ncolor: B50000\n</code></pre>"},{"location":"setup/#edit-checks","title":"Edit Checks","text":"<p>This provides a way to use a dynamic array filter in Excel to create a data validation list (a drop down menu) for a set of columns.</p> <p><pre><code>      edit_checks:\n- for_columns:\n- From_Account\n- To_Account\nformula: =SORT(FILTER(tbl_accounts[Account],(tbl_accounts[Active]=1)*(tbl_accounts[No Distr Plan]=1)))          </code></pre> The formula will be placed to the right of the table and the a data validation will reference it for each of the columns.  In this example the active accounts with no distribution plan will be displayed as the drop down choices for the to listed columns.</p>"},{"location":"setup/#specific-sheets-tables","title":"Specific Sheets &amp; Tables","text":""},{"location":"setup/#inflation","title":"Inflation","text":"<p>You may want to consider a different series.  The default is all items in U.S. city average, all urban consumers, not seasonally adjusted.</p>"},{"location":"setup/#required-minimum-distributions","title":"Required minimum distributions","text":"<p>At the time of writing the best source seems to be the Federal Register.  This does not need to edited unless the source changes.  </p>"},{"location":"setup/#accounts","title":"Accounts","text":"<p>The data section in the <code>setup.yaml</code> needs the following sub-sections:</p> Item Description path Path from the project root where to find the saved report`.  This should be one with all the accounts you wish to use. group this is a list of the summary levels you wish to use in your plan.  The items can either be the categories that Moneydance uses such as Bank Accounts, or it can be summary accounts that you have created (accounts that have sub-accounts) no_details_for If you have summary accounts that cover all the items in a category, then you can use those instead of the leaf accounts. By listing the category hear the detail accounts will be ignored. include_zeros Usually zero balance accounts will be ignored.  If the account is entered here, it will be carried forward.  This can be useful if its a brand new account with no balance or if its an old account that had a balance in the historical period. tax_free_keys A list of keywords that will be used to determine how the tax status of the account will be initialized. <p>Example:</p> <pre><code>path: ./data/2022 Account Balances.tsv\ngroup:\n- Bank Accounts\n- Credit Cards\n- Real Estate\n- Other Asset\n- Liabilities\n- Mortgage Loans\n- Non Mort Loans\nno_details_for:\n- Assets\n- Loans\ninclude_zeros:\n- My old HSA\n- My old 401K\ntax_free_keys:\n- 401K\n- \"529\"\n- IRA\n</code></pre>"},{"location":"spreadsheet/","title":"Design of the spreadsheet","text":"<p>By convention we call the spreadsheet <code>fcast.xlsm</code>.</p> <p>The spreadsheet is based mostly on a set of Excel tables. </p> <p>As tables do not work well with dynamic arrays in Excel, filtered data sets may also be stored outside of tables.</p>"},{"location":"spreadsheet/#tables","title":"Tables","text":"<p>Many of the tables represent time series where the time is based on years.  The data elements are typically financial values associated with a year.  For instance, the balances table tracks how balances change year by year.</p> <p>The time series columns are labeled with 'Y' + year.    The meaning of the time series data depends on the state of the system.  To the left of the first forecast year, data is considered actual, while to the right it is forecast.  In the following example, the red line marks the transition from actual to forecast.</p> <p></p> <p>Other columns are labeled with appropriate short column labels.</p> <p>An index of tables is maintained on the 'utility' worksheet, which allows the worksheet to be located by the VBA function.  This itself is a table and it is created by a Python program <code>index-tables.py</code>.</p>"},{"location":"spreadsheet/#worksheets","title":"Worksheets","text":"<p>Tables are distributed over a set of worksheets. Sometimes a worksheet holds more than one table.</p> <p>Worksheets</p>"},{"location":"spreadsheet/#excel-calculations","title":"Excel Calculations","text":"<p>The original plan was to use Visual Basic (macros) allows for calculations to be done in a more readable manner.  However there is a downside.  This is that Excel cannot use its dependency trees to know what needs to occur when the macros reference or update a value with this method.  There is a macro, currently called calc_retir(), to perform the re-calcuations in the correct order. </p> <p>The advent of array functions in Office 365 allows for fairly succinct and readable formulas, which do not suffer from the problem of dependency updates.  Generally, by referencing only the needed columns true dependency loops can be avoided.  However, Excel may get a bit confused in some cases when tables appear to reference each other.  This is squelched by setting the calculation option as follows. </p> <p></p>"},{"location":"spreadsheet/#idioms","title":"Idioms","text":"<p>A glossary of Excel array idioms is available. Idioms</p>"},{"location":"spreadsheet/#functions","title":"Functions","text":"<p>There are Visual Basic for Applications functions in this worksheet.  These are listed in the VBA index.  The full source is also imported here as part of the build process.</p> <p>One commonly used function is <code>get_val</code>. The get_val routine requires the use of worksheet tables, and references the values by the row names and the column names.</p>"},{"location":"spreadsheet/#calculations","title":"Calculations","text":"<p>There are some complex dependencies between sheets.  Generally the flow is between sheets for a year, then certain values are carried forward into the next year.</p> <p>Currently, in some cases it is necessary to run <code>calc_retir</code> in order to complete the calculations. </p>"},{"location":"spreadsheet/#conventions","title":"Conventions","text":""},{"location":"spreadsheet/#excel-conventions","title":"Excel conventions","text":"<ul> <li>All table names begin with <code>tbl_</code>.</li> <li>Except where visible, such as column names and row labels, use lowercase except for acronyms.</li> <li>Use underscores between words.</li> <li> <p>Use std abbreviations as follows:</p> long short actual actl annuity anny balances bals duration dur investments invest parameters parms pension pens retirement retir value or valuation val </li> </ul>"},{"location":"spreadsheet/#moneydance-conventions","title":"Moneydance conventions","text":"<ul> <li>Actual account names are generally of the form type-who-firm where type is one of 401K, 529, BKG, BND, ESP, HSA, IRA, IRA Roth, LON, MUT.</li> </ul>"},{"location":"vba_index/","title":"VBA Code Summary","text":"Function or Sub Signature and info acct_who1 Function acct_who1(acct As String, Optional num_chars As Integer = 1) As String Return the first initial of the owner of an account in format type - who - firm add_wdraw Function add_wdraw(acct As String, y_year As String) As Variant Get the actual or forecast transfers in (positive) our out(negative). Determines whether the year is actual or forecast, in order to determine the source from the accounts table.. For actuals returns the value from the source table.. For forecast, will add realized gains that are not re-invested. If source table is the retirement table, changes the sign. age_as_of_date Function age_as_of_date(inits As String, dt As Date) As Double Return the age attained by an account owner in a given year age_of Function age_of(inits As String, y_year As String) As Integer Return the age attained by an account owner in a given year agg Function agg(y_year As String, by_tag As Variant, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double Aggregate (default is sum) up the values in the table containing the calling cell for a year where the by_tag is found in the tag column.. Use of this can help avoid the hard coding of addresses into formulas. By default the tag column is \"tag\" but an alternate can be provided. Other agg_methods are \"min\" and \"max\" agg_table Function agg_table(tbl_name As String, y_year As String, by_tag As String, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double Aggregate (default is sum) up the values in the named table for a year where the by_tag is found in the tag column.. Use of this can help avoid the hard coding of addresses into formulas. By default the tag column is \"tag\" but an alternate can be provided. Other agg_methods are \"min\" and \"max\". A second and third criteria may be provided by extending the by_tag and the tag_col_name as follows:. A delimiter is included in the strings to allow two values to be provided.the delimiter is stile ( ANN Function ANN(account As String, account_owner As String, y_year As String) As Double Deprecated - use annuity instead. Return a year's value for an annuity stream based on the prior year's end balance. Does not properly handle partial years annuity Function annuity(account As String, y_year As String) As Double Return a year's value for an annuity stream based on the prior year's end balance. Fetches the start date, duration and annual annuity rate from tbl_retir_vals. Rounds to whole number bal_agg Function bal_agg(y_year As String, val_type As String, Optional acct_type As String = \"*\", Optional txbl As Integer = 1, Optional active As Integer = 1) As Double Get the sum of values from the balances table for a year and type, optionally further qualified by acct type,taxable status,active status. Wild cards are ok as are excel functions like \"&lt;&gt;\" prepended to the values for strings. Note all the criteria fields must have values - suggest using na if there is no value such as for an election. calc_retir Sub calc_retir() Iterate through the years to calc retirement streams based on balances from prior year. Prior balance from balances feeds current retirement, and current invest_iande_work. Retirement feeds aux,. Aux and invest_iande_work feeds current balances. Iande depends on retirement as well and taxes depend on iande calc_table Sub calc_table() Testing forced calc of table CT_Tax Function CT_Tax(tax_Year As Integer, taxable_Income As Double) As Double Calculate the ct income tax for a given year and taxable income amount. The so called initial tax calculation only.. Table is not setup exactly like federal - it uses the traditional method not the subraction method.. Gets a result of zero if year not in the table. d2s Function d2s(dt As Date) As String ei_withhold Function ei_withhold(legend As String, ei_template, y_year As String) As Double Compute annual social security or medicare withholding for earned income. Relies on naming conventions. Ei_template is a template for the line with earned income.  % is replaced by the person indicator, which. Is the trailing part of the legend.. The legend has two parts separated by hyphen.  the first part is the type of withholding. Which must be either: medicare or soc sec. Y_year is the column heading such as y2022 endbal Function endbal(acct As String, y_year As String) As Variant Compute the end balance for an account for a year extend_iiande Function extend_iiande(account As String, category As String, y_year As String) As Double For investment income and expense, use a ratio to the start balance to compute a forecast value for the income/expense item on this row. To be run in a cell in the invest_iande_work table. Fed_Tax_CapGn Function Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double Computes the resulting federal tax with capital gains portion at 15%. The input should include qualified dividends Federal_Tax Function Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double Calculate the federal income tax for a given year and taxable income amount. Gets a result of zero if year not in the table. gain Function gain(acct As String, y_year As String, realized As Boolean) As Variant For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast. Other types of accounts return zero.. For investments actuals, use the values from invest_actl. For bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table get_val Function get_val(line_key As Variant, tbl_name As String, col_name As String, Optional raise_bad_col = False) As Variant Fetches a value from a given table (it must be an actual worksheet table. If the line is not found in the table, a zero is returned.. Bad columns are usually logged, but if the argument raise_bad_col is true then an error is raised. IntYear Function IntYear(yval) As Integer Strips off the y on the argument (eg y2019) and returns an integer invest_fees Function invest_fees(acct As String, y_year As String) As Variant For investments, return the account fees for an account for a year for actual or forecast. Other types of accounts return zero.. For investments actuals, use the values from invest_iande_work is_forecast Function is_forecast(y_year As String) As Boolean Determine if this year is a forecast year last_two_parts Function last_two_parts(cat As String, Optional delim = \":\") As String Take the last two parts of a delimited string and return them as a new string with the delimiter. Missing parts will be set to zero lenght string linear Function linear(count As Integer, Optional minimum = 0) As Double Use the excel forecast linear function to extrapolate the value based on the prior  values on this line.. Will use  number of data points if they exist or fewer if that goes before the first year. The minimum is used to prevent values from going below that amount. Suitable only for year columns.. Due to trouble with the listobject function which makes values empty for cells with formulas, a work around is used. To determine the table name from the worksheet name.this should be ok for major tables which correspond by convention. log Sub log(txt As String) LUMP Function LUMP(account As String, y_year As String) As Double Return the expected lump sum payment for an account based on the prior year's end balance MedicarePrem Function MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year), return annual part b premium or part d surcharge (irmaa). Normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead.. B_or_d isa 1 for part b premium or 2 for part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation.  inflation is given as 1.0x so it can be used directly mo_apply Function mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date. The end date is a string since there is a bug in the mac excel.. The end date represents the month of the last period to include.  the day is ignored and the last day of the month is used. nth_word_into Function nth_word_into(n As Integer, source As String, template As String) As String Insert the nth word (first is 0th) from source into the template, replacing % PartBPrem Function PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part b premium. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation.  inflation is given as 1.0x so it can be used directly PartDSurcharge Function PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant Given a year (as y+year) and the modifed adjusted gross (2 years ago) return annual part d surcharge. If the year is not in the table, then the largest year lower than that given will be used. And the resulting value will include inflation.  inflation is given as 1.0x so it can be used directly percent_year_worked Function percent_year_worked(initials As String) As Double Using the year of the current column and the data in the people table, return a number between 0 and 1. Indicating the percent of the year worked for the person with initials given prior_value Function prior_value(line As String) As Variant Get the prior years' value for this line. suitable only for year columns. ratio_to_start Function ratio_to_start(account As String, category As String, y_year As String) As Double For investment income and expense, compute the ratio to the start balance, but use the prior end balance since. That should have already been computed.  this allows the table to occur before the balances table in the compute order. To be run in a cell in the invest_iande_work table. reinv_amt Function reinv_amt(acct_name As String, y_year As String) As Double Compute the reinvestment amount for an account and year. retir_parm Function retir_parm(code As String, who As String) As Variant Get a retirement paramenter given code and code (g or v) RMD_1 Function RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double Return the req minimum distribution table 1 result for a year for a given account, owner (gbd or vec) and year.. If death year is not given then this function treat this as spousal inheritance. If death year is given the treat this as a beneficiary inheritance rolling_avg Function rolling_avg(Optional max_value As Variant = Null, Optional lookback As Integer = 5, Optional table As String = \"\", Optional key As String = \"\", Optional this_y_year As String = \"\") As Double Look back at previous columns and average the numeric values found there, ignoring items before 2018, but including zeros. Max_value if provided is used instead of any higher values. Lookback is defaulted to 5 years. If not provided, table, key and y_year are taken from the calling cell. Return the average.  returns 0 if the count of valid items is 0. simple_return Function simple_return(account As String, y_year As String) As Double Return the rlzd gain divided by the average of the start and end balances (or zero) sort_tax_table Function sort_tax_table() Make sure the federal tax tables are sorted properly test_fed_tax Sub test_fed_tax() test_get_val Sub test_get_val() test_LUMP Sub test_LUMP() test_medicarePrem Sub test_medicarePrem() test_mo_apply Sub test_mo_apply() test_nth Sub test_nth() test_sort Sub test_sort() this_col_name Function this_col_name() As String Return the caller's column name, assuming the cell is in a table.. Otherwise generates a #value  error. Use to make formulas more portable unrlz Function unrlz(acct As String, y_year As String) As Variant Compute the unrealized gain or loss for an account for a year, assuming end bal is fixed ws_for_table_name Function ws_for_table_name(tbl_name As String) As String Find out what worksheet the named table occurs on y_offset Function y_offset(y_year As String, offset As Integer) As String Given a y_year offset it by the amount given, producing a new y_year"},{"location":"vba_sorted/","title":"VBA Code","text":"<pre><code>Attribute VB_Name = \"Module1\"\nPublic Const dbg As Boolean = False\nOption Base 0\nFunction acct_who1(acct As String, Optional num_chars As Integer = 1) As String\n'return the first initial of the owner of an account in format type - who - firm\nDim parts() As String\nparts = Split(acct, \" - \")\nwho = parts(1)\nacct_who1 = Left(who, num_chars)\nEnd Function\nFunction add_wdraw(acct As String, y_year As String) As Variant\n'Get the actual or forecast transfers in (positive) our out(negative)\n'Determines whether the year is actual or forecast, in order to determine the source from the Accounts table.\n'For actuals returns the value from the source table.\n'For forecast, will add realized gains that are not re-invested\n'If source table is the retirement table, changes the sign.\nDim line As String, tbl As String, prefix As String\nDim rlz As Double, reinv As Double, wdraw As Double\nDim no_distr_plan As Integer\nis_fcst = is_forecast(y_year)\nprefix = \"Actl\"\nIf is_fcst Then prefix = \"Fcst\"\nvalue = 0\nacct_type = get_val(acct, \"tbl_accounts\", \"Type\")\ntbl = get_val(acct, \"tbl_accounts\", prefix &amp; \"_source_tab\")\n'logic to switch sign for retirement\nsign = 1\nIf tbl = \"tbl_retir_vals\" Then\nsign = -1\nEnd If\nline = get_val(acct, \"tbl_accounts\", prefix &amp; \"_source\")\nIf (\"I\" = acct_type) And Not is_fcst Then line = \"add/wdraw\" &amp; line ' complete key for investment actuals\nIf line &lt;&gt; \"zero\" Then  ' keyword to enable forecasting of zeros\nvalue = get_val(line, tbl, y_year)\nvalue = value * sign\nEnd If\nIf \"I\" = acct_type Then 'determine amount to withdraw based on reinv rate\nIf is_fcst Then\nrlz = get_val(\"Rlz Int/Gn\" &amp; acct, \"tbl_balances\", y_year)\nno_distr_plan = get_val(acct, \"tbl_accounts\", \"No Distr Plan\")\nreinv = Round(no_distr_plan * rlz * get_val(\"Reinv Rate\" &amp; acct, \"tbl_balances\", y_year), 0)\nwdraw = -Round(rlz - reinv)\nvalue = value + wdraw\nEnd If\nEnd If\nadd_wdraw = value\nEnd Function\nFunction age_as_of_date(inits As String, dt As Date) As Double\n'return the age attained by an account owner in a given year\nDim dob As Date, eoy As Date\nDim diff As Double, age As Double\ndob = get_val(inits, \"tbl_people\", \"DOB\")\ndiff = (dt - dob) / 365.25\nage = Application.WorksheetFunction.Round(diff, 3)\nage_as_of_date = age\nEnd Function\nFunction age_of(inits As String, y_year As String) As Integer\n'return the age attained by an account owner in a given year\nDim dob As Date, eoy As Date\nDim diff As Double, age As Integer\ndob = get_val(inits, \"tbl_people\", \"DOB\")\neoy = DateSerial(IntYear(y_year), 12, 31)\ndiff = (eoy - dob) / 365.25\nage = Int(Application.WorksheetFunction.RoundDown(diff, 0))\nage_of = age\nEnd Function\nFunction agg(y_year As String, by_tag As Variant, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double\n' Aggregate (default is sum) up the values in the table containing the calling cell for a year where the by_tag is found in the tag column.\n' Use of this can help avoid the hard coding of addresses into formulas\n' By default the tag column is \"tag\" but an alternate can be provided\n' Other agg_methods are \"min\" and \"max\"\nDim agg_val As Double\nDim tbl As ListObject\nDim point As Range, val_rng As Range, tag_col As Range\nSet point = Application.caller\nSet tbl = point.ListObject\nSet tag_rng = tbl.ListColumns(tag_col_name).Range\nSet val_rng = tbl.ListColumns(y_year).Range\nSelect Case agg_method\nCase \"sum\"\nagg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rng, by_tag)\nCase \"min\"\nagg_val = Application.WorksheetFunction.MinIfs(val_rng, tag_rng, by_tag)\nCase \"max\"\nagg_val = Application.WorksheetFunction.MaxIfs(val_rng, tag_rng, by_tag)\nEnd Select\nagg = agg_val\nEnd Function\nFunction agg_table(tbl_name As String, y_year As String, by_tag As String, Optional agg_method = \"sum\", Optional tag_col_name As String = \"Tag\") As Double\n' Aggregate (default is sum) up the values in the named table for a year where the by_tag is found in the tag column.\n' Use of this can help avoid the hard coding of addresses into formulas\n' By default the tag column is \"tag\" but an alternate can be provided\n' Other agg_methods are \"min\" and \"max\"\n' A second and third criteria may be provided by extending the by_tag and the tag_col_name as follows:\n'  A delimiter is included in the strings to allow two values to be provided.The delimiter is stile (|)\n'  The there should be exactly 0 or 1 or 2 delimiters, andthe by_tag and tag_column_name should agree\nDim agg_val As Double\nDim tbl As ListObject\nDim point As Range, val_rng As Range, tag_rngs() As Range\nDim by_tags() As String, tag_col_names() As String, by_tags_v As Variant\nOn Error GoTo ErrHandler\ndelim = \"|\"\nby_tags = Split(by_tag, delim)\ntag_col_names = Split(tag_col_name, delim)\nSet point = Application.caller\nws_name = ws_for_table_name(tbl_name)\nSet tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name)\nSet val_rng = tbl.ListColumns(y_year).Range\nReDim tag_rngs(UBound(by_tags))\nReDim by_tags_v(UBound(by_tags))\nFor I = LBound(by_tags) To UBound(by_tags)\nSet tag_rngs(I) = tbl.ListColumns(tag_col_names(I)).Range\nIf IsNumeric(by_tags(I)) Then\nby_tags_v(I) = CInt(by_tags(I))\nElse\nby_tags_v(I) = by_tags(I)\nEnd If\nNext I\nSelect Case agg_method\nCase \"sum\"\nSelect Case UBound(by_tags)\nCase 0\nagg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rngs(0), by_tags_v(0))\nCase 1\nagg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rngs(0), by_tags_v(0), tag_rngs(1), by_tags_v(1))\nCase 2\nagg_val = Application.WorksheetFunction.SumIfs(val_rng, tag_rngs(0), by_tags_v(0), tag_rngs(1), by_tags_v(1), tag_rngs(2), by_tags_v(2))\nEnd Select\nCase \"min\"\nagg_val = Application.WorksheetFunction.MinIfs(val_rng, tag_rngs(0), by_tags(0))\nCase \"max\"\nagg_val = Application.WorksheetFunction.MaxIfs(val_rng, tag_rngs(0), by_tags(0))\nEnd Select\nagg_table = agg_val\nExit Function\nErrHandler:\nlog (\"[ \" &amp; point.address &amp; \" ] agg_table: \" &amp; Err.Number &amp; \" \" &amp; Err.Description)\nEnd Function\nFunction ANN(account As String, account_owner As String, y_year As String) As Double\n'DEPRECATED - USE annuity instead\n'return a year's value for an annuity stream based on the prior year's end balance\n'does not properly handle partial years\nDim this_year As Integer, age As Integer\nDim prior_end_bal As Double, term As Double, result As Double, anny_rate As Double, anny_dur As Double\nDim anny_start As Date, o1 As String, n As Integer\nDim dur_parm As String\nthis_year = IntYear(y_year)\nprior_end_bal = get_val(\"End Bal\" &amp; account, \"tbl_balances\", \"Y\" &amp; this_year - 1)\nage = age_of(account_owner, y_year) - 1\no1 = Left(account_owner, 1)\nanny_rate = get_val(\"anny_rate\", \"tbl_retir_parms\", o1)\ndur_parm = \"anny_dur\"  ' hack picks different duration for roth\nIf InStr(account, \"Roth\") &gt; 0 Then dur_parm = \"roth_dur\"\nanny_dur = get_val(dur_parm, \"tbl_retir_parms\", o1)\nanny_start = get_val(\"anny_start\", \"tbl_retir_parms\", o1)\nn = anny_dur - (this_year - year(anny_start))\nresult = 0\nIf n &gt; 0 Then\nresult = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal)\nEnd If\nANN = result\nEnd Function\nFunction annuity(account As String, y_year As String) As Double\n'return a year's value for an annuity stream based on the prior year's end balance\n'fetches the start date, duration and annual annuity rate from tbl_retir_vals\n'rounds to whole number\nDim anny_start As Date\nDim duration As Integer, this_year As Integer\nDim annual_rate As Double, anny_rate As Double\nthis_year = IntYear(y_year)\nprior_end_bal = get_val(\"End Bal\" &amp; account, \"tbl_balances\", \"Y\" &amp; this_year - 1)\nanny_start = get_val(account, \"tbl_retir_vals\", \"Start Date\")\nduration = get_val(account, \"tbl_retir_vals\", \"Anny Dur Yrs\")\nanny_rate = get_val(account, \"tbl_retir_vals\", \"Anny Rate\")\nn = duration - (this_year - year(anny_start))\nresult = 0\nIf n &gt; 0 Then\nresult = -Application.WorksheetFunction.Pmt(anny_rate, n, prior_end_bal)\nfactor = mo_apply(anny_start, y_year) ' TODO put end date on this call\nresult = factor * result\nresult = Application.WorksheetFunction.Round(result, 0)\nEnd If\nannuity = result\nEnd Function\nFunction bal_agg(y_year As String, val_type As String, Optional acct_type As String = \"*\", Optional txbl As Integer = 1, Optional active As Integer = 1) As Double\n'get the sum of values from the balances table for a year and type, optionally further qualified by acct type,taxable status,active status\n'wild cards are OK as are Excel functions like \"&lt;&gt;\" prepended to the values for strings\n'NOTE all the criteria fields must have values - suggest using NA if there is no value such as for an election.\nDim this_year As Integer, tbl_name As String\nDim result As Double\nDim tbl As ListObject, crit_col1 As ListColumn, crit_col2 As ListColumn, val_col As ListColumn\nDim criteria1 As String, criteria2 As String\ntbl_name = \"tbl_balances\"\nws_name = ws_for_table_name(tbl_name)\nSet tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name)\nSet crit_col1 = tbl.ListColumns(\"ValType\")\nSet crit_col2 = tbl.ListColumns(\"Type\")\nSet crit_col3 = tbl.ListColumns(\"Income Txbl\")\nSet crit_col4 = tbl.ListColumns(\"Active\")\nSet val_col = tbl.ListColumns(y_year)\nresult = Application.WorksheetFunction.SumIfs(val_col.Range, _\ncrit_col1.Range, val_type, _\ncrit_col2.Range, acct_type, _\ncrit_col3.Range, txbl, _\ncrit_col4.Range, active)\nbal_agg = result\nEnd Function\nSub calc_retir()\n'iterate through the years to calc retirement streams based on balances from prior year\n'prior balance from balances feeds current retirement, and current invest_iande_work\n'retirement feeds aux,\n'aux and invest_iande_work feeds current balances\n'iande depends on retirement as well and taxes depend on iande\nDim rcols As Range, rcell As Range, single_cell As Range\nDim tbls() As ListObject\nDim tbl_names() As String, ws_names() As String\nDim msg As String, formula As String\nlog (\"-----------------------------\")\nlog (\"Entering manual calculation mode.\")\nApplication.Calculation = xlCalculationManual\ntbl_names = Split(\"tbl_retir_vals;tbl_aux;tbl_invest_iande_work;tbl_balances;tbl_iande;tbl_taxes\", \";\")\nk = UBound(tbl_names)\nReDim tbls(k), ws_names(k)\nmsg = \"\"\nFor I = LBound(tbl_names) To k\nws_names(I) = ws_for_table_name(tbl_names(I))\nSet tbls(I) = ThisWorkbook.Worksheets(ws_names(I)).ListObjects(tbl_names(I))\nIf Len(msg) &gt; 0 Then msg = msg &amp; \",\"\nIf I = UBound(tbl_names) Then msg = msg &amp; \" and \"\nmsg = msg &amp; ws_names(I)\nNext I\nSet rcols = tbls(0).HeaderRowRange\nSet col = tbls(0).ListColumns(\"yearly\")\ncol.Range.Dirty\ncol.Range.Calculate\nlog (\"Retirement yearly column refreshed.\")\nFor Each rcell In rcols\nIf InStr(rcell.value, \"Y20\") = 1 Then\nlog (\"Calculating for \" &amp; rcell.value)\nFor I = LBound(tbls) To UBound(tbls)\nSet col = tbls(I).ListColumns(rcell.value)\nt_name = tbls(I).Name\nApplication.StatusBar = rcell.value &amp; \":\" &amp; t_name\nlog (\"  \" &amp; t_name &amp; \" - Range \" &amp; col.Range.address)\nIf dbg Then\nFor Each single_cell In col.Range.Cells\nformula = single_cell.formula\nIf 0 &lt; Len(formula) Then\nIf Left(formula, 1) = \"=\" Then\nlog (\"    \" &amp; single_cell.address &amp; \":    \" &amp; formula)\nsingle_cell.Dirty\nsingle_cell.Calculate\nEnd If\nEnd If\nNext\nElse\ncol.Range.Dirty\ncol.Range.Calculate\nEnd If\nNext I\nEnd If\nNext rcell\nlog (\"Entering automatic calculation mode.\")\nApplication.StatusBar = \"\"\nlog (\"-----------------------------\")\nApplication.Calculation = xlCalculationAutomatic\nEnd Sub\nSub calc_table()\n'Testing forced calc of table\nDim rcols As Range, rcell As Range\nDim tbl As ListObject\nDim tbl_name As String\nDim ws_name As String\nDim msg As String\nlog (\"-----------------------------\")\nlog (\"Entering manual calculation mode.\")\nApplication.Calculation = xlCalculationManual\ntbl_name = \"tbl_balances\"\nws_name = ws_for_table_name(tbl_name)\nSet tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name)\ntbl.Range.Dirty\ntbl.Range.Calculate\nlog (tbl_name &amp; \" refreshed.\")\nlog (\"Entering automatic calculation mode.\")\nlog (\"-----------------------------\")\nApplication.Calculation = xlCalculationAutomatic\nEnd Sub\nFunction CT_Tax(tax_Year As Integer, taxable_Income As Double) As Double\n'Calculate the CT income tax for a given year and taxable income amount\n'The so called Initial Tax Calculation only.\n'Table is not setup exactly like Federal - it uses the traditional method not the subraction method.\n'gets a result of zero if year not in the table.\nDim result As Double\nDim tbl_name As String\nDim tbl As ListObject\nDim lr As ListRow\nDim rng As Range\nDim yr As Integer\nDim ti As Double, rt As Double, base As Double\ntbl_name = \"tbl_ct_tax\"\nws = ws_for_table_name(tbl_name)\nSet tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name)\nresult = 0\nprior = 0\nFor Each lr In tbl.ListRows()\nSet rng = lr.Range\nyr = rng.Cells(1, 1).value\nti = rng.Cells(1, 2).value\nrt = rng.Cells(1, 3).value\nbase = rng.Cells(1, 4).value\nIf tax_Year = yr Then\nIf taxable_Income &lt; ti And taxable_Income &gt;= prior Then\nresult = base + (rt * (taxable_Income - prior))\nresult = Round(result, 0)\nEnd If\nprior = ti\nEnd If\nNext lr\nCT_Tax = result\nEnd Function\nFunction d2s(dt As Date) As String\nd2s = Format(dt, \"mm/dd/yyyy\")\nEnd Function\nFunction ei_withhold(legend As String, ei_template, y_year As String) As Double\n' compute annual social security or medicare withholding for earned income\n' relies on naming conventions\n' ei_template is a template for the line with earned income.  % is replaced by the person indicator, which\n' is the trailing part of the legend.\n' the legend has two parts separated by hyphen.  The first part is the type of withholding\n' which must be either: Medicare or Soc Sec\n' y_year is the column heading such as Y2022\nDim result As Double, earned As Double\nDim rate As Variant, cap As Variant\nDim legend_parts() As String\nDim typ As String, ei_line As String, y_rate_year As String\nlegend_parts = Split(legend, \"-\")\ntyp = Trim(legend_parts(LBound(legend_parts)))\nwho = Trim(legend_parts(UBound(legend_parts)))\nei_line = Replace(ei_template, \"%\", who)\nearned = get_val(ei_line, \"tbl_iande\", y_year)\nffy = get_val(\"first_forecast\", \"tbl_gen_state\", \"value\")\nlay = -1 + IntYear(ffy)\nrate_year = Application.WorksheetFunction.Min(lay, IntYear(y_year))\ny_rate_year = \"Y\" &amp; CStr(rate_year)\nSelect Case typ\nCase \"Soc Sec\":\ncap = get_val(\"Social Security Wage Cap\", \"tbl_manual_actl\", y_rate_year)\nrate = get_val(\"Social Security FICA rate\", \"tbl_manual_actl\", y_rate_year)\nresult = rate * Application.WorksheetFunction.Min(cap, earned)\nCase \"Medicare\":\nrate = get_val(\"Medicare withholding rate\", \"tbl_manual_actl\", y_rate_year)\nresult = rate * earned\nEnd Select\nei_withhold = result\nEnd Function\nFunction endbal(acct As String, y_year As String) As Variant\n'compute the end balance for an account for a year\nDim rate As Variant\nDim val As Variant\nopen_bal = get_val(\"Start bal\" &amp; acct, \"tbl_balances\", y_year)\nadds = get_val(\"Add/Wdraw\" &amp; acct, \"tbl_balances\", y_year)\nreinv = get_val(\"Reinv Amt\" &amp; acct, \"tbl_balances\", y_year)\nfees = get_val(\"Fees\" &amp; acct, \"tbl_balances\", y_year)\nunrlzd = get_val(\"Unrlz Gn/Ls\" &amp; acct, \"tbl_balances\", y_year)\nval = open_bal + adds + reinv + unrlzd + fees\nendbal = val\nEnd Function\nFunction extend_iiande(account As String, category As String, y_year As String) As Double\n'For investment income and expense, use a ratio to the start balance to compute a forecast value for the income/expense item on this row\n'To be run in a cell in the invest_iande_work table.\nDim work_table As String, bal_table As String\nDim key As Variant\nDim start_bal As Double, rate As Double, value As Double\nwork_table = Application.caller.ListObject.Name\nbal_table = \"tbl_balances\"\nstart_bal = get_val(\"End Bal\" + account, bal_table, y_offset(y_year, -1))\nkey = account + \":\" + category + \":rate\"\nrate = get_val(key, work_table, y_year)\nvalue = rate * start_bal\nextend_iiande = value\nEnd Function\nFunction Fed_Tax_CapGn(tax_Year As Integer, taxable_Income As Double, totCapGn As Double) As Double\n'computes the resulting federal tax with capital gains portion at 15%\n'the input should include qualified dividends\nDim base As Double, result As Double, cgt As Double\nbase = Federal_Tax(tax_Year, taxable_Income - totCapGn)\ncgt = 0.15 * totCapGn\nresult = base + cgt\nFed_Tax_CapGn = result\nEnd Function\nFunction Federal_Tax(tax_Year As Integer, taxable_Income As Double) As Double\n'Calculate the federal income tax for a given year and taxable income amount\n'gets a result of zero if year not in the table.\nDim result As Double\nDim tbl_name As String\nDim tbl As ListObject\nDim lr As ListRow\nDim rng As Range\nDim yr As Integer\nDim ti As Double\nDim rt As Double\nDim sb As Double\ntbl_name = \"tbl_fed_tax\"\nws = ws_for_table_name(tbl_name)\nSet tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name)\nresult = 0\nFor Each lr In tbl.ListRows()\nSet rng = lr.Range\nyr = rng.Cells(1, 1).value\nti = rng.Cells(1, 2).value\nrt = rng.Cells(1, 3).value\nsb = rng.Cells(1, 4).value\nIf tax_Year = yr Then\nIf taxable_Income &gt; ti Then\nresult = (rt * taxable_Income) - sb\nresult = Round(result, 0)\nEnd If\nEnd If\nNext lr\nFederal_Tax = result\nEnd Function\nFunction gain(acct As String, y_year As String, realized As Boolean) As Variant\n'For bank accounts and investments, return the realized or unrealized gain for an account for a year for actual or forecast\n'Other types of accounts return zero.\n' for investments actuals, use the values from invest_actl\n' for bank account actuals use the row in iande defined by the 'bank_interest' value on the general (state) table\nDim rate As Variant\nDim val As Variant\nDim col_name As String\nDim interest_row As String\naccount_type = get_val(acct, \"tbl_accounts\", \"Type\")\nSelect Case account_type\nCase \"I\", \"B\"\nis_fcst = is_forecast(y_year)\nSelect Case is_fcst\nCase True\nSelect Case account_type\nCase \"I\"\nSelect Case realized\nCase True\nval = agg_table(\"tbl_invest_iande_work\", y_year, acct &amp; \"|value|I\", , \"Account|Type|IorE\")\nCase False ' Unrlz Gn\nopen_bal = get_val(\"Start bal\" &amp; acct, \"tbl_balances\", y_year)\nrate = get_val(\"Mkt Gn Rate\" &amp; acct, \"tbl_balances\", y_year)\nval = open_bal * rate\nEnd Select\nCase \"B\"\nSelect Case realized\nCase True\nopen_bal = get_val(\"Start bal\" &amp; acct, \"tbl_balances\", y_year)\nrate = get_val(\"Mkt Gn Rate\" &amp; acct, \"tbl_balances\", y_year)\nval = open_bal * rate\nCase False ' Unrlz Gn\nval = 0\nEnd Select\nEnd Select\nCase False ' actuals\nSelect Case account_type\nCase \"I\"\nSelect Case realized\nCase True\nval = get_val(\"Rlz Int/Gn\" &amp; acct, \"tbl_invest_actl\", y_year)\nCase False\nval = get_val(\"Unrlz Gn/Ls\" &amp; acct, \"tbl_invest_actl\", y_year)\nEnd Select\nCase \"B\" 'banks\nSelect Case realized\nCase True\ninterest_row = get_val(\"bank_interest\", \"tbl_gen_state\", \"value\")\nval = get_val(interest_row, \"tbl_iande\", y_year)\nCase False ' banks never have unrealized\nval = 0\nEnd Select\nEnd Select\nEnd Select\ngain = val\nCase Else ' return zero if not investment or bank account\ngain = 0\nEnd Select\nEnd Function\nFunction get_val(line_key As Variant, tbl_name As String, col_name As String, Optional raise_bad_col = False) As Variant\n'Fetches a value from a given table (it must be an actual worksheet table\n'If the line is not found in the table, a zero is returned.\n'Bad columns are usually logged, but if the argument raise_bad_col is True then an error is raised.\nDim value As Variant, rng As Variant\nDim caller As Range\nDim address As String\naddress = \"no addr\"\nOn Error GoTo skip ' allow testing from outside of Excel\nSet caller = Application.caller()\naddress = caller.Worksheet.Name &amp; \"!\" &amp; caller(1, 1).address\nskip:\nws = ws_for_table_name(tbl_name)\n'now get the data\nWith ThisWorkbook.Worksheets(ws)\nSet rng = .ListObjects(tbl_name).HeaderRowRange\nDim cr As Range\nOn Error GoTo ErrHandler1\ncol = Application.WorksheetFunction.Match(col_name, rng, False)\nSet rng = .ListObjects(tbl_name).DataBodyRange\nOn Error GoTo ErrHandler\nvalue = Application.WorksheetFunction.VLookup(line_key, rng, col, False)\nIf IsEmpty(value) Then\nvalue = 0\nEnd If\nEnd With\nget_val = value\nExit Function\nErrHandler:\nlog (\"[\" &amp; address &amp; \" ] get_val: \" &amp; line_key &amp; \" not found in \" &amp; tbl_name &amp; \", using zero as value for \" &amp; col_name)\nDim lkRange As Range\nIf False Then 'use this to debug missing lines. e.g. tbl_name = \"tbl_taxes\" Then\nSet lkRange = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name).ListColumns(1).DataBodyRange\nDebug.Print (lkRange.count)\nFor Each c In lkRange.Cells\nlog (c.value)\nNext\nEnd If\nget_val = 0\nExit Function\nErrHandler1:\nIf raise_bad_col = True Then\nErr.Raise vbObjectError + 1729, , \"Bad column: \" + col_name\nEnd If\nlog (\"[ \" &amp; address &amp; \" ] get_val: \" &amp; Err.Number &amp; \" \" &amp; Err.Description)\nlog (\"Trying to locate column: \" &amp; col_name &amp; \" in table \" &amp; tbl_name)\nlog (\"line is \" &amp; line_key)\nEnd Function\nFunction IntYear(yval) As Integer\n'strips off the Y on the argument (eg Y2019) and returns an integer\ny = 0 + Right(yval, 4)\nIntYear = y\nEnd Function\nFunction invest_fees(acct As String, y_year As String) As Variant\n'For investments, return the account fees for an account for a year for actual or forecast\n'Other types of accounts return zero.\n' for investments actuals, use the values from invest_iande_work\nDim val As Variant\naccount_type = get_val(acct, \"tbl_accounts\", \"Type\")\nSelect Case account_type\nCase \"I\"\nval = get_val(acct &amp; \":Investing:Account Fees:value\", \"tbl_invest_iande_work\", y_year)\n'Do not include action fees since those are included as part of the realized gain\n'val = val + get_val(acct &amp; \":Investing:Action Fees:value\", \"tbl_invest_iande_work\", y_year)\ninvest_fees = val\nCase Else ' return zero if not investment or bank account\ninvest_fees = 0\nEnd Select\nEnd Function\nFunction is_forecast(y_year As String) As Boolean\n'determine if this year is a forecast year\nffys = get_val(\"first_forecast\", \"tbl_gen_state\", \"Value\")\nffy = IntYear(ffys)\nty = IntYear(y_year)\nr = ty &gt;= ffy\nis_forecast = r\nEnd Function\nFunction last_two_parts(cat As String, Optional delim = \":\") As String\n'take the last two parts of a delimited string and return them as a new string with the delimiter\n'missing parts will be set to zero lenght string\nDim arr() As String\narr = Split(\"::\" + cat, delim)\nk = UBound(arr)\nr = arr(k - 1) + \":\" + arr(k)\nlast_two_parts = r\nEnd Function\nFunction linear(count As Integer, Optional minimum = 0) As Double\n'Use the Excel forecast linear function to extrapolate the value based on the prior &lt;count&gt; values on this line.\n'will use &lt;count&gt; number of data points if they exist or fewer if that goes before the first year\n'The minimum is used to prevent values from going below that amount\n' Suitable only for year columns.\n' Due to trouble with the ListObject function which makes values empty for cells with formulas, a work around is used\n' to determine the table name from the worksheet name.This should be OK for major tables which correspond by convention.\nDim point As Range, db_rng As Range, col_rng As Range\nDim v As Variant, ys As Variant, xs As Variant, ys1() As Variant, xs1() As Variant\nDim table_name As String\nDim ws As Worksheet\nDim this_year As Double\nOn Error GoTo ErrHandler\nSet point = Application.caller\nSet ws = point.Worksheet\ntable_name = \"tbl_\" &amp; ws.Name ' work around - referencing the list object makes values empty for cells with formulas!\nSet db_rng = Range(table_name) ' equivalent to databodyRange\nhdg_row = db_rng.Row - 1\nprogress = \"initialized\"\nWith ws\n' see how many prior items are available up to the requested number\nFor I = 1 To count\ncn = .Cells(hdg_row, point.Column - I).value\nIf Not (Left(cn, 1) = \"Y\" And IsNumeric(Right(cn, 4))) Then\nExit For\nEnd If\nNext I\ncount = I - 1\nprogress = \"count set: \" &amp; count\n' Construct the exising dependent (y) values\ny_year = .Cells(hdg_row, point.Column).value\nthis_year = CDbl(IntYear(y_year))\nprogress = \"this year set\"\nSet y_range = .Range(.Cells(point.Row, point.Column - count), .Cells(point.Row, point.Column - 1))\nprogress = \"y_range: \" &amp; y_range.address\nys = y_range.value\nprogress = \"ys set\"\nSet x_range = .Range(.Cells(hdg_row, point.Column - count), .Cells(hdg_row, point.Column - 1))\nprogress = \"x_range: \" &amp; x_range.address\nxs = x_range.value\nprogress = \"values extracted\"\nEnd With\nany_empty = False\nReDim ys1(UBound(ys, 2) - 1) ' redim forces origin to, so the one dimension versions start there\nReDim xs1(UBound(xs, 2) - 1)\nFor I = LBound(xs, 2) To UBound(xs, 2) 'years as numbers\nxs1(I - 1) = CDbl(IntYear(xs(1, I)))\nys1(I - 1) = ys(1, I)\nany_empty = any_empty Or IsEmpty(ys1(I - 1))\nNext I\nprogress = \"values formatted\"\n'When workbook is initially loaded Excel does not have knowledge of dependencies hidden in this function\n'So it runs the fomulas when the predecessors are not yet available. This causes forecast_linear to error since data is missing.\n'However, apparently the calcs are done a second time where they work.  This bit looks for empties and if so returns zero.\nIf any_empty Then\nv = 0\nprogress = \"empty detected\"\nElse\nv = Application.WorksheetFunction.Forecast_Linear(this_year, ys1, xs1)\nv = Application.WorksheetFunction.Max(v, minimum)\nprogress = \"forecast_linear returned \" &amp; CStr(v)\nEnd If\nlinear = v\nExit Function\nErrHandler:\nlog (\"linear failed. Progress code: \" &amp; progress)\nlog (\"worksheet: \" &amp; ws.Name)\nlog (\"hdg_row: \" &amp; hdg_row)\nlog (\"point.row:\" &amp; point.Row)\nlog (\"point.column: \" &amp; point.Column)\nlog (\"y_year: \" &amp; y_year)\nlog (\"Error: \" &amp; Err.Number)\nlog (Err.Description)\nIf progress = \"values formatted\" Then\nFor I = LBound(xs1) To UBound(xs1)\nlog (\"\" &amp; xs1(I) &amp; \": \" &amp; ys1(I))\nNext I\nEnd If\nEnd Function\nSub log(txt As String)\nfn = ThisWorkbook.Path &amp; \"/fcast_log.txt\"\nOpen ThisWorkbook.Path &amp; \"/log.txt\" For Append As #1\nPrint #1, (Format(Now, \"mm/dd/yyyy HH:mm:ss: \") &amp; txt)\nClose #1\nEnd Sub\nFunction LUMP(account As String, y_year As String) As Double\n'return the expected lump sum payment for an account based on the prior year's end balance\nDim this_year As Integer, tbl_name As String\nDim prior_end_bal As Double\nprior_end_bal = get_val(\"End Bal\" &amp; account, \"tbl_balances\", y_offset(y_year, -1))\nLUMP = prior_end\nEnd Function\nFunction MedicarePrem(b_or_d As Integer, year As String, inflation As Variant, Optional magi As Variant = -1) As Variant\n'Given a year (as Y+year), return annual part b premium or part D surcharge (IRMAA)\n'normally look up the modifed adjusted gross from 2 years ago, but if its supplied, like for a test, use that instead.\n'b_or_d isa 1 for part B premium or 2 for Part D surcharge\n'If the year is not in the table, then the largest year lower than that given will be used\n'and the resulting value will include inflation.  Inflation is given as 1.0x so it can be used directly\nDim yr As Integer\nDim tbl_name As String, ws_name As String, magi_yr As String\nDim tbl As ListObject\nDim lr As ListRow, rng As Range\nDim infl As Variant\nyr = IntYear(year)\nIf magi = -1 Then\nmagi_yr = y_offset(year, -2)\nmagi = get_val(\"Adjusted Gross - TOTAL\", \"tbl_taxes\", magi_yr)\nEnd If\nmagi = Application.WorksheetFunction.Max(1, magi)\ntbl_name = \"tbl_part_b\"\nws_name = ws_for_table_name(tbl_name)\nSet tbl = ThisWorkbook.Worksheets(ws_name).ListObjects(tbl_name)\nSet yr_col = tbl.ListColumns(\"year\")\ny = Application.WorksheetFunction.VLookup(yr, yr_col.Range, 1, True) ' latest year for which we have data\nMedicarePrem = 0 'in case the if never succeeds\nFor Each lr In tbl.ListRows()\nSet rng = lr.Range\nry = rng.Cells(1, 1).value\nrl = rng.Cells(1, 2).value\nrh = rng.Cells(1, 3).value\nvalu = rng.Cells(1, 3 + b_or_d).value\npw = (yr - y)\nIf (ry = y And rl &lt; magi And rh &gt;= magi) Then\np = valu * 12\ninfl = CDbl(Application.WorksheetFunction.Power(inflation, pw))\nMedicarePrem = p * infl\nExit For\nEnd If\nNext\nEnd Function\nFunction mo_apply(start_date As Date, y_year As String, Optional end_mdy As String = \"\") As Double\n'Get a rational number that represents the number of months that apply in a particular year given the start date and optionally an end date\n'The end date is a string since there is a bug in the Mac Excel.\n'The end date represents the month of the last period to include.  The day is ignored and the last day of the month is used.\nDim result As Double, distance As Double, sign As Integer, months As Integer\nDim ed As Date, sd As Date\nIf end_mdy = \"\" Then\ned = DateSerial(3000, 12, 31) 'the default since the literal is not working on MacExcel\nElse\nmdy = Split(end_mdy, \"/\")\ned = DateSerial(mdy(2), mdy(0) + 1, 1) - 1\nEnd If\ned = Application.WorksheetFunction.Min(ed, DateSerial(IntYear(y_year), 12, 31))\nsd = Application.WorksheetFunction.Max(start_date, DateSerial(IntYear(y_year), 1, 1))\ndistance = (ed - sd) / (365.25 / 12)\nmonths = Round(distance, 0)\nmonths = Application.WorksheetFunction.Min(12, months)\nmonths = Application.WorksheetFunction.Max(0, months)\nresult = months / 12\nmo_apply = result\nEnd Function\nFunction nth_word_into(n As Integer, source As String, template As String) As String\n' insert the nth word (first is 0th) from source into the template, replacing %\nDim words() As String\nwords = Split(Trim(source), \" \")\nresult = Replace(template, \"%\", Trim(words(n)))\nnth_word_into = result\nEnd Function\nFunction PartBPrem(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant\n'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part b premium\n'If the year is not in the table, then the largest year lower than that given will be used\n'and the resulting value will include inflation.  Inflation is given as 1.0x so it can be used directly\nPartBPrem = MedicarePrem(1, year, inflation, magi)\nEnd Function\nFunction PartDSurcharge(year As String, inflation As Variant, Optional magi As Variant = -1) As Variant\n'Given a year (as Y+year) and the modifed adjusted gross (2 years ago) return annual part D surcharge\n'If the year is not in the table, then the largest year lower than that given will be used\n'and the resulting value will include inflation.  Inflation is given as 1.0x so it can be used directly\nPartDSurcharge = MedicarePrem(2, year, inflation, magi)\nEnd Function\nFunction percent_year_worked(initials As String) As Double\n'Using the year of the current column and the data in the people table, return a number between 0 and 1\n'indicating the percent of the year worked for the person with initials given\nDim result As Double\nDim retir_date As Date\nresult = 0\nretir_date = get_val(initials, \"tbl_people\", \"Retire Date\")\ny_year = this_col_name()\ny = IntYear(y_year)\nj1 = DateSerial(y, 1, 1)\ndiff = DateDiff(\"d\", j1, retir_date)\ndty = 2 + DateDiff(\"d\", j1, DateSerial(y, 12, 31)) 'days this year\nIf diff &gt; dty Then\nresult = 1\nEnd If\nIf diff &lt; 0 Then\nresult = 0\nEnd If\nIf diff &gt; 0 And diff &lt;= dty Then\nresult = diff / dty\nEnd If\npercent_year_worked = result\nEnd Function\nFunction prior_value(line As String) As Variant\n' Get the prior years' value for this line. Suitable only for year columns.\nDim prior_col As String\nDim value As Variant\nDim table As String\nDim rng As Range\nSet rng = Application.caller\ntable = rng.ListObject.Name\nprior_col = y_offset(this_col_name(), -1)\nvalue = get_val(line, table, prior_col)\nprior_value = value\nEnd Function\nFunction ratio_to_start(account As String, category As String, y_year As String) As Double\n'For investment income and expense, compute the ratio to the start balance, but use the prior end balance since\n'that should have already been computed.  This allows the table to occur before the balances table in the compute order\n'To be run in a cell in the invest_iande_work table.\nDim work_table As String, bal_table As String\nDim key As Variant\nDim start_bal As Double, value As Double, ratio As Double\nwork_table = Application.caller.ListObject.Name\nbal_table = \"tbl_balances\"\nOn Error GoTo err1\nstart_bal = get_val(\"End Bal\" + account, bal_table, y_offset(y_year, -1), True)\nGoTo continue\nerr1:\n' If we are on the first period, then the start value should be static and not require a calculation\nIf 1729 = Err.Number - vbObjectError Then\nstart_bal = get_val(\"Start Bal\" + account, bal_table, y_year)\nElse\nlog (Err.Description)\nratio_to_start = 0\nExit Function\nEnd If\ncontinue:\nkey = account + \":\" + category + \":value\"\nvalue = get_val(key, work_table, y_year)\nIf start_bal = 0 Then\nratio = 0\nElse\nratio = value / start_bal\nratio = Round(ratio, 4)\nEnd If\nratio_to_start = ratio\nEnd Function\nFunction reinv_amt(acct_name As String, y_year As String) As Double\n'compute the reinvestment amount for an account and year.\nDim amt, rlz, rate, fees As Double\nrlz = get_val(\"Rlz Int/Gn\" &amp; acct_name, \"tbl_balances\", y_year)\nrate = get_val(\"Reinv Rate\" &amp; acct_name, \"tbl_balances\", y_year)\namt = Round(rlz * rate, 2)\nreinv_amt = amt\nEnd Function\nFunction retir_parm(code As String, who As String) As Variant\n'Get a retirement paramenter given code and code (G or V)\nDim rng As Range\nOn Error GoTo ErrHandler\nsht = \"retireparms\"\ncl = InStr(1, \"abGV\", who, vbTextCompare)\nWith ThisWorkbook.Worksheets(sht)\nSet rng = .Range(\"Table3[code]\")\nrw = Application.WorksheetFunction.Match(code, rng, False)\nrw = rw + rng.Row - 1\ns = sht &amp; \"!\" &amp; .Cells(rw, cl).address\nv = .Range(s)\nretir_parm = v\nEnd With\nExit Function\nErrHandler:\nlog (\"retir_parm: \" &amp; Err.Description &amp; \" (\" &amp; Err.Number &amp; \")\")\nlog (\"Looking for: \" &amp; code &amp; \" who:\" &amp; who)\nEnd Function\nFunction RMD_1(account As String, account_owner As String, y_year As String, Optional death_year As Integer = 0) As Double\n'return the req minimum distribution table 1 result for a year for a given account, owner (GBD or VEC) and year.\n'if death year is not given then this function treat this as spousal inheritance\n'if death year is given the treat this as a beneficiary inheritance\nDim this_year As Integer, age As Integer\nDim prior_end_bal As Double, life_expectancy As Double, result As Double\nthis_year = IntYear(y_year)\nprior_end_bal = get_val(\"End Bal\" &amp; account, \"tbl_balances\", \"Y\" &amp; this_year - 1)\nIf death_year = 0 Then ' for spousal use actual age this year\nage = age_of(account_owner, y_year)\nlife_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\")\nElse ' work with the age at year after death for beneficiary type\nage = age_of(account_owner, \"Y\" &amp; (death_year + 1))\nlife_expectancy = get_val(age, \"tbl_rmd_1\", \"Life Expectancy\")\nlife_expectancy = life_expectancy - (this_year - (death_year + 1)) 'factor is reduced by one for each succeeding distribution year.\nEnd If\nresult = prior_end_bal / life_expectancy\nRMD_1 = result\nEnd Function\nFunction rolling_avg(Optional max_value As Variant = Null, Optional lookback As Integer = 5, Optional table As String = \"\", Optional key As String = \"\", Optional this_y_year As String = \"\") As Double\n'Look back at previous columns and average the numeric values found there, ignoring items before 2018, but including zeros\n'max_value if provided is used instead of any higher values\n'lookback is defaulted to 5 years\n'If not provided, table, key and y_year are taken from the calling cell\n'Return the average.  Returns 0 if the count of valid items is 0.\nDim y_year As String\nDim point As Range, ws As Worksheet\nDim value As Variant\nSet point = Application.caller\nIf table = \"\" Then\ntable = point.ListObject.Name\nEnd If\nIf key = \"\" Then\noffset = point.ListObject.ListColumns(1).Range(1, 1).Column - 1\nSet ws = point.Worksheet\nkey = ws.Cells(point.Row, 1 + offset).value\nEnd If\nIf this_y_year = \"\" Then\nthis_y_year = this_col_name()\nEnd If\nthis_year = IntYear(this_y_year)\ntot = 0\ncnt = 0\nFor y = this_year - lookback To this_year - 1\nIf y &lt; 2018 Then\nvalue = Null\nElse\ny_year = \"Y\" &amp; y\nvalue = get_val(key, table, y_year)\nEnd If\nIf Not IsNull(value) Then\nIf Not IsNull(max_value) Then\nvalue = Application.WorksheetFunction.Min(max_value, value)\nEnd If\ntot = tot + value\ncnt = cnt + 1\nEnd If\nNext y\nIf cnt &lt;&gt; 0 Then\nrolling_avg = tot / cnt\nElse\nrolling_avg = 0\nEnd If\nEnd Function\nFunction simple_return(account As String, y_year As String) As Double\n'return the rlzd gain divided by the average of the start and end balances (or zero)\nsb = get_val(\"Start Bal\" &amp; account, \"tbl_balances\", y_year)\neb = get_val(\"End Bal\" &amp; account, \"tbl_balances\", y_year)\nrg = get_val(\"Rlz Int/Gn\" &amp; account, \"tbl_balances\", y_year)\nurg = get_val(\"Unrlz Gn/Ls\" &amp; account, \"tbl_balances\", y_year)\nav = (sb + eb) / 2\nIf av = 0 Then\nresult = 0\nElse\nresult = (rg + urg) / av\nEnd If\nsimple_return = result\nEnd Function\nFunction sort_tax_table()\n'make sure the federal tax tables are sorted properly\nDim tbl_name As String\ntbl_name = \"tbl_fed_tax\"\nws = ws_for_table_name(tbl_name)\nDim tbl As ListObject\nSet tbl = ThisWorkbook.Worksheets(ws).ListObjects(tbl_name)\nDim year_column As Range, Range_column As Range\nSet year_column = Range(tbl_name &amp; \"[Year]\")\nSet Range_column = Range(tbl_name &amp; \"[Range]\")\nWith tbl.sort\n.SortFields.Clear\n.SortFields.Add key:=year_column, SortOn:=xlSortOnValues, Order:=xlAscending\n.SortFields.Add key:=Range_column, SortOn:=xlSortOnValues, Order:=xlAscending\n.Header = xlYes\n.Apply\nEnd With\nEnd Function\nSub test_fed_tax()\nDim r As Double, c As Double\nzt = \"not passed\"\nr = Federal_Tax(2150, 9999)\nIf 0 = r Then zt = \"passed\"\nn = 74031\npt = \"not passed\"\nr = Federal_Tax(2020, 350000)\nIf r = n Then pt = \"passed\"\nn = 72331\nct = \"not passed\"\nc = Fed_Tax_CapGn(2020, 350000, 10000)\nIf c = n Then ct = \"passed\"\nDebug.Print (\"Zero test: \" &amp; zt)\nDebug.Print (\"Positive test:\" &amp; pt)\nDebug.Print (\"Capital gains test:\" &amp; ct)\nEnd Sub\nSub test_get_val()\nDim tbl_name As String\nDim line_name As String\nDim y_year As String\nDebug.Print (get_val(\"Expenses:T:Soc Sec - TOTAL\", \"tbl_iande_actl\", \"Y2018\"))\nDebug.Print (get_val(\"End BalReal Estate\", \"tbl_balances\", \"Y2019\"))\nEnd Sub\nSub test_LUMP()\nDim val As Double\nval = LUMP(\"401K - GBD - TRV\", \"Y2022\")\nDebug.Print (val)\nEnd Sub\nSub test_medicarePrem()\nDim test_cases() As Variant\nDim yr As String\nDim infl As Variant\nDim magi As Variant\ntest_cases() = Array(Array(2021, 1#, 10000), Array(2022, 1#, 182001), Array(2022, 1#, 400000), Array(2023, 1.02, 75000))\nlog (\"Part B tests\")\nFor I = LBound(test_cases) To UBound(test_cases)\nyr = \"Y\" &amp; test_cases(I)(0)\nmagi = test_cases(I)(2)\ninfl = test_cases(I)(1)\npartB = PartBPrem(yr, infl, magi)\npartD = PartDSurcharge(yr, infl, magi)\nmsg = \"Input: year=\" &amp; test_cases(I)(0) &amp; \" magi=\" &amp; magi &amp; \" inflation=\" &amp; infl &amp; \"   Output: \" &amp; partB &amp; \"  Part D: \" &amp; partD\nlog (msg)\nNext\nEnd Sub\nSub test_mo_apply()\nDim test_cases() As Variant\nDim test_case As Variant\nDim yr As String\nDim start_date As Date, end_date As String, result As Double\ntest_cases() = Array( _\nArray(3, 2022, 2022), _\nArray(12, 2025, 2025), _\nArray(3, 2022, 2022, 11, 2022), _\nArray(3, 2022, 2025, 9, 2025), _\nArray(3, 2022, 2022, 8, 2022) _\n)\nlog (\"mo_apply tests\")\nFor I = LBound(test_cases) To UBound(test_cases)\ntest_case = test_cases(I)\nstart_date = DateSerial(test_case(1), test_case(0), 1)\nyr = \"Y\" &amp; test_case(2)\nend_date = \"-none-\"\nIf UBound(test_case) &gt; 2 Then\nend_date = test_case(3) &amp; \"/1/\" &amp; test_case(4)\nresult = mo_apply(start_date, yr, end_date)\nElse\nresult = mo_apply(start_date, yr)\nEnd If\nmsg = \"Input: year=\" &amp; yr &amp; \" start/end dates = \" &amp; start_date &amp; \" \" &amp; end_date &amp; \"   Output: \" &amp; result\nlog (msg)\nNext I\nEnd Sub\nSub test_nth()\nDebug.Print (nth_word_into(0, \"fed tax value\", \"Taxes for %s\"))\nEnd Sub\nSub test_sort()\nsort_tax_table\nEnd Sub\nFunction this_col_name() As String\n'return the caller's column name, assuming the cell is in a table.\n'Otherwise generates a #VALUE  error\n'Use to make formulas more portable\nDim point As Range\nDim list_ojb As ListObject\nDim cols As ListColumns\nDim offset As Integer, col_ix As Integer\nSet point = Application.caller\nSet list_obj = point.ListObject\nSet cols = list_obj.ListColumns\noffset = list_obj.Range(1, 1).Column - 1\ncol_ix = offset + point.Column\nthis_col_name = cols(col_ix)\nEnd Function\nFunction unrlz(acct As String, y_year As String) As Variant\n'compute the unrealized gain or loss for an account for a year, assuming end bal is fixed\nDim open_bal As Variant, adds As Variant, rlzd As Variant, end_bal As Variant\nDim val As Variant\nopen_bal = get_val(\"Start bal\" &amp; acct, \"tbl_balances\", y_year)\nadds = get_val(\"Add/Wdraw\" &amp; acct, \"tbl_balances\", y_year)\nrlzd = get_val(\"Rlz Int/Gn\" &amp; acct, \"tbl_balances\", y_year)\nend_bal = get_val(\"End bal\" &amp; acct, \"tbl_balances\", y_year)\nval = end_bal - (open_bal + adds + rlzd)\nunrlz = val\nEnd Function\nFunction ws_for_table_name(tbl_name As String) As String\n' find out what worksheet the named table occurs on\nWith ThisWorkbook.Worksheets(\"utility\")\nSet rng = .ListObjects(\"tbl_table_map\").DataBodyRange\nws = Application.WorksheetFunction.VLookup(tbl_name, rng, 2, False)\nEnd With\nws_for_table_name = ws\nEnd Function\nFunction y_offset(y_year As String, offset As Integer) As String\n'given a y_year offset it by the amount given, producing a new y_year\ny = IntYear(y_year)\nr = \"Y\" &amp; y + offset\ny_offset = r\nEnd Function\n</code></pre>"},{"location":"worksheets/","title":"Worksheets","text":"<p>The worksheets are grouped together with colored tabs.  The groups are as follows:</p> Group Sheet Purpose acct-bal accounts lists the tracked accounts and their attributes balances tracks annual changes and balance for tracked accounts transfers_plan Allows for planning of transfers between accounts that do not have a distribution plan income-expense iande Income and expenses (and cash flow) for both actuals and forecast periods. aux A place for side calculations. current During the year, this sheet gathers the year-to-date data and allows user to forecast total year for selected lines. These then can be copied into iande. invest_iande_work Income and Expenses that relate to investments. retirement retirement Retirement income streams and retirement medical expense streams retireparms Pension, social security options, post retirement medical insurance plan selection actuals iande_actl Part of the feed mechanism for actuals into iande. Includes data upto but not including the first forecast year. other_actl holds several tables of other actuals transfers_actl Gathers the transfers to and from all accounts coming from or going to banks or credit cards invest_actl Collects for each account categorized changes to the account value by actual time period. taxes taxes computes Federal and State income taxes. capgn estimating taxes for the current and prior year until tax statements arrive tax_tables Selected federal and state tax tables.  Required mininum distribution tables. tables gen_tables state tax information, Medicare Part B premiums, inflation, and a general state mangement utility Used by VBA functions to locate tables."},{"location":"sheets/accounts/","title":"accounts","text":"<p>This worksheet lists the tracked accounts and their attributes. Some of these accounts are real accounts at financial institutions.  Others summarize sets of assets or liabilities. One account is designated as the sweep account.</p> <p>The attributes are:</p> Name Description Account The name of the account or summay set Type A=Asset, B=Bank, C=Credit Cards, I=Investment, L=Liability, N=Loans Income Txbl 0 if sheltered, 1 if normal taxes Active 0 if inactive, 1 if active No Distr Plan 0 if there is a distribution plan, 1 otherwise Near Mkt Rate Rate to use to override the first forecast year computed rate Rate Cap Rate used to cap computed rates Reinv Rate Amount used to initialize the <code>Reinv Rate</code> row on the balances table Actl_source The line name where to find the actual add/wdraw amount Actl_source_tab The table name where to find the actual add/wdraw amount Fcst_source The line name where to find the forecast add/wdraw amount Fcst_source_tab The table name where to find the forecast add/wdraw amount Notes Place to indicate special things about the account"},{"location":"sheets/aux/","title":"aux","text":"<p>This is a set of rows needed to establish forecasts in some cases.  The rows may be input or calculated.  The need arises for aux data and calcs, for instance, in handling 401K accounts, where the EE contribution is tax deductable but is only part of the amount for add/wdraw at the balance level.  That value plus the pre-tax deductions amounts from the paychecks need to be summed to produce the W2 exclusions.  This is the place where those calcs happen. </p> <p>The calculations are flexible, but they often use the form of looking up a value and multiplying it by the value in the sign field.  Mostly the sign field is used to change or retain the sign, but it can be used to apply a scalar value such as a tax rate. </p> <p>The following style is used to allow the table to be relocated and makes the formula apparent from the values in cells.</p> <p><code>=@get_val([@Source],[@[Source Table]],this_col_name())*[@Sign]</code></p> <p>this_col_name is a VBA function that gets the current column table name.</p> <p>The field 'Accum_by' is intended to allow summations using the <code>accum</code> function.  If a value needs more than one tag, create another row with the same data and a different tag.  An example of this 401K deductions, which generate W2 exclusions on one hand and the need to deposit amounts into the 401K account.</p>"},{"location":"sheets/aux/#setup","title":"Setup","text":"<p>Setup sources this from: data/aux.json  To refresh that file:</p> <pre><code>dance/util/extract_table.py -w data/test_wb.xlsm -t tbl_aux -j data/aux.json -o records\n</code></pre>"},{"location":"sheets/balances/","title":"balances","text":"<p>The following fields are looked up from the account page: Type, Income Txbl, and Active.</p> <p>This table has the following rows for each account.  </p> ValType Formula Mkt Gn Rate Used to forecast unrealized gains.   Computed with <code>simple_return</code> for historical rows. Reinv Rate The part of realized gains that is reinvested each year. Proper modeling also requires consideration of re-investment policies, which are modeled as a re-investment rate per account per year. TODO: The remainder is planned to be transfered to the primary bank (new item in General State) Start Bal Previous year's end balance Add/Wdraw The amount added to the account during the year if positive, or removed if negative. Either manual, or some rows will have formulas Rlz Int/Gn The actual or forecast realized gain, including income and any capital gains or losses. Fees Account and transaction fees which reduce the value of the account Unrlz Gn/Ls The unrealized gains due to market changes End Bal Adds the start balance to each of the other change categories. <p>The calculations are designed to work even if the rows are filtered or sorted.  To restore to the natural sort order sort by AcctName then ValType (using a custom sort order that needs to be defined).</p>"},{"location":"sheets/balances/#rlz-intgn-line","title":"Rlz Int/Gn line","text":"<p>For actuals, this value derives from the investment performance report via the invest_actl worksheet.</p> <p>This report does not break out the income types.  If the accounting is done properly then the breakout for a particular investment account can be achieved via an income/expense report that selects that account. The value of the performance report 'Income' column total is equal to the value of the Investment Income report line Income - TOTAL.</p> <p>For forecast periods, the investment income and expense values are derived from adjusted extrapolated historical rates on line item basis. These values are then summed one way for the balances and another way for the iande tab.  </p>"},{"location":"sheets/cap_gain/","title":"capgn","text":"<p>This is for the purposes of </p> <ol> <li>estimating taxes for the current and prior year until tax statements arrive</li> <li>reconciling between balances (which includes realized capital gains) and income (which only includes capital gains arising as dividends, but not from sales of securities).</li> </ol>"},{"location":"sheets/current/","title":"current","text":"<p>This sheet takes the year to date data from Moneydance and allows the user to apply a factor to reproject the current year.  There is one table.</p>"},{"location":"sheets/current/#current_1","title":"current","text":"<p>Titled, YTD and Reprojection, the tbl_current has three leading columns; the first two are hidden.</p> <p>The reprojection formula is </p> <p><code>Year = (YTD * Factor) + Add</code></p> <p>For instance, use 1 and 0 if the year-to-date value is final.  </p> <p>If both Factor and Add are blank it means the value won't be transferred to <code>iande</code>, so the modeled value will be retained.</p> Name Description Key The full multi-level category name, anchored as Income or Expense, such as <code>Expenses:T:Income Tax:Current Yr:Fed:Est pmts</code>. is_leaf 1 if the category is a leaf in the category tree, otherwise 0.  Used to pull only leaves (not subtotals) into iande. Account The last portion of the key, indented by two spaces for each level YTD The year to data data which has been imported. The column name is replaced by the as of date in the form Yyyyymmdd Factor A number used in the formula. Add A number used in the formula. Year The result of the formula, or blank if not re-projected. <p>The rows are handled like iande with groups, totals and hierarchical inserts.</p> <p>The mechanism is described here.</p> <p>Currently the distributions (Income:J) and cashflow (Expenses:Y) are not imported but if used, they are carried to storage and to iande.</p>"},{"location":"sheets/gen_tables/","title":"gen_tables","text":"<p>A table of state tax information, Medicare Part B premiums, inflation, and a general state mangement table.</p>"},{"location":"sheets/gen_tables/#state-taxes","title":"state taxes","text":"<p>This compiles facts about various states for the purpose of considering relocation. Can be referenced in the tax calcs. </p> <p>Source: Kiplinger</p>"},{"location":"sheets/gen_tables/#part-b-premium","title":"Part B Premium","text":"<p>Values to select the premium given modified AGI and year. Also includes the part D adjustment.</p>"},{"location":"sheets/gen_tables/#inflation","title":"inflation","text":"<p>3 columns about 75 rows</p>"},{"location":"sheets/gen_tables/#general-state","title":"General State","text":"<p>Originally this has only one value, the first forecast year. Other items have been added, so the name is not great.</p>"},{"location":"sheets/iande/","title":"iande","text":"<p>This is for income and expenses. There is one table.</p>"},{"location":"sheets/iande/#iande_1","title":"iande","text":"<p>This is both actuals and forecast.  </p> <p>It has two leading columns then the actual and forecast years:</p> Name Description Key The full multi-level category name, anchored as Income or Expense, such as <code>Expenses:T:Income Tax:Current Yr:Fed:Est pmts</code>. This column is normally hidden. Account The last portion of the key, indented by two spaces for each level <p>The levels are grouped using Excel's grouping, so they can be expanded or collapsed.</p> <p>This tab is seeded with the original iande-actl data.   But it is expected that over time the rows will change.  For instance, if we later drop the first few years, we will find that some of the rows no longer come over from Moneydance.  On the other hand, we may add rows in Moneydance.  It is also possible that we may want to re-organize or rename the rows.  Take deleted rows first.</p> <ol> <li>Deleted Rows - The python script that loads the latest from Moneydance performs a check before executing the load.  It requires that any row that contains data or a fomula in the forecast era exist in the fresh import from Moneydance, when seeding the iande data.</li> <li>New rows - The new rows will be added into the <code>tbl_iande-actl</code> table but the <code>tbl_iande</code> won't know about them, possibly yielding totals that don't match.  At this point its up to the operator to make any needed adjustments to <code>tbl_iande</code> so that it's consistent with the actuals feed. Note - if new subcategories are created: then its best to insert them on <code>tbl_iande</code> so that what used to be a leaf node now has no data (its just a heading), copy the fixed values to the new rows and ensure the subtotals are proper for non-fixed (forecast values). Note: the report filters out categories that do not have any actuals.  In order to create forecasts for these, go ahead and create the desired rows in Moneydance and manually construct the rows in <code>tbl_iande</code>.</li> <li>Re-arrangement and renaming - At this point its up to the operator to make any needed adjustments to <code>tbl_iande</code> so that it's consistent with the actuals feed.</li> </ol> <p>The net of this is that except during periods of change, the rows of the iande tab and the rows of the iande-actl tab form the same set.  We don't require these to be in the same order.</p>"},{"location":"sheets/iande_actl/","title":"iande-actl","text":"<p>This is Income and Expense actuals as it comes from Moneydance <code>Income &amp; Expense by Year</code> report.  A key is constructed which includes the hierarchy.  That occurs in the A column. The summary rows are replaced by formulas as part of the import process.  These can be copied into future years. The column headings are of the Y+year style to facilitate lookups.  </p> <p>This data is loaded from <code>data/iande.tsv</code> with the program  <code>iande-actl-load.py</code> </p>"},{"location":"sheets/invest_actl/","title":"invest_actl","text":"<p>The Python program <code>invest-actl-load.py</code> gets the master list of investment accounts from <code>fcast.xlsm</code>.  It then reads the <code>data/invst_*.tsv</code> files and computes the net flows for each account by year.</p> <p>The MoneyDance Investment Performance report is named <code>invest-p-YYYY.tsv</code>. There is one for each actual year. The program reads these as well.</p> <p>It ends up with 5 rows of actuals for each investment.  The values types are:</p> ValType Description Add/Wdraw Amount moved into or out of account Rlz Int/Gn Income + Realized Gains Unrlz Gn/Ls Unrealized gains Income Interest and Dividends Gains Realized Gains <p>This can be used to look up the actuals on the balances tab. The visual basic function <code>gain</code> references the realized and unrealized gain lines for actuals. the visual basic function <code>add_wdraw</code> likewise references the first line.</p>"},{"location":"sheets/invest_iande_work/","title":"invest_iande_work","text":"<p>This sheet refers to Income and Expenses that relate to investments. The upper left quadrant of the sheet refers to actual values for several categories. These are converted to ratios in the lower left quadrant, so that forecasts can be derived. </p> <p>The table consists of - a set of lines of type <code>value</code> that represent income and expenses for each account - a matching set of lines with a type of <code>rate</code> to hold the ratio to the <code>start bal</code>. These are computed in the case of actuals.  The actual rates are extended into the forecast periods where they are used to compute forecasts for each of the income/expense types.</p> <p>The following categories were devised to support forecasting investment income and taxes.</p> Category Supports CapGn:Mut LT Long term mutual fund distributions. For taxable accounts - supports tax calc CapGn:Mut ST Long term mutual fund distributions. For taxable accounts - supports tax calc CapGn:Sales Gains or losses from sales in taxable accounts CapGn:Shelt:Distr Mutual fund distributions of any duration in non-taxable accounts CapGn:Shelt:Sales Gains or losses from sales in non-taxable accounts Div:Reg Regular dividends in taxable accounts Div:Shelt Dividends in non-taxable accounts Div:Tax-exempt * Dividends exempt from federal tax in taxable accounts Int:Reg Interest in taxable accounts Int:Shelt Interest in non-taxable accounts Int:Tax-exempt Interest exempt from federal tax in taxable accounts <p>* Tax exemption is in reality further broken down into federal and state.  In theory it should be implemented on a per security basis.  But it only matters for taxation so it is handled by custom lines on the taxes sheet by year.</p> <p>The actuals derive from a Moneydance report: Investment IandE, which is a configured Transaction Filter that selects just the investment income and expense lines for all accounts. It should select dates over the years that are actuals.  The result is saved into <code>invest-iande.tsv</code>.  </p> <p>The values are summarized by investment accounts for each of the categories.  These become the numerators of the actual rates experience for each category for each account.  The denominator is the opening balance of the account. Its imperfect for accounts where money is moved in or out during the year, but it is adequate for its use of setting default rates for forecast years.</p> <p>The summarization is done on they Python side at load time.  The ratios are calculated in the spreadsheet. Rates are rounded to 1 basis point (.01%).  The rolling average of the previous periods is used to carry the rates into the forecast period. These averages may be modified by the rate cap set on the accounts tab. </p> <p>On the balances table the <code>Rlzd Int/Gn</code> and <code>Fees</code> lines are derived as sums from this table. </p> <p>On the <code>iande</code> table the forecasts for investment income and expense are also summed up from the values in this table. Forecasts for these lines are calculated as the sum across all accounts for the line for forecast periods.  For actual periods those values will derive directly from the Moneydance income and expense report.</p>"},{"location":"sheets/other_actl/","title":"other_actl","text":"<p>This sheet holds several tables of other actuals.</p>"},{"location":"sheets/other_actl/#manually-input-actual-items","title":"Manually input actual items","text":"<p>Mostly values needed for tax calcs. A number of entries are needed to determine taxes.  When easiest, these are input on this table: <code>tbl_manual_actl</code>. A Moneydance report <code>W2-exclusions</code> extracts the amounts that can be excluded from the W2s.  This relies on the Pre-tax and pre-tax tags. These should be input manually.</p> <p>Computes the actual 401K contributions to post to the iande tab.</p>"},{"location":"sheets/other_actl/#payroll-savings-incl-er-contributions","title":"Payroll Savings incl ER contributions","text":"<p>Used by cash flow calcs on IandE.</p>"},{"location":"sheets/other_actl/#roth-contributions","title":"Roth contributions","text":"<p>Used in tax calcs.</p>"},{"location":"sheets/other_actl/#529-plan-distributions","title":"529 plan distributions","text":"<p>Used to populate untaxed income lines in iande.</p>"},{"location":"sheets/other_actl/#ira-distributions","title":"IRA distributions","text":"<p>Used to populate <code>Income:J:Distributions:IRA</code> lines on iande.</p> <p>This table is needed to handle the accounting difficulty that arises with IRA distributions.  The gross amount is taxable and thus needs to be included in the tax calculation.  However, the tax amounts go to the state and federal expense lines and the net goes to the receiving bank.  There is no place to declare income.</p> <p>The solution allows a uniform way of handling the data (at the cost of a bit of special handling). </p> <p>The solution uses a Moneydance tag, <code>IRA-Txbl-Distr</code> on those transactions.  This involves editing the transactions that are downloaded from the financial institution to add in the tag. This needs to be done in the Bank Register view not the Register view.  The tags field is only shown in the Bank Register view. </p> <p>This data is exported from Moneydance via the <code>IRA-Distr</code> report, and saved in the <code>data/IRA-Distr.tsv</code> file. It is then imported via special handling in <code>IRA_distr</code> processes the transactions to create a table <code>tbl_ira_distr</code>. The  <code>Income:J:Distributions:IRA</code>  line on the <code>tbl_iande</code> pulls from that table.  From there it flows to the <code>taxes</code> tab.  </p>"},{"location":"sheets/other_actl/#hsa-disbursements","title":"HSA disbursements","text":"<p>Used to populate untaxed income lines in iande.</p>"},{"location":"sheets/other_actl/#bank-transfers-tofrom-selected-investments","title":"Bank transfers to/from selected investments","text":"<p>Used by cash flow calcs on IandE.</p>"},{"location":"sheets/retirement/","title":"retirement","text":"<p>Plans out income streams and post-retirement medical expenses.  This affects both the balances and the iande tabs.</p>"},{"location":"sheets/retirement/#retirement-income-plan","title":"Retirement Income Plan","text":"Name Description Item A computed key, composed of type, whose, and firm. Who Initials of who owns this account or JNT for joint. Normally hidden. Type See conventions. Normally hidden. Firm The firm holding the account. Normally hidden. Election A code for the distribution election on this item. Start Date Expected start date for the distribution or expense Anny Dur Yrs If an annuity is elected, how many years should it run. Anny Rate The rate used for the annuity Yearly For non-annuity ongoing values (pensions), yearly amount."},{"location":"sheets/retirement/#election-codes","title":"Election Codes","text":"Code Description ANN Annuity - Creates an annuity stream based on the prior year's end balance, using the <code>Start Date</code>, <code>Anny Dur Yrs</code>, <code>Anny Rate</code> fields. Currently prorates the start by month, but does not do the same for the last period. RMD-1 This determines the required minimum distribution for inherited IRAs ROLLOVER Also treated as a annuity, so the only natural duration is one year. <p>The following correspond to the headings on the pensions facts table. These are used to look up the data there.  The annual amount is then placed in the Yearly column and it is applied to future years.</p> <ul> <li>Single</li> <li>EE50</li> <li>Spouse50</li> <li>EE75</li> <li>Spouse75</li> <li>EE100</li> <li>Spouse100</li> <li>Lump</li> <li>10 year certain</li> </ul> <p>For items that start with SS, the codes are looked up in the Social Security table. The codes consist of the initials of the person and the year portion of the age when starting to receive social security.</p>"},{"location":"sheets/retirement/#how-to-model-a-rollover-from-a-401k-to-an-ira","title":"How to model a rollover from a 401K to an IRA","text":"<ol> <li>On the retirement table:<ol> <li>set ROLLOVER as the code</li> <li>set <code>Start Date</code> as January 1st of the rollover year</li> <li>set <code>Anny Dur Yrs</code> as 1</li> <li>set <code>Anny Rate</code> as the precise value of the <code>Mkt Gn Rate</code> on the balances tab. Five or six significant digits seems to eliminate residual balances.</li> <li>note the exact amount to be rolled over</li> </ol> </li> <li>To prevent this from being taxed:<ol> <li>Ensure additional rows are created on the <code>iande</code> table, in the distributions area using the <code>hier_insert_paths</code> key. In the following example the second set of rows are created under <code>Rollover</code>. </li> <li>Populate these rows with a forecast formula such as:   <pre><code>=-SUM(FILTER(INDIRECT(\"tbl_retir_vals[\"&amp;this_col_name()&amp;\"]\"),(tbl_retir_vals[Item]=TRIM([@Account]))*(tbl_retir_vals[Election]=\"ROLLOVER\"),0))\n</code></pre></li> <li>This will produce a total line on the <code>iande</code> table that nets out the rollover.  Assuming taxes references that, the result is that the rollover won't be taxed. </li> </ol> </li> <li>Enter the amount rolled over into the <code>transfers_plan</code> table. </li> <li> <p>Use the aux table to compute the net changes to the target IRA account.</p> <ol> <li>User the hier_insert_paths key to insert something like </li> <li>Set the formulas for withdraws to pull from retirement</li> </ol> <p><pre><code>=-XLOOKUP(INDEX(TEXTSPLIT([@Key],\":\"),1),tbl_retir_vals[Item],INDIRECT(\"tbl_retir_vals[\"&amp;this_col_name()&amp;\"]\"))\n</code></pre> 3. Set the formula for rollovers to pull from the <code>transfers_plan</code> (assume only positive rollovers):</p> <p><pre><code>=SUM(FILTER(tbl_transfers_plan[Amount],(tbl_transfers_plan[To_Account]=INDEX(TEXTSPLIT([@Key],\":\"),1))*(tbl_transfers_plan[Y_Year]=this_col_name()),0))\n</code></pre> 1. Lastly configure the IRA accounts on balances to pull the <code>Add/Wdraw</code> line from <code>aux</code>.</p> <pre><code>=XLOOKUP(TRIM([@AcctName])&amp;\" - TOTAL\",tbl_aux[Key],INDIRECT(\"tbl_aux[\"&amp;this_col_name()&amp;\"]\"))\n</code></pre> </li> </ol>"},{"location":"sheets/retirement/#retirement-medical","title":"Retirement Medical","text":"<p>Retirement medical values are modeled here. Medicare Part B and Part D have their own rows on this table, so that the variable cost can be modeled (based on year -2 income). The items with type=PKG get their values as the sum of the rows in <code>tbl_mcare_opt</code> with the matching package.</p> <p>The values from this table get carried into the forecast in <code>tbl_iande</code>.</p>"},{"location":"sheets/retirement/#fields","title":"Fields","text":"<ul> <li>Item is manually constructed from Who, Type and Firm.  </li> <li>Package - refers to a set of items on the <code>tbl_mcare_opt</code> table. The logic sums these, applies the start and end dates and places the value in the years.</li> <li>Spare_x - are there just to keep the years aligned with the income plan table.</li> <li>Start Date of the month when this line applies</li> <li>End Date (if given) ends the cost after this month.</li> </ul>"},{"location":"sheets/retirement/#setup","title":"Setup","text":"<p>Setup sources this from: data/retire_medical_template.tsv To refresh that file: edit it.</p>"},{"location":"sheets/retireparms/","title":"retireparms","text":""},{"location":"sheets/retireparms/#pension-facts","title":"pension facts","text":"<p>Facts about pensions used by retirement sheet.  </p>"},{"location":"sheets/retireparms/#social-security","title":"social security","text":"<p>This table creates a key for the selected social security election, by which the retirement table can find the value.</p>"},{"location":"sheets/retireparms/#mcare_opt","title":"mcare_opt","text":"<p>Medical plan options and selection. This is the menu of medical plan choices.</p>"},{"location":"sheets/retireparms/#fields","title":"Fields","text":"<ul> <li>Year: Idenifies what year the plan is for.</li> <li>Package: This idenfifies the elements of a package.  This is used to select a set of items.  The value corresponds to a value in <code>tbl_retir_medical</code>, or blank if not selected.</li> <li>Class, Firm, Name and ID are labels to help tell what the line is.</li> <li>Monthly is the monthly premium.  For part D plans this is the amount over and above the surcharge, if any.</li> <li>Premium is annual</li> <li>Cost is the annual premium + the deductible.</li> </ul>"},{"location":"sheets/retireparms/#setup","title":"Setup","text":"<p>Setup sources this from: data/mcare_opt.json  To refresh that file:</p> <pre><code>dance/util/extract_table.py -w data/test_wb.xlsm -t tbl_mcare_opt -j data/mcare_opt.json -o records\n</code></pre>"},{"location":"sheets/tax_tables/","title":"tax_tables","text":"<p>Selected (for our case) tax tables: - Federal tax tables,  - Connecticut tax tables, </p> <p>And required minimum distribution tables (two types).</p>"},{"location":"sheets/tax_tables/#federal-tax-tables","title":"Federal tax tables","text":"<p>These use the subtraction method in IRS pub detailed here: https://www.irs.gov/pub/irs-pdf/i1040gi.pdf.  This takes 6 rows and 4 columns per year.  These are organized in a single table.  A VBA function is used to select the right values for use on the <code>taxes</code> tab. </p> <p>The program <code>bracket_fix.py</code> computes the numbers for the subtraction table based on a csv file which is shows the values using the additive method. Not sure where I found that file, most recently, I recreated the format.  Kind of painful.  May be best to wait for the 1040 Instructions to be published each year. (Or find a reliable source)</p>"},{"location":"sheets/tax_tables/#ct-tax-table-married-joint","title":"CT Tax Table Married Joint","text":"<p>Multiple years of tax tables for this slice.</p>"},{"location":"sheets/tax_tables/#reqd-min-distr-table-i","title":"Reqd Min Distr Table I","text":"<p>Table I is for beneficiaries (inherited IRA).</p>"},{"location":"sheets/tax_tables/#uniform-lifetime-table","title":"Uniform Lifetime Table","text":"<p>Also known as Table III, this table is for normal (not inherited) plans.</p>"},{"location":"sheets/taxes/","title":"taxes","text":"<p>This computes Federal and State income taxes. It requires the data from the tables tab.  For actuals it pulls data mostly from iande-actl.  A few income fields need to come from tax documents. </p>"},{"location":"sheets/transfers_actl/","title":"transfers-actl","text":"<p>Gathers the transfers to and from all accounts coming from or going to banks or credit cards.  This also shows the transfers to and from bank and credit card accounts.  The bank and credit card transfers are derived another way and are also included on this tab.</p> <p>If there are transfers between these accounts, then they should pass through a bank account in order to be captured here.  That is the purpose of the pseudo bank account 'Passthru' and its sub-accounts in Moneydance.</p> <p>This tab is loaded by <code>transfers-actl-load.py</code> from these sources:</p> <ol> <li>A copy of the output of moneydance transfer report stored under <code>budget/data</code>.  </li> <li>The method used is the difference of progressive balances.  The balances are generated by the <code>Account Balances</code> report selecting only banks and credit cards.  This is done for each year.  The tab-separated files are stored under <code>budget/data</code> as <code>bank-bal-YYYY</code>. </li> <li>A third method is planned which will ensure that all accounts have rows - even those with zero transfers.</li> </ol>"},{"location":"sheets/transfers_plan/","title":"transfers_plan","text":"<p>This table simulates future transactions which move money between accounts.  So it has a transaction year, a source (from) account and a target (to) account, and an amount.</p> <p>There is data validation on the account names to ensure they do not have a distribution plan.</p> <p></p> <p>These data are summarized and carried on the the balances tab in future years on the Add/Wdraw lines.</p>"},{"location":"sheets/utility/","title":"utility","text":""},{"location":"sheets/utility/#table_map","title":"table_map","text":"<p>This is a two column cross reference between table names their worksheet location.</p>"}]}