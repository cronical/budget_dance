{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tool links accounting data with long term plans","text":"<p>This system extends the family's historical financials into the future.  It allows for modeling and planning for </p> <ul> <li>Income and expenses (combined with cash flow)</li> <li>Accounts balances and transfers (including investments)</li> <li>Working life and retirement phases</li> <li>Post retirement medical plans (U.S.)</li> <li>U.S. Federal and state income taxes. The tax calculator is far from general.</li> </ul> <p></p> <p>The accounting system is Moneydance.  The long term planning is via Microsoft 365 Excel. Python is the glue.</p>"},{"location":"#data","title":"Data","text":"<p>The data for historical (actual) periods is based on data exported from Moneydance. Data for planning is controlled via a set of external files. The data files are described on the Data Files page.</p>"},{"location":"#workbook","title":"Workbook","text":"<p>The workbook is built from the above data by Python programs controlled by an extensive configuration file.</p> <p>Workbook</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Getting Started</p>"},{"location":"#operations","title":"Operations","text":"<p>Operations</p>"},{"location":"#use-cases","title":"Use cases","text":"<p>Some worked examples are on the use cases page.</p>"},{"location":"accounting/","title":"Accounting Notes","text":""},{"location":"accounting/#balances","title":"Balances","text":"<p>The computation of balances depends on the ability to determine the changes to the accounts.  </p>"},{"location":"accounting/#iras","title":"IRAs","text":"<p>IRA distributions are problematic.</p> <p>The gross amount is taxable and thus needs to be included in the tax calculation.  However, the tax amounts go to the state and federal expense lines and the net goes to the receiving bank.  There is no place to declare income.</p> <p>The solution allows a uniform way of handling the data (at the cost of a bit of special handling). </p> <p>The solution uses a Moneydance tag, <code>IRA-Txbl-Distr</code> on those transactions.  This involves editing the transactions that are downloaded from the financial institution to add in the tag. This needs to be done in the Bank Register view not the Register view.  The tags field is only shown in the Bank Register view. </p>"},{"location":"accounting/#investments","title":"Investments","text":"<p>The performance report provides opening and closing balances, income, gains and something called \"Return Amount\". It does not indicate unrealized gains per se.  The \"Return Amount\" is essentially a plug to get to the ending balance.  Note - income needs to be marked MiscInc (not transfer to the income category)</p> <p>Gains are essentially realized gains. Fees for purchases and/or sales of securities are included as part of the cost basis.  Other fees, that occur outside of the purchase or sale transaction are not included - such things as commissions, other account fees, and others. </p> <p>The other fees are rolled into the plug field (Return Amount), along with unrealized gains. It is better to include them in the Gains and therefore the 'Rlz Int/Gn' value in the spreadsheet. Thus when an account is closed, there will be no unrealized gains. </p> <p>To do this the investment fees need two categories.  </p> <ul> <li>Investing:Action Fees, </li> <li>Investing:Account Fees.  </li> </ul> <p>Only the account fee is selected in the Investment IandE report.  This allows the loading of investment actuals to add the account fees to the gains.  It also means that the transaction fees are not used to forecast future fees.  This is reasonable since they are by nature not asset based and the forecast method uses percentage of assets.</p>"},{"location":"accounting/#other-assets","title":"Other Assets","text":"<p>The \"Other Asset\" account has several sub-accounts, including receivables from a few parties.  The method of determining the transfers depends is to use the <code>transfers-to-fcast</code> memorized report.  Some of the sub-accounts in Other Asset have transactions using expense categories.  To support this the memorized report includes all expenses in the criteria.  This correctly gathers the amounts such as depreciation for cars and payments made against some expense category (on our behalf).  The set of a target accounts configured in this report includes all investment, loan, asset and liability accounts.   </p> <p>Whenever there is a transfer between these accounts, this method essentially cancels out that values, which can lead to wrong balances.  Such transactions should be routed throught the <code>Passthru</code> bank account to avoid this problem.</p>"},{"location":"anti_patterns/","title":"Formula patterns that are NOT recommended","text":"<p>Avoid use of INDIRECT, OFFSET, as these are \"volitile\" functions, which trigger recalculation at every change. </p> <p>Use care with [#Data] references; depending on the situation, they may create circular logic.</p>"},{"location":"anti_patterns/#use-the-indirect-method","title":"Use the indirect method","text":"<p>Getting the column can be done with indirect which should be avoided</p> Refer to this column by indexing the headers<pre><code>INDIRECT(\"tbl_balances[\"&amp;INDEX([#Headers],COLUMN())&amp;\"]\")\n</code></pre> Locate a value with a common key<pre><code>XLOOKUP([@AcctName],tbl_retir_vals[Item],INDIRECT(\"tbl_retir_vals[\"&amp;this_col_name()&amp;\"]\"),0)\n</code></pre>"},{"location":"anti_patterns/#use-of-the-structured-data-notation","title":"Use of the structured [#Data] notation","text":"<p>These create a dependency on the whole table, which is fine for looking up values that themselves don't depend on other tables. But it is not appropriate for year-to-year calculations, as it will create circular logic.</p>"},{"location":"anti_patterns/#value-offset-to-get-prior-column-for-this-row","title":"Value OFFSET to get prior column for this row","text":"<p>Its volitile and should be avoided.</p> Use OFFSET<pre><code>=OFFSET(INDIRECT(ADDRESS(ROW(),COLUMN())),0,-1,1,1)\n</code></pre>"},{"location":"data_files/","title":"Data Files","text":""},{"location":"data_files/#conventions","title":"Conventions","text":""},{"location":"data_files/#file-locations","title":"File locations","text":"<p>Files are in the data folder under the project.  The data folder is excluded from github for privacy reasons.</p> <p>The files that have a version each year are placed in subfolders.  The under the sub-folder the files are simply named yyyy.tsv.</p>"},{"location":"data_files/#file-types","title":"File types","text":"<p>Files are of the following types:</p> <ul> <li>Tab separated values with extension .tsv</li> <li>JSON with extension .json.  These are typically exports from tables defined in Excel. There are two types depending on the 'orientation'.  </li> <li>YAML - used for the setup config definitions</li> </ul>"},{"location":"data_files/#file-names","title":"File names","text":"<p>Abbreviations such as IRA and HSA are forced to lowercase, to aid sorting. </p> <p>Preferred format uses hyphen not underscores or spaces to separate words, although this remains to be cleaned up.</p>"},{"location":"data_files/#files-from-moneydance-reports","title":"Files from Moneydance reports","text":"<p>The table, below, provides a list of Moneydance reports and the file names under which the output should be saved. The table also shows where the data goes and the code by which the configuration knows to read that file.</p> <p>The Periods column has the following meaning:</p> <ul> <li>All Years: Transaction Filter for all actual years</li> <li>Annual: Summary data in annual columns (possibly just one)</li> <li>Each Year: Separate file for each year in a folder</li> <li>Transfers: Transfers summarized by year into annual columns</li> <li>Transfers-X: Transfers, Detailed transaction data for all actual years</li> </ul>"},{"location":"data_files/#report-table","title":"Report table","text":"<p>(Case sensitive sort to match Moneydance)</p> Report Periods Save as Used in config by Data type code 401, HSA, ESP payroll data Transfers-X payroll_to_savings.tsv tbl_payroll_savings md_pr_sav 529-Distr All Years 529-distr.tsv tbl_529_distr md_529_distr Account Balances Each Year acct-bals-yyyy.tsv tbl_accounts[^1], tbl_balances, bank_actl_load.py md_acct, md_bal2 HSA - disbursements - 2 Transfers-X hsa-disbursements.tsv tbl_hsa_disb md_hsa_disb IRA-Distr All Years ira-distr.tsv tbl_ira_distr md_ira_distr Income &amp; Expense by Year Annual iande.tsv tbl_iande,tbl_iande_actl md_iande_actl Income &amp; Expense YTD Annual iande_ytd.tsv tbl_current md_iande_actl Investment IandE All Years invest-iande.tsv tbl_invest_iande_values, tbl_invest_iande_ratios md_invest_iande_values Investment Performance Each Year invest-p-yyyy.tsv tbl_invest_actl[^7] md_invest_actl Roth-contributions2 All Years roth_contributions.tsv tbl_roth_contributions md_roth Transfers BKG detailed Transfers-X trans_bkg.tsv tbl_bank_sel_invest md_sel_inv Transfers to Investment Accounts by Year Transfers invest-x.tsv tbl_invest_actl md_invest_actl Transfers-to-fcast Transfers transfers.tsv tbl_transfers_actl md_transfers_actl <p>Each of the reports should be run for the appropriate period(s) and the output saved as a .tsv file in the data folder or a subfolder, under the name given in the \"Save as\" column.</p>"},{"location":"data_files/#json-input-files","title":"JSON input files","text":"<p>The files, listed below, are named according to the table that they support. </p> <p>These files can be created manually, or can be prepared from an existing worksheet with the <code>dance/extract_table.py</code> utility. </p> File Orientation ct_tax_rates.json records fed_tax_rates.json records gen_state.json index manual_actl.json index mcare_opt.json records part_b.json records pension_facts.json index people.json index social_security.json records state_tax_facts.json index"},{"location":"data_files/#orientation","title":"Orientation","text":"<p>Orientation of <code>index</code> is used when the first field is a unique key.  For example <code>gen_state.json</code> might contain:</p> <pre><code>{\n...\n\"ss_fed_wh\": {\n\"Value\": 0.22,\n\"Comment\": \"can be 7, 10, 12 or 22 see form W4-V as decimal\"\n},\n\"distr_fed_wh\": {\n\"Value\": 0.2,\n\"Comment\": \"Fed withholding used for pension &amp; IRA distributions\"\n},...\n}\n</code></pre> <p>When there is no key the orientation of <code>records</code> is used. For example <code>fed_tax_rates.json</code> might start with</p> <pre><code>[\n{\n\"Year\": 2022,\n\"Range\": 0,\n\"Rate\": 0.1,\n\"Subtract\": 0.0\n},\n{\n\"Year\": 2022,\n\"Range\": 20549,\n\"Rate\": 0.12,\n\"Subtract\": 410.88\n},...\n</code></pre>"},{"location":"data_files/#template-tsv-files","title":"Template tsv files","text":"<p>The \"template\" files are used to seed their respective tables. They are styled as a Moneydance report saved as .tsv, so the first three lines are ignored. The 4th line contains headings and subsequent lines contain data.  Processing occurs specific to the type. In the case of taxes, indentation must be 3 spaces. </p> <ul> <li>retire_medical_template.tsv</li> <li>retire_template.tsv</li> <li>taxes_template.tsv</li> </ul> <p>The above files can be prepared manually or extracted from an existing worksheet with the <code>dance/extract_table.py</code> utility.</p>"},{"location":"data_files/#listing-data-files","title":"Listing data files","text":"<p>A listing of the files can be had with </p> <pre><code>tree -PD '*.tsv' --prune data/\ntree -PD '*.json' --prune data/\n</code></pre>"},{"location":"data_files/#testing-files","title":"Testing files","text":"<p>The file <code>known_test_values.json</code> is set up to allow checking of the results against known historical values.</p>"},{"location":"idioms/","title":"Some Excel idioms &amp; notes","text":""},{"location":"idioms/#this-column","title":"This column","text":""},{"location":"idioms/#getting-the-column-name","title":"Getting the column name","text":"<p>The lambda function THIS_COL_HDR is used internal to a table to identify the column name.  Call with tbl_xxx[#Headers]</p> <p>Alternatively, native way to locate this column name is (this only works when the table starts in Excel column 1)</p> <pre><code>=INDEX(tbl_balances[#Headers],COLUMN())\n</code></pre> <p>Note, that the table name can be elided to reference the table the cell is in.  Excel displays the just table name in the formula even if it is not provided. But its best to provide the full expression the <code>setup.yaml</code>.</p> <pre><code>INDEX([#Headers],COLUMN())\n</code></pre> <p>To locate the column of a different table, the offset can be determined with <code>XMATCH</code>:</p> <pre><code>XMATCH(THIS_COL_HDR[#tbl_balances[#Headers]],tbl_retir_vals[#Headers])\n</code></pre>"},{"location":"idioms/#use-of-the-structured-data-notation","title":"Use of the structured [#Data] notation","text":"<p>Using this formulation creates a dependency on the whole table, which is fine for looking up values that themselves don't depend on other tables. But it is not appropriate for year-to-year calculations, as it will create circular logic.</p>"},{"location":"idioms/#getting-data-column-with-index-or-choosecols","title":"Getting data column with Index or Choosecols","text":"<p>These phrases require the [#Data] phrase when entered via openpyxl, even though it disappears in Excel when edited. Otherwise you get a name error.</p> <p><code>=INDEX(tbl_aux[#Data],0,COLUMN())</code></p> <p><code>=CHOOSECOLS(tbl_balances[#Data],COLUMN())</code></p> <p>The following picks a year column from balances by locating the year in the headers and using that to choose the column.</p> <p><code>=CHOOSECOLS(tbl_balances[#Data],XMATCH(this_col_name(),tbl_balances[#Headers]))</code></p> Prior year end balance<pre><code>=XLOOKUP(\"End Bal\"&amp;tbl_retir_vals[@Item],tbl_balances[Key],\n  CHOOSECOLS(tbl_balances[#Data],XMATCH(this_col_name(),tbl_balances[#Headers])-1)\n  )\n</code></pre>"},{"location":"idioms/#the-last-column-name-and-data","title":"The last column name and data","text":""},{"location":"idioms/#the-last-data-column","title":"The last data column","text":"<p>Takes the last data column. Useful for actual only tables that you want to propagate the last values from.</p> <pre><code>CHOOSECOLS(tbl_manual_actl[#Data],-1)\n</code></pre>"},{"location":"idioms/#the-last-column-field-name","title":"The last column field name","text":"<p>Useful to get the last actual, for instance.</p> <pre><code>=TAKE(tbl_manual_actl[#Headers],1,-1)\n</code></pre>"},{"location":"idioms/#lookup","title":"Lookup","text":"<p>Use a value from this table to find a value in another table. The 4th parameter is the default if not found. =XLOOKUP(\"Medicare withholding rate\",tbl_manual_actl[Item],CHOOSECOLS(tbl_manual_actl[#Data],-1))</p> <p>Locate a value with a common key<pre><code>=XLOOKUP(\"Medicare withholding rate\",tbl_manual_actl[Item],CHOOSECOLS(tbl_manual_actl[#Data],-1))\n</code></pre> Here get the value for forecast rate using the lastest actual rate.</p>"},{"location":"idioms/#constructing-a-key","title":"Constructing a key","text":"<p>Often the exact key has to be constructed.  Excel uses double quotes for strings and <code>&amp;</code> for concatenation.  TRIM is needed if the field is, say, indented.</p> Use string functions to construct key<pre><code>\"Add/Wdraw\"&amp;TRIM([@Account])\n</code></pre>"},{"location":"idioms/#delimited-strings-to-arrays","title":"Delimited strings to arrays","text":"<p>Often the field value may have delimiters and you need to pick out one of the sections.  Use the TEXTSPLIT and INDEX functions. For instance to pick out the 2nd item of the field <code>key</code>. Note the delimiter can be longer than a single character.</p> Picking values between delimiters<pre><code>INDEX(TEXTSPLIT([@key],\" - \"),2)\n</code></pre>"},{"location":"idioms/#substring-match","title":"Substring match","text":"<p>Is a substring in a list?  Use SEARCH wrapped with ISNUMBER.</p> Find values with substring<pre><code>ISNUMBER(SEARCH(\"Start BalHSA - \"&amp;INDEX(TEXTSPLIT([@key],\" - \"),2),tbl_balances[Key]))\n</code></pre>"},{"location":"idioms/#is-value-in-a-list","title":"Is value in a list","text":"<p>For use in filters, determine if a value is in a list. Construct the list with curly brackets.  Use the type 0 for exact match.</p> Find values that match a list<pre><code>ISNUMBER(MATCH(tbl_balances[ValType],{\"Start Bal\",\"Add/Wdraw\",\"Reinv Amt\",\"Fees\",\"Unrlz Gn/Ls\"},0)\n</code></pre>"},{"location":"idioms/#filter-then-aggregate","title":"Filter then aggregate","text":"<p>Filters produce more than one row so the results have to be aggregated by SUM, PRODUCT, MIN or the like.</p> <p>Criteria that are all required are multiplied together with *. To allow either criterion, use +.</p> <p>In this example several rows are selected to compute the end balance. THE Y1234 is replaced at build time for each year column.</p> Filter with criteria 'anded'<pre><code>=SUM(FILTER(tbl_invest_actl[Y1234],(tbl_invest_actl[ValType]=\"Gains\")*(tbl_invest_actl[Acct_txbl]=1)))\n</code></pre>"},{"location":"idioms/#if-filter-can-be-empty","title":"If filter can be empty","text":"<p>If the result can be empty then use the if_empty parameter</p> Last parm of FILTER is 0 to allow empty set<pre><code>=ROUND(SUM(FILTER(tbl_invest_iande_values[Y1234],(tbl_invest_iande_values[Account]=[@AcctName])*(tbl_invest_iande_values[IorE]=\"I\"),0)),0)\n</code></pre>"},{"location":"idioms/#convert-transaction-format-to-net-change","title":"Convert transaction format to net change","text":"<p>The <code>transfers_plan</code> table is in a transactional format, with a year, two accounts (from and to) and a value.  This ensures that both sides of the transaction are accounted for.  However, most other tables have a net change style - what happens to a particular account in a year. This formula converts the plan to the net change format.</p> <p>Working in memory, two arrays element by element, then add them up.</p>"},{"location":"idioms/#construct-debitcredit-array-for-account","title":"Construct debit/credit array for account","text":""},{"location":"idioms/#make-boolean-array","title":"Make boolean array","text":"<p>This creates an array of two columns and as many rows as in the table.</p> Structured table reference to mark this account<pre><code>(tbl_transfers_plan[[From_Account]:[To_Account]]=tbl_balances[@AcctName])\n</code></pre>"},{"location":"idioms/#construct-two-values-array-column-array","title":"Construct two values array column array","text":"<p>This creates two columns with the same number of rows with a negative and positive version of each amount</p> Horizontal stacking<pre><code>HSTACK(-tbl_transfers_plan[Amount],tbl_transfers_plan[Amount])\n</code></pre>"},{"location":"idioms/#multiply-them","title":"Multiply them","text":"X ="},{"location":"idioms/#add-across-rows","title":"Add across rows","text":"<p>The BYROW and LAMBDA functions are used. Each row is passed into lambda as the parameter <code>row</code>, which is then summed.</p> Sum by row<pre><code>=BYROW((tbl_transfers_plan[[From_Account]:[To_Account]]=tbl_balances[@AcctName])*HSTACK(-tbl_transfers_plan[Amount],tbl_transfers_plan[Amount]),LAMBDA(row,SUM(row)))*(tbl_transfers_plan[Y_Year]=INDEX([#Headers],COLUMN()))\n</code></pre> <p>The result is then multiplied by the year selection to get all net of all the transactions for the account and year, as shown here:</p> <p></p>"},{"location":"idioms/#final-sum","title":"Final sum","text":"<p>Wrap the whole thing in a <code>SUM()</code> to get the net change in the account for the year.</p> Full<pre><code>SUM(BYROW((tbl_transfers_plan[[From_Account]:[To_Account]]=tbl_balances[@AcctName])*HSTACK(-tbl_transfers_plan[Amount],tbl_transfers_plan[Amount]),LAMBDA(_xlpm.row,SUM(_xlpm.row)))*(tbl_transfers_plan[Y_Year]=this_col_name()))\n</code></pre>"},{"location":"idioms/#forecasting-based-on-last-n-elements","title":"Forecasting based on last n elements","text":"<p>Linear least squares fit. The example looks back 5 columns on this row for the <code>y</code> values and uses numbers 1 to 5 as the <code>x</code> values.  Then we just ask the linear forecast tool to provide item 6.  Wrap the whole thing with a MAX to prevent it from going negative.</p> Forecast<pre><code>=MAX(0,FORECAST.LINEAR(6,tbl_iande[@5&lt;Y1234],SEQUENCE(1,5)))\n</code></pre>"},{"location":"idioms/#get-prior-cells-on-this-row","title":"Get Prior cells on this row","text":"<p>The above uses build time replacement. </p> <p><code>tbl[@5&lt;Y1234]</code> becomes <code>tbl[[#This Row],[Y2018]:[Y2022]]</code>, when in the Y2023 column.</p> <p>So the form <code>[@m&lt;Ynnnn]</code> says for the m years in this row preceding this year.</p>"},{"location":"idioms/#let-example-simple-return-calculation","title":"LET example: Simple return calculation","text":"<p>The following computes a simplistic return by setting intermediate variables with LET. </p> Variable Description y The column of data for this year a The account name b The value types of the rows to be averaged for the denominator c The value types of the rows to be summed for the numerator x The indicies to locate the denominator values w The indicies to locate the numerator values <p>after all these are set is fairly easy to use CHOOSEROWS to select the right data elements.  The 2 is for the average. Wrapping with IFERROR forces the #DIV  to 0.</p> <pre><code>  =LET(\n    y,INDIRECT(\"tbl_balances[\"&amp;@INDEX(tbl_balances[#Headers],COLUMN())&amp;\"]\"),\n    a,[@AcctName],\n    b,{\"Start Bal\",\"End Bal\"},\n    c,{\"Rlz Int/Gn\",\"Unrlz Gn/Ls\"},\n    x,MATCH(@b&amp;a,[Key],0),\n    w,MATCH(@c&amp;a,[Key],0),\n    IFERROR(2*SUM(CHOOSEROWS(y,w))/SUM(CHOOSEROWS(y,x)),0)\n    )\n</code></pre>"},{"location":"idioms/#tax-calculations","title":"Tax calculations","text":"<p>There is a set of lambda functions that work together to assist in tax calculations. These culuminate in TX_CT and TX_FED which are inserted on the proper lines due to folding. The file <code>taxes_template.tsv</code> contains lines that call for this type of aggregation:</p> <ul> <li>Initial Tax Calculation - CT_TAX</li> <li>Fed tax - FED_TAX</li> </ul> <p>Other states could be patterned off the TX_CT method.</p>"},{"location":"idioms/#conditional-formatting-limits","title":"Conditional Formatting limits","text":"<p>Conditional formatting formulas cannot use structured references, including bare table names.</p>"},{"location":"idioms/#looking-for-non-native-formulas","title":"Looking for non-native formulas","text":"<pre><code> grep formula: data/setup.yaml | grep -v 'XLOOKUP\\|LET\\|FILTER\\|FORECAST\\|OFFSET\\|BYROW\\|INDIRECT'\n</code></pre>"},{"location":"libraries/","title":"Libraries","text":""},{"location":"libraries/#production-packages","title":"Production packages","text":"<p>At a minimum, install the production packages.</p> <p>pip install openpyxl pip install pandas pip install pyYAML pip install tabulate pip install requests pip install beautifulsoup4 pip install lxml</p> <p>above is captured in <code>requirements.txt</code></p>"},{"location":"libraries/#development-packages","title":"Development packages","text":"<p>If expecting to develop some or all of the development packages will be useful.</p> <p>pip install mkdocs pip install mkdocs-material</p> <p>pip install pytest pip install pyinstrument</p> <p>pip install deptry pip install pipdeptree</p> <p>pip install pyperclip</p> <p>above is captured in <code>requirements-dev.txt</code></p>"},{"location":"operations/","title":"Operations","text":""},{"location":"operations/#export-functions","title":"Export Functions","text":"<p>There are three commands to export data.  These write to files that are then used to reload or rebuild the workbook.</p>"},{"location":"operations/#extract-table","title":"Extract Table","text":"<p>Use <code>dance/extract_table.py</code> to copy the contents of an existing worksheet table the external file. The external file is defined in the data section of the configuration. Eligible tables are </p> <ul> <li>templates</li> <li>json records</li> <li>json index</li> </ul> <pre><code>dance/extract_table.py -h\nusage: extract_table.py [-h] [--workbook WORKBOOK] [--data_only] (--table TABLE | --all | --list)\nCopies table data from workbook and stores as a json or tsv output file.\n\noptions:\n  -h, --help            show this help message and exit\n--workbook WORKBOOK, -w WORKBOOK\n                        Source workbook. Default: data/test_wb.xlsx\n  --data_only, -d       To get data not formulas\n  --table TABLE, -t TABLE\n                        Source table name, include tbl_\n  --all, -a             Extract all eligible tables\n  --list, -l            List all eligible tables\n</code></pre> <p>For example, this copies the aux table from the default workbook to a data file.</p> <pre><code>% dance/extract_table.py -t tbl_aux\n2023-06-21 14:23:19,716 - extract_table - INFO - Wrote to data/aux.json\n</code></pre> <p>Extract all:</p> <pre><code>dance/extract_table.py -a\n2023-09-08 07:21:19,911 - extract_table - INFO - Source workbook is data/test_wb.xlsx\n2023-09-08 07:21:20,206 - extract_table - INFO - Wrote to data/transfers_plan.json\n2023-09-08 07:21:20,504 - extract_table - INFO - Wrote to data/retire_template.tsv\n...\n2023-09-08 07:21:23,525 - extract_table - INFO - Wrote to data/gen_state.json\n2023-09-08 07:21:23,824 - extract_table - INFO - Wrote to data/state_tax_facts.json\n2023-09-08 07:21:24,137 - extract_table - INFO - Wrote to data/part_b.json\n</code></pre>"},{"location":"operations/#preserve","title":"Preserve","text":"<p>This utility preserves and restores values that are modified in eligible worksheets. The candidates are those values that are in forecast columns, or, if configured, listed non-year columns. Each value is inspected to see if it is a formula.  Only non-formulas will be exported.</p> <p>The values are store in or retrieved rom external storage (typically <code>./data/preserve.json</code>).  </p> <ol> <li>The save option copies values that are not formulas </li> <li>The load option compares the saved values to the values in their cells and, if different, replaces them.</li> </ol> <pre><code>dance/preserve_changed.py -h usage: preserve_changed.py [-h] (-s | -l) [-w WORKBOOK] [-p PATH]\nCopies changed data from tables to file or from file to various tables\n\noptions:\n  -h, --help            show this help message and exit\n-s, --save            saves data from the current tab to the file\n  -l, --load            loads the file data workbook\n  -w WORKBOOK, --workbook WORKBOOK\n                        Target workbook. Default: data/test_wb.xlsx\n  -p PATH, --path PATH  The path and name of the storage file. Default=./data/preserve.json\n</code></pre> <pre><code>dance/preserve_changed.py -s\n2023-09-08 14:51:44,958 - preserve_changed - INFO - Found 173 items from table tbl_accounts\n2023-09-08 14:51:45,254 - preserve_changed - INFO - Found 27 items from table tbl_balances\n2023-09-08 14:51:45,553 - preserve_changed - INFO - Found 42 items from table tbl_iande\n2023-09-08 14:51:45,832 - preserve_changed - INFO - Found 128 items from table tbl_invest_iande_ratios\n2023-09-08 14:51:46,126 - preserve_changed - INFO - Found 2 items from table tbl_taxes\n2023-09-08 14:51:46,128 - preserve_changed - INFO - Wrote 372 items to ./data/preserve.json\n</code></pre>"},{"location":"operations/#ytd-current-year-reforecast","title":"YTD - Current year reforecast","text":"<p>During the year it is handy from time to time to replace the modeled values with reprojected values. The current tab and the <code>ytd.py</code> program allow for this.</p> <p>The command line program <code>ytd.py</code> allows the contents of the ytd table to be saved into a file.  The data can be reloaded into the table after a refresh and the reprojected values can be copied into the correct cells in the iande table.</p> <pre><code>usage: ytd.py [-h] [-s] [-l] [-f] [-w WORKBOOK] [-p PATH]\nCopies data from ytd tab to file or from file to ytd tab and iande.\n\noptions:\n  -h, --help            show this help message and exit\n-s, --save            saves data from the current tab to the file\n  -l, --load            loads the file data to the current tab\n  -f, --forward         carries the projected values to the first forecast year in the iande table\n  -w WORKBOOK, --workbook WORKBOOK\n                        Target workbook. Default=data/test_wb.xlsx\n  -p PATH, --path PATH  The path and name of the storage file. Default=./data/ytd_data.json\n</code></pre>"},{"location":"operations/#import-functions","title":"Import functions","text":"<p>The <code>dance/util/build</code> shell script will completely rebuild the worksheet. Or the following utilities can rebuild portions. Use the <code>-h</code> option to see arguments.</p> Utility Purpose <code>dance/iande-actl-load.py</code> Copies data from input file into tab \"iande\" or \"current\" <code>dance/invest_actl_load.py</code> Copies data from input files into \"invest_actl\" table <code>dance/invest_iande_load.py</code> Prepares income and expense data to insert into  \"tbl_invest_iande_work\" <code>dance/retire_load.py</code> Prepares the retirement income or medical table from the input template <code>dance/taxes_load.py</code> Prepares the taxes table from the input template <code>dance/transfers_actl_load.py</code> Copies data from input file into \"transfers_actl\" table <p>The following have alternate functions:</p> Utility Purpose <code>dance/bank_actl_load.py</code> If called from the command line, prints changes in account values due to transfers to/from bank and credit cards <p>The following do not (yet) have main routines:</p> Utility Purpose <code>dance/accounts_load.py</code> <code>dance/balances_load.py</code> <code>dance/other_actls.py</code> <p>The following support the need to refresh data. These are usually applied annually although the year-to-date feature allows interim updates.</p> <p>See also extract, preserve, ytd, and setup.</p>"},{"location":"operations/#income-and-expense","title":"Income and Expense","text":"<p>The <code>dance/iande_actl_load.py</code> module loads data into either <code>iande</code> or <code>current</code>.  </p> <p>After refreshing the <code>current</code> table, it may or may not be desirable to reload the prior re-projection data using ytd.py.</p> <pre><code>usage: iande_actl_load.py [-h] [-s {iande,current}] [-p PATH] [-w WORKBOOK]\n[-f]\nCopies data from input file into tab \"iande\" or \"current\".\n\noptions:\n  -h, --help            show this help message and exit\n-s {iande,current}, --sheet {iande,current}\nwhich sheet - iande or current\n  -p PATH, --path PATH  The path and name of the input file. If not given will\n                        use \"data/iande.tsv\" or \"data/iande_ytd.tsv\" depending\n                        on sheet\n  -w WORKBOOK, --workbook WORKBOOK\n                        Target workbook\n  -f, --force           Use -f to ignore warning\n</code></pre>"},{"location":"operations/#investments","title":"Investments","text":"<p>invest_actl_load.py invest_iande_load.py</p>"},{"location":"operations/#other-actuals","title":"Other Actuals","text":"<p>other_actls.py</p>"},{"location":"operations/#retirement","title":"Retirement","text":"<p>retire_load.py</p>"},{"location":"operations/#taxes","title":"Taxes","text":""},{"location":"operations/#rebuild-the-taxes-table","title":"Rebuild the taxes table","text":"<p>NOT CURRENTLY WRITING THE TABLE INTO THE SHEET</p> <pre><code>dance/taxes_load.py -h      usage: taxes_load.py [-h] [--workbook WORKBOOK] [--path PATH]\nPrepares the taxes table from the input template\n\noptions:\n  -h, --help            show this help message and exit\n--workbook WORKBOOK, -w WORKBOOK\n                        Target workbook\n  --path PATH, -p PATH  The path and name of the input file\n</code></pre>"},{"location":"operations/#transfers","title":"Transfers","text":"<p>transfers_actl_load.py</p>"},{"location":"operations/#utility","title":"Utility","text":""},{"location":"operations/#index_tables","title":"index_tables","text":"<p>The Python code, <code>util/index_tables.py</code> enumerates and indexs the tables (something oddly missing in Excel due to the fact that it is worksheet oriented). The index is stored on the utility worksheet.</p>"},{"location":"python/","title":"Use of Python","text":"<p>External access to the spreadsheet is provided via Python programs. Mostly these are programs to transfer Moneydance actual data into the Workbook.  This is done via Python using the <code>openpyxl</code> library.  These files are in the <code>dance</code> subfolder.</p>"},{"location":"python/#python-environment","title":"Python Environment","text":"<p>In the terminal change the current directory to the root of the repository. Use the following command to active the virtual environment: <code>source .venv/bin/activate</code></p>"},{"location":"report_configs/","title":"Moneydance report definitions","text":"<p>This page describes the reports which are used to generate the actual data.</p>"},{"location":"report_configs/#401-hsa-esp-payroll-data","title":"401, HSA, ESP payroll data","text":"<p>A \"Transfers, Detailed\" report selecting checking accounts, all passthru accounts.  Due to odd circumstances such as return of excess 401K contributions, and employer HSA contributions, some income &amp; expense accounts were added.</p>"},{"location":"report_configs/#529-distr","title":"529-Distr","text":"<p>529 Distributions depend on the tag <code>529-Distr</code> being used to make distributions but not inheritance or transfers.  Thus on the iande table it defrays the college expenses.</p>"},{"location":"report_configs/#account-balances","title":"Account Balances","text":"<p>The most recent is best so as to contain all current accounts. This is used to create the Accounts worksheet.  The balances are not used, except that when they are zero, the account will be ignored unless it is specifically mentiond in the <code>include_zeros</code> section of the YAML.</p> <p>Another instance of the Account Balances is used to establish the opening balances on the Balances sheet. This may be for a different year.  If an earlier file is used, history can be included in the Balances sheet.</p> <p>All history years must be available in order to compute the flows to/from bank accounts and credit cards.</p>"},{"location":"report_configs/#hsa-disbursements-2","title":"HSA - disbursements - 2","text":"<p>These data are used to compute medical payments made from HSA accounts by year.</p>"},{"location":"report_configs/#ira-distr","title":"IRA-Distr","text":"<p>This is a transaction filter report using the tag <code>IRA-Txbl-Distr</code>.</p>"},{"location":"report_configs/#income-expense-by-year","title":"Income &amp; Expense by Year","text":"<p>Using \"Income and Expenses\" report, for all actual years, grouped by year, showing all expenses and all income.</p>"},{"location":"report_configs/#income-expense-ytd","title":"Income &amp; Expense YTD","text":"<p>Using \"Income and Expenses\" report, for the Year to date period, not grouped, showing all expenses and all income.</p>"},{"location":"report_configs/#investment-iande","title":"Investment IandE","text":"<p>This is a transaction filter that selects income and expense categories that are required to only apply to investments.</p>"},{"location":"report_configs/#certain-categories","title":"Certain categories","text":"<p>Two situations have arisen when the use of categories made sense.</p> <ol> <li>An inheritance which was transfered directly to an investment account.  In this case an income category was used to isolate the (rare) transaction.</li> <li>The financial institution provides a disbursement and withholds for and pays state and federal taxes.  These transactions effectively are transfers from the account and should be included.</li> </ol>"},{"location":"report_configs/#investment-performance","title":"Investment Performance","text":"<p>This report is run once per year. It provides information used to determine realized and unrealized gains.</p> <p>Select: All Investment, All Security</p> <p>Investment actuals requires the transfers file and the performance files. It also depends on the data from the investment expenses to already be in place.</p>"},{"location":"report_configs/#roth-contributions2","title":"Roth-contributions2","text":"<p>This is a \"Transaction Filter\" report, selecting all dates for transactions with tag \"roth\", showing splits and full account paths with subtotals by category.</p>"},{"location":"report_configs/#transfers-bkg-detailed","title":"Transfers BKG detailed","text":"<p>Source accounts: All bank, credit card, income, expense and all HSA accounts. Target Accounts: All asset, liability &amp; loan. The HSA accounts (a subset of investments) are needed since they sometimes transfer to the medical providers.</p>"},{"location":"report_configs/#tranfers-to-investment-accounts-by-year","title":"Tranfers to Investment Accounts by Year","text":"<p>This report can be run once for all actual year periods.  It provides transfers in/out of the investment accounts.</p> <p>Source accounts: All Bank (except any accounts that acts as a passthru account to handle separate dividend and dividend reinvested transactions), All Credit Card + certain categories Target accounts: All Investment</p> <p>A account passthru account may be used to support the strange way the broker handles re-investments.  It has to be excluded from true transfers.</p>"},{"location":"report_configs/#transfers-to-fcast","title":"Transfers-to-fcast","text":"<p>Source accounts: All bank, All Income, All Credit Card, All Expense Target accounts: All Load, All Asset, All Liability</p> <p>Security and Investments are handled via the performance report</p> <p>This requires that if the Passthru account is used, it must only be used to transfer funds to/from banks.  In other words there is an assumption that it does not mask any movement to/from income or expense items.  Those must be directly in the investment account.</p>"},{"location":"setup_api/","title":"API key","text":"<p>The system copies the inflation data to faciliatate planning.  To do this an API key is needed.  This is free; they only want an email address.  Register here: https://data.bls.gov/registrationEngine/.  The API key should be stored in ./private/api_keys.yml. The rows of this file are expected to be simply a site code and the key value, such as below:</p> <p></p>"},{"location":"setup_control/","title":"The setup control file","text":"<p>The control file is <code>./data/setup.yaml</code>.  To reference the schema insert the following line at the top:</p> <pre><code># yaml-language-server: $schema=../dance/setup/setup_schema.json\n</code></pre> <p>Or, in Visual Code, set a reference in <code>settings.json</code>:</p> <pre><code>    \"yaml.schemas\": {\n      \"./dance/setup/setup_schema.json\":\"setup.yaml\"\n      },\n</code></pre>"},{"location":"setup_control/#global-settings","title":"Global Settings","text":"<p>The following values are global in nature:</p> Item Purpose Example workbook The name of the workbook including path from project folder. Used as the default for most programs. data/test_wb.xlsx start_year Integer of 1st year to use for time series 2018 end_year Last Year of the time series 2030 hide_years List the years to hide on all sheets as numbers 2018 year_column_width Column size for years 12 first_forecast_year First year that is considered a forecast. Prior years are considered actual 2022 zoom_scale Scaling factor for all sheets 135 # how to scale the worksheets bank_interest Moneydance category used to convey bank interest to the account balances Income:I:Invest income:Int:Bank lambdas Excel lambda functions are defined here <pre><code>lambdas:\n- name: AGE\nformula: =LAMBDA(inits,yr,ROUNDDOWN(((DATE(yr,12,31)-DOB(inits))/365.25),0))\ncomment: Return the age attained by an account owner with inits in a given year\n</code></pre>"},{"location":"setup_control/#sheet-groups","title":"Sheet groups","text":"<p>Sheets are grouped together in sheet groups using the <code>sheet_group</code> definitions.  Each sheet is assigned to a group and thus shares the color and table style.</p> <pre><code>sheet_groups:\nacct-bal:\ncolor: 4FA3DB\ntable_style: TableStyleMedium2\nincome-expense:\ncolor: BDAE2D\ntable_style: TableStyleMedium12\n...\n</code></pre>"},{"location":"setup_control/#sheets","title":"Sheets","text":"<p>This section defines the layout and sometimes the data to be loaded into the sheet. It is a list of definition of each sheet.  So at that level it looks like:</p> <pre><code>sheets:\naccounts:\nbalances:\niande:\n...\n</code></pre>"},{"location":"setup_control/#table-definitions","title":"Table Definitions","text":"<p>Within each sheet are the list of tables. Most sheets only have one.  Here's an example with two:</p> <p><pre><code>retireparms:\nsheet_group: retirement\ntables:\n- name: tbl_retire_parms\n- name: tbl_pens_facts\n</code></pre> By convention all the table names start with <code>tbl_</code>.</p> <p>The table definition consists of various fields, some of which are optional and/or defaulted.</p> Item Purpose Default name The name for the table in Excel, by convention starting with tbl_ title The title that is place above the table in Excel columns A list of the column definitions (see below) that are included in the table title_row When there is more than one table, locates this table on the sheet. If tables are spread horizontally, then subsequent tables will need an entry. 1 for the first table, then automatically places a space before the next table. start_col The first column of the table on the sheet (A=1,B=2...) 1 include_years True if there is a time series for the years False hidden A list of columns to hide Show every column data definitions where to get the data for the initial load Don't load data actl_formulas Specify formulas for actuals. fcst_formulas Specify formulas for forecast periods. highlights Specify Excel conditional formatting dyno_fields a way to determine values at build time edit_checks Sets data validation in Excel for table columns preserve Indicates what from a table to be \"preserved\" and how (only method \"sparse\" implemented). non-year-cols lists any columns other than forecast years to be preserved. fold_at For tables that fold, an integer indicating the level at which to leave the fold closed. 3"},{"location":"setup_control/#column-definitions","title":"Column definitions","text":"<p>The following support column definitions</p> Item Purpose Default name the column heading width optional width used to set column width in spreadsheet width of previous column horiz optional indicator of horizontal alignment such as \"center\" number_format number from openpyxl chart"},{"location":"setup_control/#data-definitions","title":"Data definitions","text":"<p>The data definitions are purpose built to support the target table, but there are some elements that are common.  Some data definitions are closely related, so, to prevent duplication, the yaml reference/override notation is used (&amp; and *).  </p> Item Purpose Use context source local to reference local files; remote to pull data over internet. remote to pull data over internet. internal is used to create the table/sheet cross reference. type These codes are used by the program select the processing logic to use. See supported types local path path relative to project folder for local sources, the path and name of the primary input file file_sets for items that require additional files, one or more sets of files are defined. Each file set has a name and a value of the base_path which is a folder name with the trailing slash. Valid names are \"balances\" and \"performance\" group Specific Moneydance groupings to include. Moneydance uses these to categorize accounts.  Its things like: Assets, Bank Accounts, Credit Cards... Accounts, Balances no_details_for For these groupings create rows only at the grouping level, no details. Investments here means to summarize to the investment level and don't carry over the securities. Accounts include_zeros Accounts listed here will be carried over even if the balance is zero Accounts tax_free_keys Mark the accounts that are not subject to current income tax Accounts site_code BLS, or FEDREG. Used to determine which site to reference remote api_key If needed. A reference to the api_key which is stored in ./private/api_keys.yml remote table Defines how to locate a table in HTML remote table.find_method caption - only supported method remote table.method_parameters parameters for the method, specifically the text to search for in the caption. remote hier_separator Typically set to colon.  The existence of this key indicates that the lines should be subtotaled and folded iande,current,aux hier_insert_paths Some line items are do not yet exist or are not yet populated in Moneydance. This is a way to insert them within the hierarchy so they can be used for forecasting. iande,current,aux hier_alt_agg This optional field allows aggregation to occur by any of the following methods: MIN, MAX, PRODUCT. The default is TOTAL. This is a mapping between lines and one of the aggregation types. template Used in the cases where a template is used to generate the table. For the extract operation, this specifies the fields which are to be pulled from the table.  In the case of folding, it specifies the field to fold on and the indent depth"},{"location":"setup_control/#supported-types","title":"Supported Types","text":"<p>The types <code>json_index, json_records, *_template</code> are supported by the extract utility, so the values can be edited in Excel and saved off to be used in the next build. For the templates, additional definition is provided in the <code>setup.yaml</code> config file.</p> <p>The types <code>md_*</code> act on exported Moneydance files.</p> Type Purpose json_index Imports entire table. Suitable when the table has a unique key. json_records Imports entire table. Suitable when the table does not have a unique key. md_529_distr Get the 529 plan distribution records from Moneydance export and summarize so data items can be put in spreadsheet md_acct Processes the latest balances report from Moneydance to set up the accounts table md_bal Processes the balances reports from Moneydance to set up the balances table md_hsa_disb Get the HSA disbursement records from Moneydance export and summarize so data items can be put in spreadsheet md_iande_actl Processes the income and expense report from Moneydance to create the iande and current sheets md_invest_actl Sets up the investment actual transfers md_invest_iande_work Read investment income and expense actual data from file into a dataframe md_ira_distr Get the IRA distribution records from Moneydance export and summarize so data items can be put in spreadsheet md_pr_sav Get the payroll to savings records from Moneydance export and summarize so data items can be put in spreadsheet md_roth Get the roth contributions md_sel_inv Get amounts transferred to/from certain brokerages, mutual funds, loans from/to any banks. md_transfers_actl Sets up the non-investment actual transfers retire_medical_template Sets up the retire medical table based on a template retire_template Set up the retirement table based on a template tax_template Prepares the taxes worksheet based on a template"},{"location":"setup_control/#inserting-rows","title":"Inserting Rows","text":"<p>An optional key is used to define new rows to be inserted on sheets that use the folding/subtotaling method.</p> <p>For instance, the income and expense report in MoneyDance filters out categories that have no transactions.  This leads to a need to insert those rows in the <code>tbl_iande</code> and <code>tbl_iande_actl</code> tables. For example, future social security payouts should subtotal into retirement income. </p> <p>It is also useful in the aux table to construct subtotals.</p> <p>The specification of the new rows needs to contain the full hiearchy information so that it can be inserted into the right place.  At run time these are checked against the existing items and added only if not already there.</p> <p>Note: include only those lines that are not headings or totals. Headings and total lines will be constructed and inserted as well as the specified data lines.</p> <p>In this example, we aggregate based on the MIN function to plan the distributions from the health savings accounts</p> <p></p>"},{"location":"setup_control/#actual-and-forecast-formulas","title":"Actual and Forecast Formulas","text":"<p>There are three optional keys to allow formulas to be established for the years section: <code>actl_formulas</code>, <code>all_col_formulas</code>, and <code>fcst_formulas</code>.  They work the same way but apply to different columns, as their names indicate.</p> <p>Each section consists of a list of rules.  All rules have the following parts:</p> Key word Description formula The formula to use for the selected year columns (actual or forecast) first_item Optional. In some cases the first item or items of the series needs to be different. If supplied it may be a keyword <code>skip</code>. If it starts with <code>=</code> then it is a formula that will be used in the first place. Otherwise, it will be a constant or a list of constants separated by <code>,</code>. In that case it will be applied to the first n positions. <p>There are two constructions.  The first is the enumeration method, where the config lists all the keys that are to be matched against a base field.</p> Key word Description base_field The name of the column that is used for matching matches A list of values by which to match rows. This could match a single row or many rows. <p>The second construction allows for queries against several fields.  These are \"anded\" together to product a boolean series to select the rows to be updated.</p> Key word Description query The query is a list of objects with the following fields. - field A field name in this table - compare_to A value to compare to, either a string or a number - compare_with A comparison like \"=\", starts, not_starting, is_in. YAML requires the equals to be quoted. If is_in is used, there should be a list - look_up Allows for the values to be looked up from another table. It requires three addtional subfields: table, index_on and value_field. <p>For example, if there is a key <code>fcst_formulas</code> under the table, it is used to set formulas for the forecast columns.  Each column receives the same formula, but they can vary by row.  </p> <p>For example:</p> <pre><code>  - query: #  Mkt Gn Rate\n- field: ValType\ncompare_with: \"=\"\ncompare_to: Mkt Gn Rate\n- field: Type\ncompare_with: \"=\"\ncompare_to: I\nlook_up: table: tbl_accounts\nindex_on: AcctName\nvalue_field: Type\nfirst_item: =XLOOKUP([@AcctName],tbl_accounts[Account],tbl_accounts[Near Mkt Rate],0)*[@Active]\nformula: =XLOOKUP([@AcctName]&amp;\":Unrlz Gn/Ls\",tbl_invest_iande_ratios[Key],tbl_invest_iande_ratios[Y1234])\n...\n</code></pre> <p>How to use the look_up function</p> <pre><code>          - query: # Bank actual interest\n- field: ValType compare_with: \"=\"\ncompare_to: \"Rlz Int/Gn\"\n- field: Type\ncompare_with: \"=\"\ncompare_to: B look_up: table: tbl_accounts\nindex_on: AcctName\nvalue_field: Type\n</code></pre> <p>Using the <code>is_in</code> comparator:</p> <pre><code>          - query: # Add/Wdraw - Assets, Liabilities &amp; Loans\n            - field: ValType\n              compare_with: \"=\"\n              compare_to: Add/Wdraw          \n            - field: Type\n              compare_with: is_in\n              compare_to:\n              - A\n              - L\n              - N\n              look_up: \n                table: tbl_accounts\n                index_on: AcctName\n                value_field: Type\n</code></pre>"},{"location":"setup_control/#array-formulas","title":"Array formulas","text":"<p>It is not possible to use dynamic arrays fully as they are not well supported (yet?) by <code>openpyxl</code>. However, some effort has been made to allow for control-shift-enter (CSE) arrays. These work best when the formula summarizes to a single cell or results in a single column of results in a fixed size array.  This has been tested for use with data validation.</p> <p>For instance the following formula selects the active accounts with no distribution plan which is used for data validation of a table field.</p> <pre><code>=SORT(FILTER(tbl_accounts[Account],(tbl_accounts[Active]=1)*(tbl_accounts[No Distr Plan]=1)))\n</code></pre> <p>The result is stored under a heading of CHOICES.  The data validation is a list with a source of <code>=$F$3#</code>.  The # indicates the entire result set.</p> <p></p> <p>The following formula (shown wrapped) uses dynamic array functions, but due to the <code>openpyxl</code> limitation it results in a CSE formula, which is fine since it produces a single value.</p> <pre><code>=SUM(\n  BYROW(\n    (tbl_transfers_plan[[From_Account]:[To_Account]]=tbl_balances[@AcctName])*HSTACK(-tbl_transfers_plan[Amount],tbl_transfers_plan[Amount]),\n    LAMBDA(_xlpm.row,SUM(_xlpm.row))\n  )\n  *(tbl_transfers_plan[Y_Year]=this_col_name()))\n</code></pre> <p>The lambda function needs its parameters prefixed with _xlpm.  The code handles the prefixes for the dynamic array functions.</p> <p>After an Excel session when the file is saved, Excel will rewrite the document so that the internal XML files have new schemas listed.  Further, if a CSE formula is edited, it may be converted to a dynamic array formula, and, in that case, an internal <code>metadata.xml</code> file is created to support the dynamic arrays.  If <code>openpyxl</code> later rewrites the file, the <code>metadata.xml</code> and the references to it in the dynamic array formulas will be lost.  This has the effect of converting back to a CSE formula.</p>"},{"location":"setup_control/#build-time-created-fields","title":"Build-time created fields","text":"<p>Some tables need a way to determine values at build time. The <code>dyno_fields</code> section may be directly under the table.</p> <p></p> <p>the <code>matches</code> list is a list of values to be matched agains the field. There is a special case if just a single *, meaning all.</p> <p>The target field should be previously defined, but it is filled in by this logic.  The commands available are: - suffix - something added to the matched item - constant - a value that is always the same - formula - an Excel formula</p>"},{"location":"setup_control/#formula-specifics","title":"Formula Specifics","text":"<ul> <li>Always start the formula with a leading equals sign.</li> <li>Constants are fine, but remember to use the leading equals sign</li> <li>Structured table references are supported and recommended.  </li> <li>Refer to this column with the VBA function <code>this_col_name()</code></li> <li>Many VBA functions are designed to be used in formulas</li> </ul>"},{"location":"setup_control/#highlights","title":"Highlights","text":"<p>For example the following puts a line between the actual and forecast periods. The anchor, (ampersand) allows other tables to use the same by using <code>*past_future</code>. </p> <pre><code>    highlights: present: &amp;past_future\nformula: =A$2=\"Y\"&amp;YEAR(NOW()) # ref is to heading row\nborder:\nedges: - left\nstyle: thin\ncolor: B50000\n</code></pre>"},{"location":"setup_control/#edit-checks","title":"Edit Checks","text":"<p>This provides a way to use a dynamic array filter in Excel to create a data validation list (a drop down menu) for a set of columns.</p> <p><pre><code>      edit_checks:\n- for_columns:\n- From_Account\n- To_Account\nformula: =SORT(FILTER(tbl_accounts[Account],(tbl_accounts[Active]=1)*(tbl_accounts[No Distr Plan]=1)))          </code></pre> The formula will be placed to the right of the table and the a data validation will reference it for each of the columns.  In this example the active accounts with no distribution plan will be displayed as the drop down choices for the to listed columns.</p>"},{"location":"setup_control/#specific-sheets-tables","title":"Specific Sheets &amp; Tables","text":""},{"location":"setup_control/#inflation","title":"Inflation","text":"<p>You may want to consider a different series.  The default is all items in U.S. city average, all urban consumers, not seasonally adjusted.</p>"},{"location":"setup_control/#required-minimum-distributions","title":"Required minimum distributions","text":"<p>At the time of writing the best source seems to be the Federal Register.  This does not need to edited unless the source changes.  </p>"},{"location":"setup_control/#accounts","title":"Accounts","text":"<p>The data section in the <code>setup.yaml</code> needs the following sub-sections:</p> Item Description path Path from the project root where to find the saved report`.  This should be one with all the accounts you wish to use. group this is a list of the summary levels you wish to use in your plan.  The items can either be the categories that Moneydance uses such as Bank Accounts, or it can be summary accounts that you have created (accounts that have sub-accounts) no_details_for If you have summary accounts that cover all the items in a category, then you can use those instead of the leaf accounts. By listing the category hear the detail accounts will be ignored. include_zeros Usually zero balance accounts will be ignored.  If the account is entered here, it will be carried forward.  This can be useful if its a brand new account with no balance or if its an old account that had a balance in the historical period. tax_free_keys A list of keywords that will be used to determine how the tax status of the account will be initialized. force_active A list of accounts to force active. By default accounts with zero balance are made inactive <p>Example:</p> <pre><code>path: ./data/2022 Account Balances.tsv\ngroup:\n- Bank Accounts\n- Credit Cards\n- Real Estate\n- Other Asset\n- Liabilities\n- Mortgage Loans\n- Non Mort Loans\nno_details_for:\n- Assets\n- Loans\ninclude_zeros:\n- My old HSA\n- My old 401K\ntax_free_keys:\n- 401K\n- \"529\"\n- IRA\n</code></pre>"},{"location":"setup_summary/","title":"Summary of steps","text":"<ol> <li>Install libraries. See Libraries.</li> <li>Prepare data files. See Data Files.<ol> <li>Save certain reports from Moneydance to the <code>data</code> folder.</li> <li>Prepare other imput files as json or tsv</li> </ol> </li> <li>Acquire a registration key for the bureau of labor statistics (for inflation data)</li> <li>Edit the control file as described below.</li> <li>Validate the file against the schema.  I use VS Code extension <code>YAML Language Support by Red Hat</code></li> <li>Run <code>dance/setup/create_wb.py</code></li> </ol>"},{"location":"use_cases/","title":"Use-case procedures","text":""},{"location":"use_cases/#add-or-rename-an-account","title":"Add or rename an account","text":"<p>Once the accounts are the way you want in Moneydance, recreate the workbook.</p> <p>If this is done during the year (typical) then export the account balances report as of the latest date and store it under the name of the first forecast year. Modify the data/path key in <code>setup.yaml</code> for the accounts table to point to this file.</p>"},{"location":"use_cases/#rename-an-account","title":"Rename an account","text":"<p>It turns out to be useful to have an account naming convention.  The convention is      type - owner - firm where type is 401K, 529, BKG, ESP, HSA, IRA, IRA Roth, MUT, BNDand owner is JNT or the owner's initials.</p> <p>Notes </p> <ul> <li>BND is for - gov't bonds where TRY is for treasury - direct</li> </ul>"},{"location":"use_cases/#how-to-model-a-rollover-from-a-401k-to-an-ira","title":"How to model a rollover from a 401K to an IRA","text":""},{"location":"use_cases/#structure","title":"Structure","text":"<ol> <li> <p>To prevent this from being taxed:</p> <ol> <li>Ensure additional rows are created on the <code>iande</code> table, in the distributions area using the <code>hier_insert_paths</code> key. In the following example the second set of rows are created under <code>Rollover</code>. </li> <li>Populate these rows with a forecast formula such as:   <pre><code>=-SUM(FILTER(INDIRECT(\"tbl_retir_vals[\"&amp;this_col_name()&amp;\"]\"),(tbl_retir_vals[Item]=TRIM([@Account]))*(tbl_retir_vals[Election]=\"ROLLOVER\"),0))\n</code></pre></li> <li>This will produce a total line on the <code>iande</code> table that nets out the rollover.  Assuming taxes references that, the result is that the rollover won't be taxed. </li> </ol> </li> <li> <p>Use the folding feature of the aux table to compute the net changes to the target IRA account by creating two lines for the IRA - one for rollover and one for withdrawals.     </p> <ol> <li>User the hier_insert_paths key to insert something like <code>IRA:Rollover</code> and <code>IRA:Withdrawal</code>, so that <code>aux</code> ends up with rows like this: </li> <li>Set the formulas for withdraws to pull from retirement <pre><code>=-XLOOKUP(INDEX(TEXTSPLIT([@Key],\":\"),1),tbl_retir_vals[Item],INDIRECT(\"tbl_retir_vals[\"&amp;this_col_name()&amp;\"]\"))\n</code></pre></li> <li>Set the formula for rollovers to pull from the <code>transfers_plan</code> (assume only positive rollovers): <pre><code>=SUM(FILTER(tbl_transfers_plan[Amount],(tbl_transfers_plan[To_Account]=INDEX(TEXTSPLIT([@Key],\":\"),1))*(tbl_transfers_plan[Y_Year]=this_col_name()),0))\n</code></pre></li> </ol> </li> <li> <p>Configure the IRA accounts on balances to pull the <code>Add/Wdraw</code> line from <code>aux</code>.</p> <pre><code>=XLOOKUP(TRIM([@AcctName])&amp;\" - TOTAL\",tbl_aux[Key],INDIRECT(\"tbl_aux[\"&amp;this_col_name()&amp;\"]\"))\n</code></pre> </li> </ol>"},{"location":"use_cases/#data","title":"Data","text":"<ol> <li>On the retirement table:<ol> <li>set ROLLOVER as the code</li> <li>set <code>Start Date</code> as January 1st of the rollover year</li> <li>set <code>Anny Rate</code> as zero. If its in mid-year you can fuss with the rate to get the desired amount. If you use the last day of the year, it should be the same as the market gain rate on the balances table.</li> <li>note the exact amount to be rolled over </li> </ol> </li> <li>On the balances table set the mkt gn rate as zero.</li> <li> <p>Enter the amount rolled over into the <code>transfers_plan</code> table as a transfer from bank accounts to the target account.</p> <ol> <li>Realized int/gains and fees, if any, on this account, need to be addressed, for example, by zeroing out the year's value for the expense ratios for that account. </li> </ol> </li> <li> <p>Extract the retirement values and the transfers plan data </p> <pre><code>(.venv) george@GeorgesacStudio budget % dance/extract_table.py -t tbl_retir_vals 2023-07-19 20:02:21,229 - extract_table - INFO - Source workbook is data/test_wb.xlsx\n2023-07-19 20:02:21,560 - extract_table - INFO - Wrote to data/retire_template.tsv\n(.venv) george@GeorgesacStudio budget % dance/extract_table.py -t tbl_transfers_plan -w data/test_wb.xlsx\n2023-07-19 20:02:34,639 - extract_table - INFO - Source workbook is data/test_wb.xlsx\n2023-07-19 20:02:34,961 - extract_table - INFO - Wrote to data/transfers_plan.json\n</code></pre> </li> <li> <p>Rerun the build</p> </li> </ol>"},{"location":"use_cases/#i-bonds","title":"I-bonds","text":"<p>U.S. Treasury offers a product called i-bond, which allows for the deferral of taxes on the interest, until the bond is cashed out. In order to account for this:</p>"},{"location":"use_cases/#structure_1","title":"Structure","text":"<ol> <li>Create a new category in Moneydance <code>Income:I:Invest income:Int:Defered Tax</code></li> <li>Modify the taxes table to create a row for <code>Released deferred interest</code> and a row on the state taxes to subtract it <code>Interest on US gov obl</code>. Make sure indented properly.<ol> <li>To avoid an extra build, put in the key value for these lines in column A.</li> </ol> </li> <li>Run the <code>extract_table.py</code> utility to capture the new lines for the taxes table in a revised template.</li> <li>To get the actual values/lines to show up on the <code>iande</code> table and in the 'rlzd int/gn' row on the balances table, and the invest_iande work tables:<ol> <li>Recreate <code>iande.tsv</code> <code>invest_actl.tsv</code>, and <code>invest_iande.tsv</code> files.</li> <li>Run build.</li> </ol> </li> </ol>"},{"location":"use_cases/#data_1","title":"Data","text":"<ol> <li>On the invest_iande_work tab, filter both the tables to select the category <code>Int:Defered-tax</code>.  Modify the ratios with the expected rate for the duration. Compute the total interest over the duration. That will be needed for taxes.</li> <li>Put the total interest computed above in the right year on the two new tax rows(positive &amp; negative)</li> <li>Put the interest and principal in a line in the <code>transfers_planned</code> table.</li> <li>Save the file.</li> <li>Run the <code>preserve_changed.py</code> utility - to preserve the input ratios and taxable interest.</li> <li>Run build.</li> <li>This should now have correct balances for all years, including zero when cashed out, as well as taxable impact on the distribution year.</li> </ol>"},{"location":"use_cases/#new-year-new-tax-rates","title":"New year - new tax rates","text":"<p>Pull the IRS data as a .csv file. Use <code>bracket_fix.py</code> to transform into the correct format.</p> <p>For example:</p> <pre><code>dance/bracket_fix.py data/2022_tax_brackets_irs.csv 0,0.10,0\n20549.0,0.12,410.8800000000001\n83550.0,0.22,8766.0\n178150.0,0.24,12329.0\n340100.0,0.32,39537.0\n431900.0,0.35,52494.0\n647850.0,0.37,65451.0\nCopy the above numbers into the table and add the year\n</code></pre>"},{"location":"validation/","title":"Validation","text":""},{"location":"validation/#validate-balances-for-a-year","title":"Validate balances for a year","text":"<p>The routine <code>tests/balance_check.py</code> is available to see how the values from the <code>Account Balances</code> report from Moneydance match to those in the workbook.</p> <pre><code>tests/balance_check.py\n155 out of 155 balances matched\n</code></pre>"},{"location":"workbook/","title":"Design of the workbook","text":""},{"location":"workbook/#highlights","title":"Highlights","text":"<ol> <li>Annual time series going from past actual into future forecast</li> <li>Uses Excel Tables and structured references for readability and usability</li> <li>Build of the workbook is defined for initialization and periodic updates<ul> <li>Controlled by a definition file, including formulas</li> <li>Preservation of input data is supported so re-building can be done</li> </ul> </li> <li>Avoids volatile functions and over large dependencies by using build time substitutions for generics such as \"this column\"<sup>1</sup>.</li> <li>Bias toward use of modern array oriented Excel functions<ul> <li>Excel Lambda functions<sup>2</sup> are in use to make calculations more readable.</li> <li>Tables don't support dynamic arrays - array functions reduced to a single value</li> </ul> </li> <li>Use of \"folding\" technique to make navigation easier and calculations less obtuse<ul> <li>Replaces the SUBTOTAL(9,...) technique with aggregation by SUM, PROD, MIN, MAX &amp; special tax calculations</li> <li>Unlike SUBTOTAL(9,...) uses the inner level aggregations not the interior leaf values.  </li> <li>This supports typical tax calcs.</li> </ul> </li> </ol>"},{"location":"workbook/#dependencies","title":"Dependencies","text":"<p>There are some complex dependencies between the tables.  Generally, the flow is between rows in a year, then certain values are carried forward into the next year.</p>"},{"location":"workbook/#tables","title":"Tables","text":"<p>Tables are housed on various worksheets which are grouped and color coded.</p> <p>Many of the tables represent a set of annual time series.  The data elements are typically financial values associated with a year.  For instance, the balances table tracks how balances change year by year. The view below selects just the end balance row.</p> <p></p> <p>Other columns are labeled with appropriate short column labels.</p> <p>An index of tables is maintained on the 'utility' worksheet, which allows the worksheet to be located by the VBA function.  This itself is a table and it is created by a Python program <code>index-tables.py</code>.</p>"},{"location":"workbook/#worksheets","title":"Worksheets","text":"<p>Tables are distributed over a set of worksheets. Sometimes a worksheet holds more than one table.</p> <p></p> <p>For more information: worksheets</p>"},{"location":"workbook/#excel-calculations","title":"Excel Calculations","text":"<p>Array functions in Office 365 allow for fairly readable formulas, which do not suffer from the problem of dependency updates.  Generally, by referencing only the needed columns true dependency loops can be avoided.  </p> <p>Getting this right turned out to be a bit tricky.  Some techniques are discussed in Idioms.  The winning technique is to isolate the columns used at build time, so that entire tables are not needed to be referenced.</p> <p>The original plan was to use Visual Basic (functions and macros) allowing for readable calculations. But there was a downside in that Excel cannot use its dependency trees to know what needs to occur when the macros reference or update a value with this method.  </p>"},{"location":"workbook/#build-time-column-substitutions","title":"Build-time column substitutions","text":"<p>The winning technique is to isolate the columns used at build time, so that entire tables are not needed to be referenced. </p> <p>Both the indirect and indexing methods have serious drawbacks, so the substitution method was created. This allows the formula to be written with a generic year, which will be substituted at build time.</p> formula as written in setup.yaml<pre><code>formula: =XLOOKUP([@Key],tbl_invest_actl[Key],tbl_invest_actl[Y1234])\n</code></pre> formula as it occurs in Excel<pre><code>=XLOOKUP([@Key],tbl_invest_actl[Key],tbl_invest_actl[Y2022])\n</code></pre> <p>There are three types of substituion<sup>3</sup>:  </p> <ol> <li>Indicates a single year with the form <code>Ynnnn</code>.</li> <li>Indicates an offset, picking out a prior column. The form is <code>Ynnnn-m</code>, which will use the year <code>m</code> years before nnnn. </li> <li>Indicates a range of columns.  The form is <code>m&lt;Ynnnn</code>. This produces a range of columns for the <code>m</code> years prior.</li> </ol> <p>This method is much faster and does not create unwarranted dependencies. It is also much easier to read these formulas. Its drawback is that each column in the time series has a different formula<sup>1</sup>.</p>"},{"location":"workbook/#folding","title":"Folding","text":"<p>By folding we mean using the row grouping feature of Excel, where the final row of a group contains the aggregation of the items folded under it. </p> <p></p> <p>The aggregation is performed on the last line of the group as indicated by the word occuring after the final hyphen. The aggregation methods TOTAL, MIN, MAX, PRODUCT, FED_TAX, CT_TAX.</p> <p>The technique is similar to that provided by Excel's SUBTOTAL function but differs as follows:</p> <p>Excel ignores nested aggregations - instead it re-sums the values from the leaf nodes. This is fine for subtotals but does not work when mixing aggregation types across levels. In all cases the system takes the values that are directly below this aggregation level, no matter if they are leaf nodes or aggregates themselves.</p> <p>Unlike the subtotal method this grabs the subordinate aggregation lines not the underlying leaf nodes This methods allows the folding to do things like sum the results of subordinate aggregations that are not themselves sums.</p> <p>For example, consider the calculation of social security withholding. Row 67 is the min of rows 65 and 66 and is itself combined  with 68 as a product into 69. The product calculation does not involve the lower level values on 65, and 66.</p> <p></p>"},{"location":"workbook/#idioms","title":"Idioms","text":"<p>A glossary of Excel array idioms is available. Idioms</p>"},{"location":"workbook/#functions","title":"Functions","text":""},{"location":"workbook/#lambda-functions","title":"LAMBDA functions","text":"<p>The modern lambda functions seem to be preferable to VBA. Eventually this should allow the removal of much of the original VBA.</p> <p>The functions are stored as defined names in Excel.  They are defined in the <code>lambdas:</code> section of the <code>setup.yaml</code> file<sup>4</sup>.</p> <p>The following list is sourced from that file by <code>util.doc_lambdas.py</code>.</p> <p>List of LAMBDA functions</p>"},{"location":"workbook/#notes-about-using-lambdas-in-defined-names","title":"Notes about using LAMBDAs in defined names","text":"<ol> <li> <p>Parameters of <code>LAMBDA</code> and <code>LET</code> need to be prefixed with _xlpm. Each of the parameters needs a hidden defined name too.  Excel creates these upon open. It appears that Excel converts input \"lambda\" into \"LAMBDA\", then subsequent processing is based on the upper case version. So when Openpyxl provides these functions, they need to be provided in uppercase or the hidden defined names never get created.</p> </li> <li> <p>Do not use table names in the formulas as that creates a hidden defined name with that value, causing the real table to get \"_1\" appended to its name.</p> </li> </ol>"},{"location":"workbook/#conventions","title":"Conventions","text":""},{"location":"workbook/#excel-conventions","title":"Excel conventions","text":"<ul> <li>All table names begin with <code>tbl_</code>.</li> <li>Except where visible, such as column names and row labels, use lowercase except for acronyms.</li> <li>Use underscores between words.</li> <li> <p>Use standard abbreviations as follows:</p> long short actual actl annuity anny balances bals duration dur investments invest parameters parms pension pens retirement retir value or valuation val </li> </ul>"},{"location":"workbook/#naming-conventions-for-accounts","title":"Naming conventions for accounts","text":"<ul> <li>Actual account names are generally of the form type-who-firm where type is one of 401K, 529, BKG, BND, ESP, HSA, IRA, IRA Roth, LON, MUT.</li> </ul> <ol> <li> <p>This does impair ease of revising formulas in rows, but produces performant spreadsheet\u00a0\u21a9\u21a9</p> </li> <li> <p>Progress is underway to remove VBA functions that rely on retrieving data, but some VBA calculations are expected to remain.\u00a0\u21a9</p> </li> <li> <p>Substitutions are implemented as regular expression rules in <code>xl_formulas.py</code> \u21a9</p> </li> <li> <p>Note that a few steps are needed to get formulas using <code>LAMBDA</code> and <code>LET</code> into good order.  The logic can be found in <code>util.xl_formulas.prepare_formula</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"worksheets/","title":"Worksheets","text":"<p>The worksheets are grouped together with colored tabs.  The groups are as follows:</p> Group Sheet Purpose acct-bal accounts lists the tracked accounts and their attributes balances tracks annual changes and balance for tracked accounts transfers_plan Allows for planning of transfers between accounts that do not have a distribution plan income-expense iande Income and expenses (and cash flow) for both actuals and forecast periods. aux A place for side calculations. current During the year, this sheet gathers the year-to-date data and allows user to forecast total year for selected lines. These then can be copied into iande. invest_iande_work Income and Expenses that relate to investments. retirement retirement Retirement income streams and retirement medical expense streams retireparms Pension, social security options, post retirement medical insurance plan selection actuals other_actl holds several tables of other actuals transfers_actl Gathers the transfers to and from all accounts coming from or going to banks or credit cards invest_actl Collects for each account categorized changes to the account value by actual time period. taxes taxes computes Federal and State income taxes. capgn estimating taxes for the current and prior year until tax statements arrive tax_tables Selected federal and state tax tables.  Required mininum distribution tables. tables gen_tables state tax information, Medicare Part B premiums, inflation, and a general state mangement utility Used by VBA functions to locate tables."},{"location":"functions/excel_lambdas/","title":"Defined Excel Lambda functions","text":"name comment formula AGE Return the age attained by an account owner with inits in a given year =LAMBDA(inits,yr,ROUNDDOWN(((DATE(yr,12,31)-DOB(inits))/365.25),0)) AGI Returns the adjusted gross income for a year.  To be used in a table in a year col. Call with tbl_taxes[Ynnnn]. =LAMBDA(ycol,XLOOKUP(\"Adjusted gross - TOTAL\",tbl_taxes[Key],ycol)) DAY_COUNT The number of days from the first date to the last date, inclusive. Call with 2 element array. =LAMBDA(arr,MAX(0,1+SUM({-1,1}*arr))) DEFAULT_DATE Given a value that is a date or blank, return the blank to the horizon, the given date (if not blank) =LAMBDA(d,IF(ISBLANK(d),HORIZON(),d)) DIV0 Performs normal division except div by 0 returns 0 =LAMBDA(n,d,IF(d=0,0,n/d)) DOB Get date of birth for initials =LAMBDA(inits,XLOOKUP(inits,tbl_people[Initials],tbl_people[DOB])) FIRST_LAST Return the first and last date in a year, given an integer year. =LAMBDA(y,HSTACK(DATE(y,1,1),DATE(y,12,31))) HORIZON Returns the last date in the planning horizon =LAMBDA(DATE(0+RIGHT(TAKE(tbl_balances[#Headers],1,-1),4),12,31)) IIEF For 1st only, opening balance for acct v. Used in the investment iande ratios. Call with column in balances. =LAMBDA(v,col,XLOOKUP(v &amp;\":Start Bal\",tbl_balances[Key],col)) IIES Except for 1st, opening balance for this acct v. Used in the investment iande ratios. Call with column in balances. =LAMBDA(v,col,XLOOKUP(v &amp;\" - TOTAL\",tbl_balances[Key],col)) IIEV Get the numerator for key k. Use in the invest iande ratios. Call with column in values. =LAMBDA(k,col,XLOOKUP(k,tbl_invest_iande_values[Key],col)) INT_YEAR Given a string in the form Ynnnn return nnnn as an integer =LAMBDA(yyear,INT(RIGHT(yyear,4))) LAST_TWO_PARTS Return the last two parts of a multipart key separated by colon, as a string with a colon separator. =LAMBDA(key,TEXTJOIN(\":\",FALSE,TAKE(TEXTSPLIT(key,\":\"),1,-2))) LE_BEN Life expectancy for a beneficiary (not a spouse). Call with election, who. =LAMBDA(election,who,LET(e,TEXTSPLIT(election,\"-\"),dy,0+TAKE(e,1,-1),g,AGE(who,dy),le,XLOOKUP(g,tbl_rmd_1[Age],tbl_rmd_1[Life Expectancy]),le-(INT_YEAR(\"Y1234\")-dy))) LE_SELF Life expectancy for normal RMD (table 3), or zero if not yet aged enough. =LAMBDA(who,yr,XLOOKUP(AGE(who,yr),tbl_rmd_3[Age],tbl_rmd_3[Distribution],0)) LE_SPOUSE Life expectancy for a spouse (not a beneficiary). Call with who, current year. =LAMBDA(who,yr,LET(g,AGE(who,yr),le,XLOOKUP(g,tbl_rmd_1[Age],tbl_rmd_1[Life Expectancy]),le)) MAX_MIN Return the max of the 1st column and the min of the 2nd column =LAMBDA(arr,HSTACK(MAX(CHOOSECOLS(arr,1)),MIN(CHOOSECOLS(arr,2)))) MC_RATES Returns the best annual medicare rate table as an array. To be run in a table year column. Called with the tbl_part_b[#Data],this_year =LAMBDA(all_rates,this_year,FILTER(all_rates,CHOOSECOLS(all_rates,1)=YEAR_FOR_TBL(all_rates,this_year))) MONTHLY_PARTB Returns the monthly part B premium for this year. Called with the tbl_part_b[#Data], agi, this_year as the arguments. =LAMBDA(arr,agi,yr,LET(rates,MC_RATES(arr,yr),m,CHOOSECOLS(rates,3),b,CHOOSECOLS(rates,4),XLOOKUP(agi,m,b,0,1))) MONTHLY_PARTD Returns the monthly part D premium surcharge for this year.  Called with the tbl_part_b[#Data], agi, this_year as the arguments. =LAMBDA(arr,agi,yr,LET(rates,MC_RATES(arr,yr),m,CHOOSECOLS(rates,3),b,CHOOSECOLS(rates,5),XLOOKUP(agi,m,b,0,1))) MON_SEQ Generate a sequence of base 12 numbers inclusive, given start_date, end_date. =LAMBDA(sd,ed,LET(sm,YM(sd),em,YM(ed),SEQUENCE(1,1+em-sm,sm))) MON_THIS The number of months this year that fall in range between start_date, end_date. =LAMBDA(sd,ed,yr,SUM(IF(ISNUMBER(MATCH(SEQUENCE(1,12,12*yr),MON_SEQ(sd,ed),0)),1,0))) PER_LEFT Number of periods left on an annuity given start year, duration and this year =LAMBDA(sy,dur,ty,(dur-(ty-sy))(ty&gt;=sy)(ty&lt;(sy+dur))) PORTION The number of months in this year where this row applies divided by 12. =LAMBDA(s,e,y,MON_THIS(s,DEFAULT_DATE(e),y)/12) PORTION_DAY DEPRECATED The number of days in this year where this row applies divided by 365 or 366 for leap years. =LAMBDA(s,e,y,DAY_COUNT(MAX_MIN(VSTACK(HSTACK(s,DEFAULT_DATE(e)),FIRST_LAST(y))))/(1+SUM(FIRST_LAST(y)*{-1,1}))) THIS_COL_HDR In a table, get this column's header name. Call with tbl_xxx[#Headers]. =LAMBDA(h,CHOOSECOLS(h,COLUMN()-(TAKE(COLUMN(h),1,1)-1))) TX_CALC_A Calc tax using add type tax table. Call with 3 col tax table, taxable income =LAMBDA(tt,ti,LET(m,ti-TX_PRV_BK(tt,ti),tx,TX_THS_BK(tt,ti)*EXPAND(m,1,2,1),SUM(tx))) TX_CALC_B Calc tax using subtract type tax table. Call with 3 col tax table, taxable income, capgn =LAMBDA(tt,ti,cg,SUM(XLOOKUP(ti-cg,CHOOSECOLS(tt,1),CHOOSECOLS(tt,2,3),0,-1)EXPAND((ti-cg),1,2,-1))+0.15cg) TX_CT Compute CT income tax. Call with 4-col tx tbl, yr, txbl income =LAMBDA(tbl,yr,ti,TX_CALC_A(TX_TB(tbl,yr),ti)) TX_FED Compute federal income tax. Call with 4-col tx tbl, yr, txbl income, cap gn =LAMBDA(tbl,yr,ti,cg,TX_CALC_B(TX_TB(tbl,yr),ti,cg)) TX_PRV_BK Return the high edge or the prior bracket. Call with 3 col tax table, taxable income . =LAMBDA(tt,ti,LET(b,DROP(tt,0,-2),TAKE(FILTER(b,b&lt;ti),-1,1))) TX_TB Return the 3 col tax table for a year. Call with the 4 col tax table, year =LAMBDA(arr,yr,DROP(FILTER(arr,CHOOSECOLS(arr,1)=yr),0,1)) TX_THS_BK Return bracket 3rd and 4th col of this bracket. Call with 3 col tax table, taxable inc. =LAMBDA(tt,ti,XLOOKUP(ti,CHOOSECOLS(tt,1),CHOOSECOLS(tt,2,3),0,1)) YEAR_FOR_TBL return current year or highest year in given table. For use in year columns. Call like this - YEAR_FOR_TBL(tbl_part_b,this_year) =LAMBDA(arr,this_year,MIN(this_year,MAX(CHOOSECOLS(arr,1)))) YM Generate a base 12 number that represents the year and month. =LAMBDA(d,(MONTH(d)-1)+12*YEAR(d))"},{"location":"sheets/accounts/","title":"accounts","text":"<p>This worksheet lists the tracked accounts and their attributes. Some of these accounts are real accounts at financial institutions.  Others summarize sets of assets or liabilities. One account is designated as the sweep account.</p> <p>The attributes are:</p> Name Description Account The name of the account or summay set Type A=Asset, B=Bank, C=Credit Cards, I=Investment, L=Liability, N=Loans Income Txbl 0 if sheltered, 1 if normal taxes Active 0 if inactive, 1 if active No Distr Plan 0 if there is a distribution plan, 1 otherwise Near Mkt Rate Rate to use to override the first forecast year computed rate Rate Cap Rate used to cap computed rates Reinv Rate Amount used to initialize the <code>Reinv Rate</code> row on the balances table Notes Place to indicate special things about the account"},{"location":"sheets/aux/","title":"aux","text":"<p>This is a set of rows needed to establish forecasts in some cases.  </p> <p>The rows may be input or calculated.  The need arises for aux data and calcs, for instance, in handling 401K accounts, where the EE contribution is tax deductable but is only part of the amount for add/wdraw at the balance level.  That value plus the pre-tax deductions amounts from the paychecks need to be summed to produce the W2 exclusions.  This is the place where those calcs happen. </p> <p>The table uses the \"folding\" method to allow aggregations, such as PRODUCT, MIN and TOTAL. Aggregated items are typically called for in another table. </p> <p>Social security withholding is a good example. Setting up the nesting as follows, allows the calculation to be done naturally without creating unwanted dependencies:</p> Key Formula WH:Soc Sec WH:Soc Sec:G WH:Soc Sec:G:Base WH:Soc Sec:G:Base:Cap =XLOOKUP(\"Social Security Wage Cap\",tbl_manual_actl[Item],CHOOSECOLS(tbl_manual_actl[#Data],-1)) WH:Soc Sec:G:Base:Gross =XLOOKUP(CHOOSECOLS(TEXTSPLIT([@Key],\":\"),3)&amp;\" - Earned income - TOTAL\",TRIM(tbl_iande[Account]),tbl_iande[Y2023]) WH:Soc Sec:G:Base - MIN =MIN(H58:H59) WH:Soc Sec:G:Rate =XLOOKUP(\"Social Security FICA rate\",tbl_manual_actl[Item],CHOOSECOLS(tbl_manual_actl[#Data],-1)) WH:Soc Sec:G - PRODUCT =PRODUCT(H60:H61) <p>The year column references, such as Y2023, are provided for each column at build time as are the aggregation formulas.</p>"},{"location":"sheets/aux/#setup","title":"Setup","text":"<p>The rows are defined in <code>setup.yaml</code> using the <code>data:hier_insert_paths:</code> and <code>data:hier_alt_agg:</code> keys.</p>"},{"location":"sheets/balances/","title":"balances","text":"<p>This table uses the \"folding\" techique in order to calculate the ending balance. To support this the three leading fields are:</p> <ol> <li>Key - normally hidden, this field is the Account followed by a colon and then the ValType.</li> <li>ValType</li> <li>Account</li> </ol> <p>The after this follow fields looked up from the account page: Type, Income Txbl, and Active, No Distr Plan.</p> <p>This table has the following rows for each account, as shown for the account 'account':</p> Key Description account A blank row account:Start Bal Previous year's end balance, except the first one, which is pulled in from actuals at build time account:Add/Wdraw The amount added to the account during the year if positive, or removed if negative. Formula set at build-time based on config. For example in forecast periods bank accounts sweep any residual from income and expense with <code>=XLOOKUP(\"TOTAL INCOME - EXPENSES\",tbl_iande[Key],tbl_iande[Y2023])</code> account:Retain A blank row marking the retained realized interest/gain account:Retain:Rlz Int/Gn For banks, interest pulled from the aux table; for investments, realized gains and income, pulled from invest_iande_values. account:Retain:Reinv Rate The reinvestment rate pulled from the accounts table. account:Retain - PRODUCT The amount retained calculated at the \"fold\" line with the product aggregation account:Unrlzd A blank row marking unrealized gain or loss section account:Unrlzd:Actl Unrlz Actual unrealized gain or loss - only used for actual periods, where its pulled from invest_actl with <code>=XLOOKUP(\"Unrlz Gn/Ls\"&amp;[@AcctName],tbl_invest_actl[Key],tbl_invest_actl[Y2022])</code> account:Unrlzd:Fcst A blank row marking forecast unrealized gain or loss section account:Unrlzd:Fcst:I Start Bal For investments only (banks don't have unrealized gains), the prior period ending balance: <code>=XLOOKUP([@AcctName]&amp; \" - TOTAL\",[Key],[Y2022])</code> account:Unrlzd:Fcst:Mkt Gn Rate The forecast market gain rate - usually: <code>=XLOOKUP([@AcctName]&amp;\":Unrlz Gn/Ls:rate\",tbl_invest_iande_work[Key],tbl_invest_iande_work[Y2024])</code>.  But first forecast period comes from the accounts table: <code>=XLOOKUP([@AcctName],tbl_accounts[Account],tbl_accounts[Near Mkt Rate],0)*[@Active]</code> account:Unrlzd:Fcst - PRODUCT The amount of market gain forecast, calculated at the \"fold\" line with the product aggregation account:Unrlzd - TOTAL The actual or forecast unrealized bgain calculated at the \"fold\" line with the SUM aggregation account:Fees Forecast fees for investment accounts: <code>=XLOOKUP([@AcctName]&amp; \":Investing:Account Fees:value\",tbl_invest_iande_work[Key],tbl_invest_iande_work[Y2023],0)</code> account - TOTAL The actual or forecast ending balance. Sum of above <p>The calculations are designed to work even if the rows are filtered.  But sorting may produce strange results. </p>"},{"location":"sheets/balances/#rlz-intgn-line","title":"Rlz Int/Gn line","text":"<p>For actuals, this value derives from the investment performance report via the invest_actl worksheet.</p> <p>This report does not break out the income types.  If the accounting is done properly then the breakout for a particular investment account can be achieved via an income/expense report that selects that account. The value of the performance report 'Income' column total is equal to the value of the Investment Income report line Income - TOTAL.</p> <p>For forecast periods, the investment income and expense values are derived from adjusted extrapolated historical rates on line item basis. These values are then summed one way for the balances and another way for the iande tab.  </p>"},{"location":"sheets/cap_gain/","title":"capgn","text":"<p>This is for the purposes of </p> <ol> <li>estimating taxes for the current and prior year until tax statements arrive</li> <li>reconciling between balances (which includes realized capital gains) and income (which only includes capital gains arising as dividends, but not from sales of securities).</li> </ol> <p>This is a work in progress</p>"},{"location":"sheets/current/","title":"current","text":"<p>This sheet takes the year to date data from Moneydance and allows the user to apply a factor to reproject the current year.  There is one table.</p>"},{"location":"sheets/current/#current_1","title":"current","text":"<p>Titled, YTD and Reprojection, the tbl_current has three leading columns; the first two are hidden.</p> <p>The reprojection formula is </p> <p><code>Year = (YTD * Factor) + Add</code></p> <p>For instance, use 1 and 0 if the year-to-date value is final.  </p> <p>If both Factor and Add are blank it means the value won't be transferred to <code>iande</code>, so the modeled value will be retained.</p> Name Description Key The full multi-level category name, anchored as Income or Expense, such as <code>Expenses:T:Income Tax:Current Yr:Fed:Est pmts</code>. is_leaf 1 if the category is a leaf in the category tree, otherwise 0.  Used to pull only leaves (not subtotals) into iande. Account The last portion of the key, indented by two spaces for each level YTD The year to data data which has been imported. The column name is replaced by the as of date in the form Yyyyymmdd Factor A number used in the formula. Add A number used in the formula. Year The result of the formula, or blank if not re-projected. <p>The rows are handled like iande with groups, totals and hierarchical inserts.</p> <p>The mechanism is described here.</p> <p>Currently the distributions (Income:J) and cashflow (Expenses:Y) are not imported but if used, they are carried to storage and to iande.</p>"},{"location":"sheets/gen_tables/","title":"gen_tables","text":"<p>A table of state tax information, Medicare Part B premiums, inflation, and a general state mangement table.</p>"},{"location":"sheets/gen_tables/#state-taxes","title":"state taxes","text":"<p>This compiles facts about various states for the purpose of considering relocation. Can be referenced in the tax calcs. </p> <p>Source: Kiplinger</p>"},{"location":"sheets/gen_tables/#part-b-premium","title":"Part B Premium","text":"<p>Values to select the premium given modified AGI and year. Also includes the part D adjustment.</p>"},{"location":"sheets/gen_tables/#inflation","title":"inflation","text":"<p>3 columns about 75 rows</p>"},{"location":"sheets/gen_tables/#general-state","title":"General State","text":"<p>Originally this has only one value, the first forecast year. Other items have been added, so the name is not great.</p>"},{"location":"sheets/iande/","title":"iande","text":"<p>This is for income and expenses. There is one table, which uses the \"folding\" approach.  The folds follow the chart of accounts, with some modifications to support cash flow.</p>"},{"location":"sheets/iande/#iande_1","title":"iande","text":"<p>This is both actuals and forecast.  </p> <p>It has two leading columns then the actual and forecast years:</p> Name Description Key The full multi-level category name, anchored as Income or Expense, such as <code>Expenses:T:Income Tax:Current Yr:Fed:Est pmts</code>. This column is normally hidden. Account The last portion of the key, indented by two spaces for each level <p>The levels are grouped using Excel's grouping, so they can be expanded or collapsed.</p>"},{"location":"sheets/iande/#cash-flow-data","title":"Cash Flow data","text":"<p>The native high level qualifiers coming from Moneydance Income and Expense.  Under that are I,T, and X, which function identify income, taxes and expenses.  In order to accomodate cash flow items two new codes are introduced. J for money flowing in (such as a distribution from an IRA) and Y for money flowing out (such as payroll deduction for 401K or dividends reinvested).</p> <p>By accounting for all these flows, the bottom line will be zero for actuals.  For forecasts, the bottom line indicates the amount that can be put in or taken out of bank accounts.</p> <p>These are configured under the <code>data:hier_insert_paths</code> key.</p>"},{"location":"sheets/iande/#reforecasts","title":"Reforecasts","text":"<p>It is possible to reforecast selected rows for the current (first forecast) year.  This is done on the <code>current</code> tab, which has the same rows as <code>iande</code>. When the values are posted to this tab, they are marked with a comment.</p> <p>The mechanism is described here.</p>"},{"location":"sheets/invest_actl/","title":"invest_actl","text":"<p>This table provides annual values for 6 investment values.  It is used to look up the actuals on the balances tab. </p> <p>Provides 6 rows of actuals for each investment.  The values types are:</p> ValType Description Add/Wdraw Amount moved into or out of account Rlz Int/Gn Income + Realized Gains Unrlz Gn/Ls Unrealized gains Income Interest and Dividends Gains Realized Gains Fees well, fees"},{"location":"sheets/invest_actl/#notes","title":"Notes","text":"<ul> <li>The add/wdraw value is principal transfered, so interest payments have been removed if they are not reinvested.</li> <li>The unrealized gain value does not have the fees removed</li> <li>Requires use of lots matching.  Average cost method seems to return non sensical results for unrealized gain.</li> <li>The loading program does some error detection. If it fails, suggests some things to look at.</li> </ul>"},{"location":"sheets/invest_actl/#data-sources","title":"Data sources","text":"<p>The Python program <code>invest-actl-load.py</code> uses:</p> <ol> <li>The Moneydance performance reports. The Moneydance Investment Performance report are <code>data/invest-p/YYYY.tsv</code>. There is one for each actual year. </li> <li>The Moneydance balance reports, which are <code>data/acct-bals/YYYY.tsv</code>.</li> <li>The accounts table to get the master list of investments</li> <li>The invest_iande_values table to get the interest received from any loans</li> </ol>"},{"location":"sheets/invest_iande_work/","title":"invest_iande_work","text":"<p>This sheet refers to Income and Expenses that relate to investments. There are two tables: the values and the ratios. The left part of the values table refers to actual values for several categories. These are converted to ratios in the left part of the second sheet, so that forecasts can be derived. </p> <p></p> <p>Each table consists of the same lines.  The values in the 1st table represent income and expenses for each account.  Those in the 2nd table hold the ratio to the <code>start bal</code>. These are computed in the case of actuals</p> <p>The actual rates are extended into the forecast periods, by methods such as rolling average. The forecast rates are then multiplied by the forecast start balances to get the value for each of the income/expense types.</p> <p>The following categories were devised to support forecasting investment income and taxes.</p> Category Supports CapGn:Mut LT Long term mutual fund distributions. For taxable accounts - supports tax calc CapGn:Mut ST Long term mutual fund distributions. For taxable accounts - supports tax calc CapGn:Sales Gains or losses from sales in taxable accounts CapGn:Shelt:Distr Mutual fund distributions of any duration in non-taxable accounts CapGn:Shelt:Sales Gains or losses from sales in non-taxable accounts Div:Reg Regular dividends in taxable accounts Div:Shelt Dividends in non-taxable accounts Div:Tax-exempt * Dividends exempt from federal tax in taxable accounts Int:Reg Interest in taxable accounts Int:Shelt Interest in non-taxable accounts Int:Tax-exempt Interest exempt from federal tax in taxable accounts <p>* Tax exemption is in reality further broken down into federal and state.  In theory it should be implemented on a per security basis.  But it only matters for taxation so it is handled by custom lines on the taxes sheet by year.</p> <p>The actuals derive from a Moneydance report: Investment IandE, which is a configured Transaction Filter that selects just the investment income and expense lines for all accounts. It should select dates over the years that are actuals.  The result is saved into <code>invest-iande.tsv</code>.  </p> <p>The values are summarized by investment accounts for each of the categories.  These become the numerators of the actual rates experience for each category for each account.  The denominator is the opening balance of the account. Its imperfect for accounts where money is moved in or out during the year, but it is adequate for its use of setting default rates for forecast years.</p> <p>The summarization is done on they Python side at load time.  The ratios are calculated in the spreadsheet. Rates are rounded to 1 basis point (.01%).  The rolling average of the previous periods is used to carry the rates into the forecast period. These averages may be modified by the rate cap set on the accounts tab. </p> <p>On the balances table the <code>Rlzd Int/Gn</code> and <code>Fees</code> lines are derived as sums from this table. </p> <p>On the <code>iande</code> table the forecasts for investment income and expense are also summed up from the values in this table. Forecasts for these lines are calculated as the sum across all accounts for the line for forecast periods.  For actual periods those values will derive directly from the Moneydance income and expense report.</p>"},{"location":"sheets/other_actl/","title":"other_actl","text":"<p>This sheet holds several tables of other actuals.</p>"},{"location":"sheets/other_actl/#manually-input-actual-items","title":"Manually input actual items","text":"<p>Mostly values needed for tax calcs. A number of entries are needed to determine taxes.  When easiest, these are input on this table: <code>tbl_manual_actl</code>. A Moneydance report <code>W2-exclusions</code> provides the amounts that can be excluded from the W2s.  This relies on the Pre-tax and pre-tax tags. These should be input manually.</p> <p>Computes the actual 401K contributions to post to the iande tab.</p>"},{"location":"sheets/other_actl/#payroll-savings-incl-er-contributions","title":"Payroll Savings incl ER contributions","text":"<p>Used by cash flow calcs on IandE.</p>"},{"location":"sheets/other_actl/#roth-contributions","title":"Roth contributions","text":"<p>Used in tax calcs.</p>"},{"location":"sheets/other_actl/#529-plan-distributions","title":"529 plan distributions","text":"<p>Used to populate untaxed income lines in iande.</p>"},{"location":"sheets/other_actl/#ira-distributions","title":"IRA distributions","text":"<p>Used to populate <code>Income:J:Distributions:IRA</code> lines on iande.</p> <p>This table is needed to handle the accounting difficulty that arises with IRA distributions.  See accounting note on IRA-Txbl-Distr.</p> <p>This data is exported from Moneydance via the <code>IRA-Distr</code> report, and saved in the <code>data/IRA-Distr.tsv</code> file. It is then imported via special handling in <code>IRA_distr</code> processes the transactions to create a table <code>tbl_ira_distr</code>. The  <code>Income:J:Distributions:IRA</code>  line on the <code>tbl_iande</code> pulls from that table.  From there it flows to the <code>taxes</code> tab.  </p>"},{"location":"sheets/other_actl/#hsa-disbursements","title":"HSA disbursements","text":"<p>Used to populate untaxed income lines in iande.</p>"},{"location":"sheets/other_actl/#bank-transfers-tofrom-selected-investments","title":"Bank transfers to/from selected investments","text":"<p>Used by cash flow calcs on IandE.</p>"},{"location":"sheets/retirement/","title":"retirement","text":"<p>Plans out income streams and post-retirement medical expenses.  This affects both the balances and the iande tabs.</p>"},{"location":"sheets/retirement/#retirement-income-plan","title":"Retirement Income Plan","text":"Name Description Item A key, composed of type, whose, and firm, separated by space-hypen-space like <code>401K - GBD - XXX</code> Who Initials of who owns this account or JNT for joint. This is split from Item at build time and stored. Type See conventions. This is split from Item at build time and stored. Firm The firm holding the account. This is split from Item at build time and stored. Election A code for the distribution election on this item. Start Date Expected start date for the distribution or expense Anny Dur Yrs If an annuity is elected, how many years should it run. Anny Rate The rate used for the annuity Yearly For non-annuity ongoing values (pensions), yearly amount."},{"location":"sheets/retirement/#election-codes","title":"Election Codes","text":"Code Description ANN Annuity - Creates an annuity stream based on the prior year's end balance, using the <code>Start Date</code>, <code>Anny Dur Yrs</code>, <code>Anny Rate</code> fields. Currently prorates the start by month, but does not do the same for the last period. RMD-BEN-YYYY This determines the required minimum distribution for IRAs inherited as a beneficiary. The YYYY is replaced with the year of death of the former owner RMD-SPOUSE This determines the required minimum distribution for IRAs inherited as a spouse. ROLLOVER Also treated as a annuity, so the only natural duration is one year. <p>The following correspond to the headings on the pensions facts table. These are used to look up the data there.  The annual amount is then placed in the Yearly column and it is applied to future years.</p> <ul> <li>Single</li> <li>EE50</li> <li>Spouse50</li> <li>EE75</li> <li>Spouse75</li> <li>EE100</li> <li>Spouse100</li> <li>Lump</li> <li>10 year certain</li> </ul> <p>For items that start with SS, the codes are looked up in the Social Security table. The codes consist of the initials of the person and the year portion of the age when starting to receive social security.</p>"},{"location":"sheets/retirement/#data-source","title":"Data Source","text":"<p>These values are sourced from <code>data/retir_template.tsv</code>.  If the values are changed, the template can be re-written using the extract_table utility.</p>"},{"location":"sheets/retirement/#retirement-medical","title":"Retirement Medical","text":"<p>Retirement medical values are modeled here. Medicare Part B and Part D have their own rows on this table, so that the variable cost can be modeled (based on income 2 years back). The items with type=PKG get their values as the sum of the rows in <code>tbl_mcare_opt</code> with the matching package.</p> <p>The values from this table get carried into the forecast in <code>tbl_iande</code>.</p>"},{"location":"sheets/retirement/#fields","title":"Fields","text":"<ul> <li>Item is manually constructed from Who, Type and Firm.  </li> <li>Package - refers to a set of items on the <code>tbl_mcare_opt</code> table. The logic sums these, applies the start and end dates and places the value in the years.</li> <li>Spare_x - are there just to keep the years aligned with the income plan table.</li> <li>Start Date of the month when this line applies</li> <li>End Date (if given) ends the cost after this month.</li> </ul>"},{"location":"sheets/retirement/#data-source_1","title":"Data Source","text":"<p>These values are sourced from <code>data/retire_medical_template.tsv</code>.  If the values are changed, the template can be re-written using the extract_table utility.</p>"},{"location":"sheets/retireparms/","title":"retireparms","text":""},{"location":"sheets/retireparms/#pension-facts","title":"pension facts","text":"<p>Facts about pensions used by retirement sheet. This is a static lookup table with the field <code>Pension</code> acting as they key. The columns are attributes to be used in the elections. </p>"},{"location":"sheets/retireparms/#social-security","title":"social security","text":"<p>This table creates a key for the selected social security elections, by which the retirement table can find the value.  The values need to be entered for amounts available at different ages.</p>"},{"location":"sheets/retireparms/#data-source","title":"Data source","text":"<p>It is sourced from <code>data/social_security.json</code>, which can be re-written with</p> <pre><code>dance/extract_table.py -t tbl_social_security </code></pre>"},{"location":"sheets/retireparms/#mcare_opt","title":"mcare_opt","text":"<p>Medical plan options and selection. This is the menu of medical plan choices.</p>"},{"location":"sheets/retireparms/#fields","title":"Fields","text":"<ul> <li>Year: Idenifies what year the plan is for.</li> <li>Package: This idenfifies the elements of a package.  This is used to select a set of items.  The value corresponds to a value in <code>tbl_retir_medical</code>, or blank if not selected.</li> <li>Class, Firm, Name and ID are labels to help tell what the line is.</li> <li>Monthly is the monthly premium.  For part D plans this is the base amount.  Over and above this the surcharge, if any, will be applied.</li> <li>Premium is annual</li> <li>Cost is the annual premium + the deductible.</li> </ul>"},{"location":"sheets/retireparms/#data-source_1","title":"Data source","text":"<p>Setup sources this from: data/mcare_opt.json  To rewrite that file based on changes in the workbook</p> <pre><code> dance/extract_table.py -t tbl_mcare_opt </code></pre>"},{"location":"sheets/tax_tables/","title":"tax_tables","text":"<p>Selected (for our case) tax tables: - Federal tax tables,  - Connecticut tax tables, </p> <p>And required minimum distribution tables (two types).</p>"},{"location":"sheets/tax_tables/#federal-tax-table-married-joint","title":"Federal Tax Table Married Joint","text":"<p>Multiple years of tax tables for this filing status.</p> <p>These use the subtraction method in IRS pub detailed here: https://www.irs.gov/pub/irs-pdf/i1040gi.pdf.  This takes 6 rows and 4 columns per year.  These are organized in a single table.  </p> <p>The program <code>bracket_fix.py</code> computes the numbers for the subtraction table based on a csv file which is shows the values using the additive method. Not sure where I found that file, most recently, I recreated the format.  Kind of painful.  May be best to wait for the 1040 Instructions to be published each year. (Or find a reliable source)</p>"},{"location":"sheets/tax_tables/#ct-tax-table-married-joint","title":"CT Tax Table Married Joint","text":"<p>Multiple years of tax tables for this filing status.</p>"},{"location":"sheets/tax_tables/#reqd-min-distr-table-i","title":"Reqd Min Distr Table I","text":"<p>Table I is for beneficiaries (inherited IRA).</p>"},{"location":"sheets/tax_tables/#uniform-lifetime-table","title":"Uniform Lifetime Table","text":"<p>Also known as Table III, this table is for normal (not inherited) plans.</p>"},{"location":"sheets/taxes/","title":"taxes","text":"<p>This computes Federal and State income taxes, using the folding method.</p> <p>In my configuration it uses the Excel maximum of 8 levels.</p> <p>The functional fields brought in from the template are:</p> <ul> <li>Line - The line name on this sheet (indented style)</li> <li>Source - The line name on the source sheet (full path style)</li> <li>Tab - the table on which to locate the source</li> <li>Sign - either 1 or -1 to multiply times the value of the source </li> </ul> <p>Two additional fields are to help the OP make sense of it</p> <ul> <li>Tax_doc_ref</li> <li>Notes</li> </ul> <p>Computed by the loading program is</p> <ul> <li>Key - the full path style of this rows Line.</li> </ul>"},{"location":"sheets/taxes/#rows","title":"Rows","text":"<p>Values are pulled from iande, manual_actl, the tax tables, and from the the table itself (taking care not to create a dependency loop).</p>"},{"location":"sheets/taxes/#aggregation-lines","title":"Aggregation lines","text":"<p>In addition to the normal TOTAL, PRODUCT, MIN, and MAX methods, two addition ones are defined: FED_TAX and CT_TAX.  These call a VBA program to compute the tax based on the child values.</p>"},{"location":"sheets/taxes/#last-known-value-used-into-future","title":"Last known value used into future","text":"<p>The future value of a number of tax parameters are unknown. So the current value is propagated using the expansion formula <code>=tbl_taxes[@1&lt;Y1234]</code> which translates into the current row, 1 year earlier.</p>"},{"location":"sheets/taxes/#data-source","title":"Data Source","text":"<p>This uses the template <code>data/taxes_template.tsv</code> to layout the hierarchy. This is done using the Moneydance style of indenting.</p> <p></p>"},{"location":"sheets/transfers_actl/","title":"transfers-actl","text":"<p>This table shows the transfers to and from all accounts coming from or going to banks or credit cards.  </p> <p>It also shows the transfers to and from all bank and all credit card accounts at a summary level.  The bank and credit card transfers are based on the difference of successive balances.</p>"},{"location":"sheets/transfers_actl/#accounting-assumption","title":"Accounting Assumption","text":"<p>If there are transfers between these accounts, then they should pass through a bank account in order to be captured here.  That is the purpose of the pseudo bank account 'Passthru' and its sub-accounts in Moneydance.</p>"},{"location":"sheets/transfers_actl/#folding","title":"Folding","text":"<p>Other than Banks and Credit cards, the hierarchy of accounts is used allowing summarized values to be computed.</p>"},{"location":"sheets/transfers_actl/#data-sources","title":"Data Sources","text":"<p>This tab is loaded by <code>transfers-actl-load.py</code> from these sources:</p> <ol> <li>A copy of the output of moneydance transfer report stored under `data/transfers.tsv.  </li> <li>The method used is the difference of progressive balances.  The balances are generated by the <code>Account Balances</code> report selecting only banks and credit cards.  This is done for each year.  The tab-separated files are stored under <code>budget/data</code> as <code>bank-bal-YYYY</code>. </li> </ol>"},{"location":"sheets/transfers_plan/","title":"transfers_plan","text":"<p>This table simulates future transactions which move money between accounts.  </p> <p>The fields are transaction year, a source (from) account and a target (to) account, an amount and a place for notes.</p> <p>There is data validation on the account names to ensure they are valid and active. The complete list is generated at build time as a range out to the right. This is necessary because the drop down list function doesn't yet support dynamic arrays.</p> <p></p> <p>These data are summarized and carried on the the balances tab in future years on the Add/Wdraw lines by the following Excel formula:</p> <pre><code>=SUM(\n  BYROW(\n    (tbl_transfers_plan[[From_Account]:[To_Account]]=tbl_balances[@AcctName])*\n    HSTACK(-tbl_transfers_plan[Amount],tbl_transfers_plan[Amount]),\n    LAMBDA(row,SUM(row))\n    )\n  *(tbl_transfers_plan[Y_Year]=INDEX([#Headers],COLUMN())))\n</code></pre> <p>The SUM phrase calculates the net change defined in the transfers_plan for this account, this year</p>"},{"location":"sheets/utility/","title":"utility","text":"<p>This is deprecated.  It was originally to assist VBA in finding the tables.</p>"},{"location":"sheets/utility/#table_map","title":"table_map","text":"<p>This is a two column cross reference between table names their worksheet location.</p>"}]}