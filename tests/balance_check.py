#! /usr/bin/env python

'''Given a year compare the values in fcast.xlsm and '<year> Account Balances.tsv'

After a bit of fiddling to get the accounts to match, does a left join
and prints out how closely the values match
'''

  # utility to compare the balances between moneydance account balances report and fcast.xlsm
import argparse

import pandas as pd

from dance.util.files import tsv_to_df
from dance.util.tables import df_for_table_name


def compare(year,workbook):
  '''
  reads the values for a year from a saved the Account Balances report \
    generated by Moneydance and matches to those to the values a forecast workbook (fcast.xlsm)
    and displays other info including the reinvestment amount.
  '''
  y_year='Y{}'.format(year)
  file_name='data/acct-bals/{}.tsv'.format(year)
  m_bal=tsv_to_df(file_name,skiprows=3)
  m_bal=m_bal.dropna(how='any') # remove rows containing nan
  # this removes account type headings and unresolved transactions missing an account
  col='Account'
  # select only totals
  m_bal=m_bal.loc[ m_bal[col].str.contains(' - Total') ]
  m_bal.loc[:,col]=m_bal[col].str.replace(' - Total','') # remove the total label
  m_bal=m_bal[[col,'Current Balance']]
  #loan and liabilities have section labels identical to first level of account name, so drop them
  m_bal.drop_duplicates(inplace=True)
  m_bal.rename(columns={'Current Balance':'Moneydance'},inplace=True)
  m_bal.set_index(col,inplace=True)

  w_table=df_for_table_name(table_name='tbl_balances',data_only=True,workbook=workbook)
  w_bal=w_table.loc[w_table['ValType'].str.contains('End Bal')] # only the end balances
  w_bal=w_bal[['AcctName', y_year]]
  w_bal.set_index('AcctName',inplace=True)

  joined_bal=w_bal.join(m_bal,how='left')
  joined_bal.fillna(0, inplace=True)
  joined_bal['delta'] = joined_bal[y_year] -joined_bal['Moneydance']
  joined_bal.round(decimals=2)
  pd.set_option('display.float_format', lambda x: '%.2f' % x)
  print ('\nExact matches: '.upper())
  print (joined_bal.loc[abs(joined_bal.delta) < .005 ])
  print ('\nNot matching: '.upper())
  print (joined_bal.loc[abs(joined_bal.delta) >= .005 ])
  print ('\nReinvested amount: %.2f'% w_table.loc[w_table.ValType.str.contains('Reinv Amt'),y_year].sum())


if __name__ == '__main__':
  # execute only if run as a script
  parser = argparse.ArgumentParser(description ='This program reads the values from a saved the Account Balances report \
    generated by Moneydance and matches to those to the values from fcast.xlsm.')
  parser.add_argument('year', help='provide the 4 digit year',type=int)
  parser.add_argument('-workbook',default='fcast.xlsm',help='provide an alternative workbook')
  args=parser.parse_args()
  compare(args.year,args.workbook)
